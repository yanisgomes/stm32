
projetdemo2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00041bf0  0800b5a4  0800b5a4  0001b5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804d194  0804d194  00060098  2**0
                  CONTENTS
  4 .ARM          00000008  0804d194  0804d194  0005d194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804d19c  0804d19c  00060098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804d19c  0804d19c  0005d19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804d1a0  0804d1a0  0005d1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0804d1a4  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac8  20000098  0804d23c  00060098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  0804d23c  00060b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060098  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000600c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028e7e  00000000  00000000  0006010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e4f  00000000  00000000  00088f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021a8  00000000  00000000  0008edd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019fa  00000000  00000000  00090f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e643  00000000  00000000  0009297a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e53e  00000000  00000000  000c0fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e32d  00000000  00000000  000ef4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000910c  00000000  00000000  001fd828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00206934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b58c 	.word	0x0800b58c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	0800b58c 	.word	0x0800b58c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_ADC1_Init+0x98>)
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <MX_ADC1_Init+0x9c>)
 80005d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_ADC1_Init+0x98>)
 80005d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_ADC1_Init+0x98>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_ADC1_Init+0x98>)
 80005fe:	4a17      	ldr	r2, [pc, #92]	; (800065c <MX_ADC1_Init+0xa0>)
 8000600:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_ADC1_Init+0x98>)
 800060a:	2201      	movs	r2, #1
 800060c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_ADC1_Init+0x98>)
 8000618:	2201      	movs	r2, #1
 800061a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <MX_ADC1_Init+0x98>)
 800061e:	f004 f9e9 	bl	80049f4 <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000628:	f001 fd58 	bl	80020dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000630:	2301      	movs	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_ADC1_Init+0x98>)
 800063e:	f004 fb83 	bl	8004d48 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000648:	f001 fd48 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000b4 	.word	0x200000b4
 8000658:	40012000 	.word	0x40012000
 800065c:	0f000001 	.word	0x0f000001

08000660 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC3_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC3_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC3_Init+0x98>)
 800067a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ADC3_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC3_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ADC3_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC3_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC3_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC3_Init+0xa0>)
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006c2:	f004 f997 	bl	80049f4 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006cc:	f001 fd06 	bl	80020dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006d0:	2306      	movs	r3, #6
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006e2:	f004 fb31 	bl	8004d48 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006ec:	f001 fcf6 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000fc 	.word	0x200000fc
 80006fc:	40012200 	.word	0x40012200
 8000700:	0f000001 	.word	0x0f000001

08000704 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <HAL_ADC_MspInit+0xc8>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d124      	bne.n	8000770 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 800072c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000730:	6453      	str	r3, [r2, #68]	; 0x44
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000756:	2301      	movs	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075a:	2303      	movs	r3, #3
 800075c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	481a      	ldr	r0, [pc, #104]	; (80007d4 <HAL_ADC_MspInit+0xd0>)
 800076a:	f005 fc59 	bl	8006020 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800076e:	e029      	b.n	80007c4 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <HAL_ADC_MspInit+0xd4>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d124      	bne.n	80007c4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000798:	f043 0320 	orr.w	r3, r3, #32
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0320 	and.w	r3, r3, #32
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80007aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b0:	2303      	movs	r3, #3
 80007b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <HAL_ADC_MspInit+0xd8>)
 80007c0:	f005 fc2e 	bl	8006020 <HAL_GPIO_Init>
}
 80007c4:	bf00      	nop
 80007c6:	3730      	adds	r7, #48	; 0x30
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40012000 	.word	0x40012000
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40012200 	.word	0x40012200
 80007dc:	40021400 	.word	0x40021400

080007e0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_DAC_Init+0x4c>)
 80007f0:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <MX_DAC_Init+0x50>)
 80007f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_DAC_Init+0x4c>)
 80007f6:	f004 fdd9 	bl	80053ac <HAL_DAC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000800:	f001 fc6c 	bl	80020dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_DAC_Init+0x4c>)
 8000814:	f004 fe50 	bl	80054b8 <HAL_DAC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800081e:	f001 fc5d 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000144 	.word	0x20000144
 8000830:	40007400 	.word	0x40007400

08000834 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <HAL_DAC_MspInit+0x84>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d12b      	bne.n	80008ae <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_DAC_MspInit+0x88>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <HAL_DAC_MspInit+0x88>)
 800085c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_DAC_MspInit+0x88>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_DAC_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <HAL_DAC_MspInit+0x88>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_DAC_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000886:	2310      	movs	r3, #16
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_DAC_MspInit+0x8c>)
 800089a:	f005 fbc1 	bl	8006020 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	2036      	movs	r0, #54	; 0x36
 80008a4:	f004 fd58 	bl	8005358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008a8:	2036      	movs	r0, #54	; 0x36
 80008aa:	f004 fd71 	bl	8005390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40007400 	.word	0x40007400
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000

080008c4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <MX_DMA2D_Init+0x60>)
 80008cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008fa:	f004 fff5 	bl	80058e8 <HAL_DMA2D_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000904:	f001 fbea 	bl	80020dc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000908:	2101      	movs	r1, #1
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_DMA2D_Init+0x5c>)
 800090c:	f005 fa5a 	bl	8005dc4 <HAL_DMA2D_ConfigLayer>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000916:	f001 fbe1 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000158 	.word	0x20000158
 8000924:	4002b000 	.word	0x4002b000

08000928 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <HAL_DMA2D_MspInit+0x44>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d113      	bne.n	8000962 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_DMA2D_MspInit+0x48>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <HAL_DMA2D_MspInit+0x48>)
 8000940:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_DMA2D_MspInit+0x48>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	205a      	movs	r0, #90	; 0x5a
 8000958:	f004 fcfe 	bl	8005358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800095c:	205a      	movs	r0, #90	; 0x5a
 800095e:	f004 fd17 	bl	8005390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	4002b000 	.word	0x4002b000
 8000970:	40023800 	.word	0x40023800

08000974 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_FMC_Init+0x98>)
 800098e:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <MX_FMC_Init+0x9c>)
 8000990:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_FMC_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_FMC_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_FMC_Init+0x98>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_FMC_Init+0x98>)
 80009a6:	2210      	movs	r2, #16
 80009a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_FMC_Init+0x98>)
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_FMC_Init+0x98>)
 80009b2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_FMC_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_FMC_Init+0x98>)
 80009c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_FMC_Init+0x98>)
 80009c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_FMC_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009d8:	2307      	movs	r3, #7
 80009da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009e0:	2307      	movs	r3, #7
 80009e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009e4:	2303      	movs	r3, #3
 80009e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_FMC_Init+0x98>)
 80009f6:	f008 fc85 	bl	8009304 <HAL_SDRAM_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a00:	f001 fb6c 	bl	80020dc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000198 	.word	0x20000198
 8000a10:	a0000140 	.word	0xa0000140

08000a14 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a28:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <HAL_FMC_MspInit+0x100>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d16d      	bne.n	8000b0c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a30:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <HAL_FMC_MspInit+0x100>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a36:	4b38      	ldr	r3, [pc, #224]	; (8000b18 <HAL_FMC_MspInit+0x104>)
 8000a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a3a:	4a37      	ldr	r2, [pc, #220]	; (8000b18 <HAL_FMC_MspInit+0x104>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6393      	str	r3, [r2, #56]	; 0x38
 8000a42:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <HAL_FMC_MspInit+0x104>)
 8000a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a52:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a60:	230c      	movs	r3, #12
 8000a62:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	482c      	ldr	r0, [pc, #176]	; (8000b1c <HAL_FMC_MspInit+0x108>)
 8000a6a:	f005 fad9 	bl	8006020 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a6e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a72:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a80:	230c      	movs	r3, #12
 8000a82:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4825      	ldr	r0, [pc, #148]	; (8000b20 <HAL_FMC_MspInit+0x10c>)
 8000a8a:	f005 fac9 	bl	8006020 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a92:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481e      	ldr	r0, [pc, #120]	; (8000b24 <HAL_FMC_MspInit+0x110>)
 8000aaa:	f005 fab9 	bl	8006020 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000aae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ab2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4817      	ldr	r0, [pc, #92]	; (8000b28 <HAL_FMC_MspInit+0x114>)
 8000aca:	f005 faa9 	bl	8006020 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ace:	2328      	movs	r3, #40	; 0x28
 8000ad0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4811      	ldr	r0, [pc, #68]	; (8000b2c <HAL_FMC_MspInit+0x118>)
 8000ae8:	f005 fa9a 	bl	8006020 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000aec:	2308      	movs	r3, #8
 8000aee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afc:	230c      	movs	r3, #12
 8000afe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <HAL_FMC_MspInit+0x11c>)
 8000b06:	f005 fa8b 	bl	8006020 <HAL_GPIO_Init>
 8000b0a:	e000      	b.n	8000b0e <HAL_FMC_MspInit+0xfa>
    return;
 8000b0c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200001cc 	.word	0x200001cc
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40021800 	.word	0x40021800
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021c00 	.word	0x40021c00
 8000b30:	40020800 	.word	0x40020800

08000b34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b3c:	f7ff ff6a 	bl	8000a14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000b52:	20c8      	movs	r0, #200	; 0xc8
 8000b54:	f001 fdd2 	bl	80026fc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000b58:	f000 fa7a 	bl	8001050 <ft5336_I2C_InitializeIfRequired>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000b90:	f000 fa5e 	bl	8001050 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	e010      	b.n	8000bbc <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	21a8      	movs	r1, #168	; 0xa8
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fd8d 	bl	80026c0 <TS_IO_Read>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000baa:	7b7b      	ldrb	r3, [r7, #13]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b51      	cmp	r3, #81	; 0x51
 8000bb0:	d101      	bne.n	8000bb6 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d802      	bhi.n	8000bc8 <ft5336_ReadID+0x4e>
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0e8      	beq.n	8000b9a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	b29b      	uxth	r3, r3
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fa44 	bl	8001070 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f932 	bl	8000e54 <ft5336_TS_DisableIT>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fd57 	bl	80026c0 <TS_IO_Read>
 8000c12:	4603      	mov	r3, r0
 8000c14:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b05      	cmp	r3, #5
 8000c28:	d901      	bls.n	8000c2e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <ft5336_TS_DetectTouch+0x50>)
 8000c34:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <ft5336_TS_DetectTouch+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	b2db      	uxtb	r3, r3
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200001d0 	.word	0x200001d0

08000c4c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000c6e:	4b6d      	ldr	r3, [pc, #436]	; (8000e24 <ft5336_TS_GetXY+0x1d8>)
 8000c70:	789a      	ldrb	r2, [r3, #2]
 8000c72:	4b6c      	ldr	r3, [pc, #432]	; (8000e24 <ft5336_TS_GetXY+0x1d8>)
 8000c74:	785b      	ldrb	r3, [r3, #1]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	f080 80cf 	bcs.w	8000e1a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000c7c:	4b69      	ldr	r3, [pc, #420]	; (8000e24 <ft5336_TS_GetXY+0x1d8>)
 8000c7e:	789b      	ldrb	r3, [r3, #2]
 8000c80:	2b09      	cmp	r3, #9
 8000c82:	d871      	bhi.n	8000d68 <ft5336_TS_GetXY+0x11c>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <ft5336_TS_GetXY+0x40>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000cb5 	.word	0x08000cb5
 8000c90:	08000cc7 	.word	0x08000cc7
 8000c94:	08000cd9 	.word	0x08000cd9
 8000c98:	08000ceb 	.word	0x08000ceb
 8000c9c:	08000cfd 	.word	0x08000cfd
 8000ca0:	08000d0f 	.word	0x08000d0f
 8000ca4:	08000d21 	.word	0x08000d21
 8000ca8:	08000d33 	.word	0x08000d33
 8000cac:	08000d45 	.word	0x08000d45
 8000cb0:	08000d57 	.word	0x08000d57
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000cc0:	2305      	movs	r3, #5
 8000cc2:	753b      	strb	r3, [r7, #20]
      break;
 8000cc4:	e051      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	753b      	strb	r3, [r7, #20]
      break;
 8000cd6:	e048      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000ce0:	2312      	movs	r3, #18
 8000ce2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000ce4:	2311      	movs	r3, #17
 8000ce6:	753b      	strb	r3, [r7, #20]
      break;
 8000ce8:	e03f      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000cea:	2316      	movs	r3, #22
 8000cec:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000cee:	2315      	movs	r3, #21
 8000cf0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000cf2:	2318      	movs	r3, #24
 8000cf4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000cf6:	2317      	movs	r3, #23
 8000cf8:	753b      	strb	r3, [r7, #20]
      break;
 8000cfa:	e036      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000cfc:	231c      	movs	r3, #28
 8000cfe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000d00:	231b      	movs	r3, #27
 8000d02:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000d04:	231e      	movs	r3, #30
 8000d06:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000d08:	231d      	movs	r3, #29
 8000d0a:	753b      	strb	r3, [r7, #20]
      break;
 8000d0c:	e02d      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000d0e:	2322      	movs	r3, #34	; 0x22
 8000d10:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000d12:	2321      	movs	r3, #33	; 0x21
 8000d14:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000d16:	2324      	movs	r3, #36	; 0x24
 8000d18:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000d1a:	2323      	movs	r3, #35	; 0x23
 8000d1c:	753b      	strb	r3, [r7, #20]
      break;
 8000d1e:	e024      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000d20:	2328      	movs	r3, #40	; 0x28
 8000d22:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000d24:	2327      	movs	r3, #39	; 0x27
 8000d26:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000d28:	232a      	movs	r3, #42	; 0x2a
 8000d2a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000d2c:	2329      	movs	r3, #41	; 0x29
 8000d2e:	753b      	strb	r3, [r7, #20]
      break;
 8000d30:	e01b      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000d32:	232e      	movs	r3, #46	; 0x2e
 8000d34:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000d36:	232d      	movs	r3, #45	; 0x2d
 8000d38:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000d3a:	2330      	movs	r3, #48	; 0x30
 8000d3c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000d3e:	232f      	movs	r3, #47	; 0x2f
 8000d40:	753b      	strb	r3, [r7, #20]
      break;
 8000d42:	e012      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000d44:	2334      	movs	r3, #52	; 0x34
 8000d46:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000d48:	2333      	movs	r3, #51	; 0x33
 8000d4a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000d4c:	2336      	movs	r3, #54	; 0x36
 8000d4e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000d50:	2335      	movs	r3, #53	; 0x35
 8000d52:	753b      	strb	r3, [r7, #20]
      break;
 8000d54:	e009      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000d56:	233a      	movs	r3, #58	; 0x3a
 8000d58:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000d5a:	2339      	movs	r3, #57	; 0x39
 8000d5c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000d5e:	233c      	movs	r3, #60	; 0x3c
 8000d60:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000d62:	233b      	movs	r3, #59	; 0x3b
 8000d64:	753b      	strb	r3, [r7, #20]
      break;
 8000d66:	e000      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000d68:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000d6a:	89fb      	ldrh	r3, [r7, #14]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	7dfa      	ldrb	r2, [r7, #23]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fca4 	bl	80026c0 <TS_IO_Read>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000d7c:	7cfb      	ldrb	r3, [r7, #19]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000d84:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000d86:	89fb      	ldrh	r3, [r7, #14]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	7dba      	ldrb	r2, [r7, #22]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fc96 	bl	80026c0 <TS_IO_Read>
 8000d94:	4603      	mov	r3, r0
 8000d96:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000d98:	7cfb      	ldrb	r3, [r7, #19]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000db2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000db6:	881a      	ldrh	r2, [r3, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	7d7a      	ldrb	r2, [r7, #21]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fc7b 	bl	80026c0 <TS_IO_Read>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000dce:	7cfb      	ldrb	r3, [r7, #19]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000dd6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	7d3a      	ldrb	r2, [r7, #20]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fc6d 	bl	80026c0 <TS_IO_Read>
 8000de6:	4603      	mov	r3, r0
 8000de8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000dea:	7cfb      	ldrb	r3, [r7, #19]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000e04:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000e08:	881a      	ldrh	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <ft5336_TS_GetXY+0x1d8>)
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <ft5336_TS_GetXY+0x1d8>)
 8000e18:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001d0 	.word	0x200001d0
 8000e28:	200001d4 	.word	0x200001d4

08000e2c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	7bfa      	ldrb	r2, [r7, #15]
 8000e44:	21a4      	movs	r1, #164	; 0xa4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fc20 	bl	800268c <TS_IO_Write>
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	7bfa      	ldrb	r2, [r7, #15]
 8000e6c:	21a4      	movs	r1, #164	; 0xa4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fc0c 	bl	800268c <TS_IO_Write>
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	6039      	str	r1, [r7, #0]
 8000eb4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fbfd 	bl	80026c0 <TS_IO_Read>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4603      	mov	r3, r0
 8000eea:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <ft5336_TS_GetTouchInfo+0x158>)
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	461a      	mov	r2, r3
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	4293      	cmp	r3, r2
 8000f06:	f080 8090 	bcs.w	800102a <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2b09      	cmp	r3, #9
 8000f0e:	d85d      	bhi.n	8000fcc <ft5336_TS_GetTouchInfo+0xf0>
 8000f10:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <ft5336_TS_GetTouchInfo+0x3c>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000f41 	.word	0x08000f41
 8000f1c:	08000f4f 	.word	0x08000f4f
 8000f20:	08000f5d 	.word	0x08000f5d
 8000f24:	08000f6b 	.word	0x08000f6b
 8000f28:	08000f79 	.word	0x08000f79
 8000f2c:	08000f87 	.word	0x08000f87
 8000f30:	08000f95 	.word	0x08000f95
 8000f34:	08000fa3 	.word	0x08000fa3
 8000f38:	08000fb1 	.word	0x08000fb1
 8000f3c:	08000fbf 	.word	0x08000fbf
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000f40:	2303      	movs	r3, #3
 8000f42:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000f44:	2307      	movs	r3, #7
 8000f46:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	757b      	strb	r3, [r7, #21]
      break;
 8000f4c:	e03f      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000f4e:	2309      	movs	r3, #9
 8000f50:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000f52:	230d      	movs	r3, #13
 8000f54:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000f56:	230e      	movs	r3, #14
 8000f58:	757b      	strb	r3, [r7, #21]
      break;
 8000f5a:	e038      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000f60:	2313      	movs	r3, #19
 8000f62:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000f64:	2314      	movs	r3, #20
 8000f66:	757b      	strb	r3, [r7, #21]
      break;
 8000f68:	e031      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000f6a:	2315      	movs	r3, #21
 8000f6c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000f6e:	2319      	movs	r3, #25
 8000f70:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000f72:	231a      	movs	r3, #26
 8000f74:	757b      	strb	r3, [r7, #21]
      break;
 8000f76:	e02a      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000f78:	231b      	movs	r3, #27
 8000f7a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000f7c:	231f      	movs	r3, #31
 8000f7e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000f80:	2320      	movs	r3, #32
 8000f82:	757b      	strb	r3, [r7, #21]
      break;
 8000f84:	e023      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000f86:	2321      	movs	r3, #33	; 0x21
 8000f88:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000f8a:	2325      	movs	r3, #37	; 0x25
 8000f8c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000f8e:	2326      	movs	r3, #38	; 0x26
 8000f90:	757b      	strb	r3, [r7, #21]
      break;
 8000f92:	e01c      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000f94:	2327      	movs	r3, #39	; 0x27
 8000f96:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000f98:	232b      	movs	r3, #43	; 0x2b
 8000f9a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000f9c:	232c      	movs	r3, #44	; 0x2c
 8000f9e:	757b      	strb	r3, [r7, #21]
      break;
 8000fa0:	e015      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000fa2:	232d      	movs	r3, #45	; 0x2d
 8000fa4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000fa6:	2331      	movs	r3, #49	; 0x31
 8000fa8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000faa:	2332      	movs	r3, #50	; 0x32
 8000fac:	757b      	strb	r3, [r7, #21]
      break;
 8000fae:	e00e      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000fb0:	2333      	movs	r3, #51	; 0x33
 8000fb2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000fb4:	2337      	movs	r3, #55	; 0x37
 8000fb6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000fb8:	2338      	movs	r3, #56	; 0x38
 8000fba:	757b      	strb	r3, [r7, #21]
      break;
 8000fbc:	e007      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000fbe:	2339      	movs	r3, #57	; 0x39
 8000fc0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000fc2:	233d      	movs	r3, #61	; 0x3d
 8000fc4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000fc6:	233e      	movs	r3, #62	; 0x3e
 8000fc8:	757b      	strb	r3, [r7, #21]
      break;
 8000fca:	e000      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000fcc:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	7dfa      	ldrb	r2, [r7, #23]
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fb72 	bl	80026c0 <TS_IO_Read>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000fe0:	7d3b      	ldrb	r3, [r7, #20]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	119b      	asrs	r3, r3, #6
 8000fe6:	f003 0203 	and.w	r2, r3, #3
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	7dba      	ldrb	r2, [r7, #22]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fb62 	bl	80026c0 <TS_IO_Read>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001000:	7d3b      	ldrb	r3, [r7, #20]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	7d7a      	ldrb	r2, [r7, #21]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fb54 	bl	80026c0 <TS_IO_Read>
 8001018:	4603      	mov	r3, r0
 800101a:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800101c:	7d3b      	ldrb	r3, [r7, #20]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	111b      	asrs	r3, r3, #4
 8001022:	f003 0204 	and.w	r2, r3, #4
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001d0 	.word	0x200001d0

08001038 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <ft5336_Get_I2C_InitializedStatus+0x14>)
 800103e:	781b      	ldrb	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200001d0 	.word	0x200001d0

08001050 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001054:	f7ff fff0 	bl	8001038 <ft5336_Get_I2C_InitializedStatus>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800105e:	f001 fb0b 	bl	8002678 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001062:	4b02      	ldr	r3, [pc, #8]	; (800106c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
  }
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200001d0 	.word	0x200001d0

08001070 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b090      	sub	sp, #64	; 0x40
 8001090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a2:	4baf      	ldr	r3, [pc, #700]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4aae      	ldr	r2, [pc, #696]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4bac      	ldr	r3, [pc, #688]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ba:	4ba9      	ldr	r3, [pc, #676]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4aa8      	ldr	r2, [pc, #672]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4ba6      	ldr	r3, [pc, #664]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4ba3      	ldr	r3, [pc, #652]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4aa2      	ldr	r2, [pc, #648]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4ba0      	ldr	r3, [pc, #640]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
 80010e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	4b9d      	ldr	r3, [pc, #628]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a9c      	ldr	r2, [pc, #624]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b9a      	ldr	r3, [pc, #616]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b97      	ldr	r3, [pc, #604]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a96      	ldr	r2, [pc, #600]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b94      	ldr	r3, [pc, #592]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b91      	ldr	r3, [pc, #580]	; (8001360 <MX_GPIO_Init+0x2d4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a90      	ldr	r2, [pc, #576]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b8e      	ldr	r3, [pc, #568]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001132:	4b8b      	ldr	r3, [pc, #556]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a8a      	ldr	r2, [pc, #552]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b88      	ldr	r3, [pc, #544]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800114a:	4b85      	ldr	r3, [pc, #532]	; (8001360 <MX_GPIO_Init+0x2d4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a84      	ldr	r2, [pc, #528]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b82      	ldr	r3, [pc, #520]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001162:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b7c      	ldr	r3, [pc, #496]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117a:	4b79      	ldr	r3, [pc, #484]	; (8001360 <MX_GPIO_Init+0x2d4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a78      	ldr	r2, [pc, #480]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	4b73      	ldr	r3, [pc, #460]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a72      	ldr	r2, [pc, #456]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b70      	ldr	r3, [pc, #448]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2160      	movs	r1, #96	; 0x60
 80011ae:	486d      	ldr	r0, [pc, #436]	; (8001364 <MX_GPIO_Init+0x2d8>)
 80011b0:	f005 fa06 	bl	80065c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2120      	movs	r1, #32
 80011b8:	486b      	ldr	r0, [pc, #428]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80011ba:	f005 fa01 	bl	80065c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2108      	movs	r1, #8
 80011c2:	4869      	ldr	r0, [pc, #420]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80011c4:	f005 f9fc 	bl	80065c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2108      	movs	r1, #8
 80011cc:	4867      	ldr	r0, [pc, #412]	; (800136c <MX_GPIO_Init+0x2e0>)
 80011ce:	f005 f9f7 	bl	80065c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d8:	4865      	ldr	r0, [pc, #404]	; (8001370 <MX_GPIO_Init+0x2e4>)
 80011da:	f005 f9f1 	bl	80065c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80011de:	2200      	movs	r2, #0
 80011e0:	f645 6140 	movw	r1, #24128	; 0x5e40
 80011e4:	4863      	ldr	r0, [pc, #396]	; (8001374 <MX_GPIO_Init+0x2e8>)
 80011e6:	f005 f9eb 	bl	80065c0 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	21c8      	movs	r1, #200	; 0xc8
 80011ee:	4862      	ldr	r0, [pc, #392]	; (8001378 <MX_GPIO_Init+0x2ec>)
 80011f0:	f005 f9e6 	bl	80065c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80011f4:	2308      	movs	r3, #8
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001204:	4619      	mov	r1, r3
 8001206:	4857      	ldr	r0, [pc, #348]	; (8001364 <MX_GPIO_Init+0x2d8>)
 8001208:	f004 ff0a 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800120c:	2304      	movs	r3, #4
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800121c:	2309      	movs	r3, #9
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	484f      	ldr	r0, [pc, #316]	; (8001364 <MX_GPIO_Init+0x2d8>)
 8001228:	f004 fefa 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800122c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800123e:	230b      	movs	r3, #11
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	484b      	ldr	r0, [pc, #300]	; (8001378 <MX_GPIO_Init+0x2ec>)
 800124a:	f004 fee9 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 800124e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001260:	230a      	movs	r3, #10
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001268:	4619      	mov	r1, r3
 800126a:	4844      	ldr	r0, [pc, #272]	; (800137c <MX_GPIO_Init+0x2f0>)
 800126c:	f004 fed8 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001280:	2308      	movs	r3, #8
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	4837      	ldr	r0, [pc, #220]	; (8001368 <MX_GPIO_Init+0x2dc>)
 800128c:	f004 fec8 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001290:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012a2:	230c      	movs	r3, #12
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012aa:	4619      	mov	r1, r3
 80012ac:	4834      	ldr	r0, [pc, #208]	; (8001380 <MX_GPIO_Init+0x2f4>)
 80012ae:	f004 feb7 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 80012b2:	f248 1340 	movw	r3, #33088	; 0x8140
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c4:	4619      	mov	r1, r3
 80012c6:	482f      	ldr	r0, [pc, #188]	; (8001384 <MX_GPIO_Init+0x2f8>)
 80012c8:	f004 feaa 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80012cc:	2360      	movs	r3, #96	; 0x60
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e0:	4619      	mov	r1, r3
 80012e2:	4820      	ldr	r0, [pc, #128]	; (8001364 <MX_GPIO_Init+0x2d8>)
 80012e4:	f004 fe9c 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012f8:	230a      	movs	r3, #10
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001300:	4619      	mov	r1, r3
 8001302:	481e      	ldr	r0, [pc, #120]	; (800137c <MX_GPIO_Init+0x2f0>)
 8001304:	f004 fe8c 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800131a:	4619      	mov	r1, r3
 800131c:	481a      	ldr	r0, [pc, #104]	; (8001388 <MX_GPIO_Init+0x2fc>)
 800131e:	f004 fe7f 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001322:	2340      	movs	r3, #64	; 0x40
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001326:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001334:	4619      	mov	r1, r3
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001338:	f004 fe72 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 800133c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800134e:	230a      	movs	r3, #10
 8001350:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001356:	4619      	mov	r1, r3
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <MX_GPIO_Init+0x2f8>)
 800135a:	f004 fe61 	bl	8006020 <HAL_GPIO_Init>
 800135e:	e015      	b.n	800138c <MX_GPIO_Init+0x300>
 8001360:	40023800 	.word	0x40023800
 8001364:	40021000 	.word	0x40021000
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40022800 	.word	0x40022800
 8001370:	40022000 	.word	0x40022000
 8001374:	40021c00 	.word	0x40021c00
 8001378:	40021800 	.word	0x40021800
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020000 	.word	0x40020000
 8001388:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800138c:	23f0      	movs	r3, #240	; 0xf0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800139c:	230a      	movs	r3, #10
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a4:	4619      	mov	r1, r3
 80013a6:	4891      	ldr	r0, [pc, #580]	; (80015ec <MX_GPIO_Init+0x560>)
 80013a8:	f004 fe3a 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80013ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013be:	230a      	movs	r3, #10
 80013c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c6:	4619      	mov	r1, r3
 80013c8:	4889      	ldr	r0, [pc, #548]	; (80015f0 <MX_GPIO_Init+0x564>)
 80013ca:	f004 fe29 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 80013ce:	2328      	movs	r3, #40	; 0x28
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e2:	4619      	mov	r1, r3
 80013e4:	4883      	ldr	r0, [pc, #524]	; (80015f4 <MX_GPIO_Init+0x568>)
 80013e6:	f004 fe1b 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80013ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fc:	4619      	mov	r1, r3
 80013fe:	487e      	ldr	r0, [pc, #504]	; (80015f8 <MX_GPIO_Init+0x56c>)
 8001400:	f004 fe0e 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001404:	2308      	movs	r3, #8
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001418:	4619      	mov	r1, r3
 800141a:	4878      	ldr	r0, [pc, #480]	; (80015fc <MX_GPIO_Init+0x570>)
 800141c:	f004 fe00 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001420:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001426:	2300      	movs	r3, #0
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001432:	4619      	mov	r1, r3
 8001434:	486e      	ldr	r0, [pc, #440]	; (80015f0 <MX_GPIO_Init+0x564>)
 8001436:	f004 fdf3 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800143a:	2310      	movs	r3, #16
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144a:	4619      	mov	r1, r3
 800144c:	4869      	ldr	r0, [pc, #420]	; (80015f4 <MX_GPIO_Init+0x568>)
 800144e:	f004 fde7 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001452:	2304      	movs	r3, #4
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001462:	230c      	movs	r3, #12
 8001464:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800146a:	4619      	mov	r1, r3
 800146c:	4861      	ldr	r0, [pc, #388]	; (80015f4 <MX_GPIO_Init+0x568>)
 800146e:	f004 fdd7 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001472:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001484:	4619      	mov	r1, r3
 8001486:	485e      	ldr	r0, [pc, #376]	; (8001600 <MX_GPIO_Init+0x574>)
 8001488:	f004 fdca 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a2:	4619      	mov	r1, r3
 80014a4:	4851      	ldr	r0, [pc, #324]	; (80015ec <MX_GPIO_Init+0x560>)
 80014a6:	f004 fdbb 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80014aa:	f645 6340 	movw	r3, #24128	; 0x5e40
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c0:	4619      	mov	r1, r3
 80014c2:	484f      	ldr	r0, [pc, #316]	; (8001600 <MX_GPIO_Init+0x574>)
 80014c4:	f004 fdac 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014dc:	4619      	mov	r1, r3
 80014de:	4843      	ldr	r0, [pc, #268]	; (80015ec <MX_GPIO_Init+0x560>)
 80014e0:	f004 fd9e 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80014e4:	2310      	movs	r3, #16
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014f4:	230a      	movs	r3, #10
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fc:	4619      	mov	r1, r3
 80014fe:	4840      	ldr	r0, [pc, #256]	; (8001600 <MX_GPIO_Init+0x574>)
 8001500:	f004 fd8e 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001504:	23c8      	movs	r3, #200	; 0xc8
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001518:	4619      	mov	r1, r3
 800151a:	4835      	ldr	r0, [pc, #212]	; (80015f0 <MX_GPIO_Init+0x564>)
 800151c:	f004 fd80 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001520:	2305      	movs	r3, #5
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001530:	230a      	movs	r3, #10
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001538:	4619      	mov	r1, r3
 800153a:	482f      	ldr	r0, [pc, #188]	; (80015f8 <MX_GPIO_Init+0x56c>)
 800153c:	f004 fd70 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001540:	2332      	movs	r3, #50	; 0x32
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001550:	230b      	movs	r3, #11
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001558:	4619      	mov	r1, r3
 800155a:	4827      	ldr	r0, [pc, #156]	; (80015f8 <MX_GPIO_Init+0x56c>)
 800155c:	f004 fd60 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001560:	2304      	movs	r3, #4
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001570:	2309      	movs	r3, #9
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001578:	4619      	mov	r1, r3
 800157a:	4822      	ldr	r0, [pc, #136]	; (8001604 <MX_GPIO_Init+0x578>)
 800157c:	f004 fd50 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001580:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001592:	2309      	movs	r3, #9
 8001594:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159a:	4619      	mov	r1, r3
 800159c:	4815      	ldr	r0, [pc, #84]	; (80015f4 <MX_GPIO_Init+0x568>)
 800159e:	f004 fd3f 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015a2:	2386      	movs	r3, #134	; 0x86
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b2:	230b      	movs	r3, #11
 80015b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ba:	4619      	mov	r1, r3
 80015bc:	4812      	ldr	r0, [pc, #72]	; (8001608 <MX_GPIO_Init+0x57c>)
 80015be:	f004 fd2f 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80015c2:	2328      	movs	r3, #40	; 0x28
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015d2:	230a      	movs	r3, #10
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015da:	4619      	mov	r1, r3
 80015dc:	480a      	ldr	r0, [pc, #40]	; (8001608 <MX_GPIO_Init+0x57c>)
 80015de:	f004 fd1f 	bl	8006020 <HAL_GPIO_Init>

}
 80015e2:	bf00      	nop
 80015e4:	3740      	adds	r7, #64	; 0x40
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000
 80015f0:	40021800 	.word	0x40021800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40022800 	.word	0x40022800
 8001600:	40021c00 	.word	0x40021c00
 8001604:	40020400 	.word	0x40020400
 8001608:	40020000 	.word	0x40020000

0800160c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_I2C1_Init+0x74>)
 8001612:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <MX_I2C1_Init+0x78>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_I2C1_Init+0x74>)
 8001618:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <MX_I2C1_Init+0x7c>)
 800161a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <MX_I2C1_Init+0x74>)
 8001624:	2201      	movs	r2, #1
 8001626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_I2C1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_I2C1_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001646:	480e      	ldr	r0, [pc, #56]	; (8001680 <MX_I2C1_Init+0x74>)
 8001648:	f004 ffd4 	bl	80065f4 <HAL_I2C_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001652:	f000 fd43 	bl	80020dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4809      	ldr	r0, [pc, #36]	; (8001680 <MX_I2C1_Init+0x74>)
 800165a:	f005 fd61 	bl	8007120 <HAL_I2CEx_ConfigAnalogFilter>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001664:	f000 fd3a 	bl	80020dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_I2C1_Init+0x74>)
 800166c:	f005 fda3 	bl	80071b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 fd31 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200001d8 	.word	0x200001d8
 8001684:	40005400 	.word	0x40005400
 8001688:	00c0eaff 	.word	0x00c0eaff

0800168c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_I2C3_Init+0x74>)
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <MX_I2C3_Init+0x78>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_I2C3_Init+0x74>)
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <MX_I2C3_Init+0x7c>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_I2C3_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_I2C3_Init+0x74>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_I2C3_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_I2C3_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C3_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C3_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C3_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <MX_I2C3_Init+0x74>)
 80016c8:	f004 ff94 	bl	80065f4 <HAL_I2C_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80016d2:	f000 fd03 	bl	80020dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <MX_I2C3_Init+0x74>)
 80016da:	f005 fd21 	bl	8007120 <HAL_I2CEx_ConfigAnalogFilter>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80016e4:	f000 fcfa 	bl	80020dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_I2C3_Init+0x74>)
 80016ec:	f005 fd63 	bl	80071b6 <HAL_I2CEx_ConfigDigitalFilter>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80016f6:	f000 fcf1 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000022c 	.word	0x2000022c
 8001704:	40005c00 	.word	0x40005c00
 8001708:	00c0eaff 	.word	0x00c0eaff

0800170c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0ac      	sub	sp, #176	; 0xb0
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	2284      	movs	r2, #132	; 0x84
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f009 faa9 	bl	800ac84 <memset>
  if(i2cHandle->Instance==I2C1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a44      	ldr	r2, [pc, #272]	; (8001848 <HAL_I2C_MspInit+0x13c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d13d      	bne.n	80017b8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800173c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001740:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001742:	2300      	movs	r3, #0
 8001744:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	4618      	mov	r0, r3
 800174c:	f006 fe14 	bl	8008378 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001756:	f000 fcc1 	bl	80020dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <HAL_I2C_MspInit+0x140>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a3b      	ldr	r2, [pc, #236]	; (800184c <HAL_I2C_MspInit+0x140>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_I2C_MspInit+0x140>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001772:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177a:	2312      	movs	r3, #18
 800177c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800178c:	2304      	movs	r3, #4
 800178e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001796:	4619      	mov	r1, r3
 8001798:	482d      	ldr	r0, [pc, #180]	; (8001850 <HAL_I2C_MspInit+0x144>)
 800179a:	f004 fc41 	bl	8006020 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a2a      	ldr	r2, [pc, #168]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80017b6:	e042      	b.n	800183e <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_I2C_MspInit+0x148>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d13d      	bne.n	800183e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80017c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	f107 0318 	add.w	r3, r7, #24
 80017d2:	4618      	mov	r0, r3
 80017d4:	f006 fdd0 	bl	8008378 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80017de:	f000 fc7d 	bl	80020dc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80017fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	2312      	movs	r3, #18
 8001804:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001808:	2301      	movs	r3, #1
 800180a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001814:	2304      	movs	r3, #4
 8001816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800181a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800181e:	4619      	mov	r1, r3
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <HAL_I2C_MspInit+0x14c>)
 8001822:	f004 fbfd 	bl	8006020 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_I2C_MspInit+0x140>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_I2C_MspInit+0x140>)
 800182c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_I2C_MspInit+0x140>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
}
 800183e:	bf00      	nop
 8001840:	37b0      	adds	r7, #176	; 0xb0
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40005400 	.word	0x40005400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020400 	.word	0x40020400
 8001854:	40005c00 	.word	0x40005c00
 8001858:	40021c00 	.word	0x40021c00

0800185c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <HAL_I2C_MspDeInit+0x64>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d110      	bne.n	8001890 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_I2C_MspDeInit+0x68>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_I2C_MspDeInit+0x68>)
 8001874:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800187a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800187e:	4812      	ldr	r0, [pc, #72]	; (80018c8 <HAL_I2C_MspDeInit+0x6c>)
 8001880:	f004 fd7a 	bl	8006378 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001888:	480f      	ldr	r0, [pc, #60]	; (80018c8 <HAL_I2C_MspDeInit+0x6c>)
 800188a:	f004 fd75 	bl	8006378 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800188e:	e013      	b.n	80018b8 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_I2C_MspDeInit+0x70>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10e      	bne.n	80018b8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_I2C_MspDeInit+0x68>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_I2C_MspDeInit+0x68>)
 80018a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <HAL_I2C_MspDeInit+0x74>)
 80018aa:	f004 fd65 	bl	8006378 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80018ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <HAL_I2C_MspDeInit+0x74>)
 80018b4:	f004 fd60 	bl	8006378 <HAL_GPIO_DeInit>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40005400 	.word	0x40005400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40005c00 	.word	0x40005c00
 80018d0:	40021c00 	.word	0x40021c00

080018d4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08e      	sub	sp, #56	; 0x38
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2234      	movs	r2, #52	; 0x34
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f009 f9cf 	bl	800ac84 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80018e6:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <MX_LTDC_Init+0xfc>)
 80018e8:	4a3a      	ldr	r2, [pc, #232]	; (80019d4 <MX_LTDC_Init+0x100>)
 80018ea:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <MX_LTDC_Init+0xfc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018f2:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <MX_LTDC_Init+0xfc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018f8:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <MX_LTDC_Init+0xfc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018fe:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001906:	2228      	movs	r2, #40	; 0x28
 8001908:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <MX_LTDC_Init+0xfc>)
 800190c:	2209      	movs	r2, #9
 800190e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001910:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001912:	2235      	movs	r2, #53	; 0x35
 8001914:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001918:	220b      	movs	r2, #11
 800191a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <MX_LTDC_Init+0xfc>)
 800191e:	f240 2215 	movw	r2, #533	; 0x215
 8001922:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001926:	f240 121b 	movw	r2, #283	; 0x11b
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800192c:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <MX_LTDC_Init+0xfc>)
 800192e:	f240 2235 	movw	r2, #565	; 0x235
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001936:	f240 121d 	movw	r2, #285	; 0x11d
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <MX_LTDC_Init+0xfc>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <MX_LTDC_Init+0xfc>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001954:	481e      	ldr	r0, [pc, #120]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001956:	f005 fc7b 	bl	8007250 <HAL_LTDC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001960:	f000 fbbc 	bl	80020dc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001968:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800196c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001972:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001976:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001978:	2302      	movs	r3, #2
 800197a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800197c:	23ff      	movs	r3, #255	; 0xff
 800197e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001984:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001988:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800198a:	2307      	movs	r3, #7
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800198e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001994:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800199a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_LTDC_Init+0xfc>)
 80019ba:	f005 fddb 	bl	8007574 <HAL_LTDC_ConfigLayer>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80019c4:	f000 fb8a 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3738      	adds	r7, #56	; 0x38
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000280 	.word	0x20000280
 80019d4:	40016800 	.word	0x40016800

080019d8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0ae      	sub	sp, #184	; 0xb8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	2284      	movs	r2, #132	; 0x84
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f009 f943 	bl	800ac84 <memset>
  if(ltdcHandle->Instance==LTDC)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6f      	ldr	r2, [pc, #444]	; (8001bc0 <HAL_LTDC_MspInit+0x1e8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	f040 80d6 	bne.w	8001bb6 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a0e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a14:	2305      	movs	r3, #5
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a28:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f006 fca2 	bl	8008378 <HAL_RCCEx_PeriphCLKConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001a3a:	f000 fb4f 	bl	80020dc <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a3e:	4b61      	ldr	r3, [pc, #388]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a60      	ldr	r2, [pc, #384]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b5e      	ldr	r3, [pc, #376]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a56:	4b5b      	ldr	r3, [pc, #364]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a5a      	ldr	r2, [pc, #360]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a6e:	4b55      	ldr	r3, [pc, #340]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a54      	ldr	r2, [pc, #336]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b52      	ldr	r3, [pc, #328]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a86:	4b4f      	ldr	r3, [pc, #316]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a4e      	ldr	r2, [pc, #312]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9e:	4b49      	ldr	r3, [pc, #292]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ab6:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a42      	ldr	r2, [pc, #264]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001ace:	2310      	movs	r3, #16
 8001ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ae6:	230e      	movs	r3, #14
 8001ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4835      	ldr	r0, [pc, #212]	; (8001bc8 <HAL_LTDC_MspInit+0x1f0>)
 8001af4:	f004 fa94 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001af8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b12:	230e      	movs	r3, #14
 8001b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001b18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	482b      	ldr	r0, [pc, #172]	; (8001bcc <HAL_LTDC_MspInit+0x1f4>)
 8001b20:	f004 fa7e 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001b24:	23f7      	movs	r3, #247	; 0xf7
 8001b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b3c:	230e      	movs	r3, #14
 8001b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b46:	4619      	mov	r1, r3
 8001b48:	4821      	ldr	r0, [pc, #132]	; (8001bd0 <HAL_LTDC_MspInit+0x1f8>)
 8001b4a:	f004 fa69 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b68:	2309      	movs	r3, #9
 8001b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4817      	ldr	r0, [pc, #92]	; (8001bd4 <HAL_LTDC_MspInit+0x1fc>)
 8001b76:	f004 fa53 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001b7a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b94:	230e      	movs	r3, #14
 8001b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <HAL_LTDC_MspInit+0x200>)
 8001ba2:	f004 fa3d 	bl	8006020 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2058      	movs	r0, #88	; 0x58
 8001bac:	f003 fbd4 	bl	8005358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001bb0:	2058      	movs	r0, #88	; 0x58
 8001bb2:	f003 fbed 	bl	8005390 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	37b8      	adds	r7, #184	; 0xb8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40016800 	.word	0x40016800
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40022400 	.word	0x40022400
 8001bd0:	40022800 	.word	0x40022800
 8001bd4:	40021800 	.word	0x40021800
 8001bd8:	40022000 	.word	0x40022000

08001bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b0bb      	sub	sp, #236	; 0xec
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
 	char text[50]={};
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001be8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bec:	222e      	movs	r2, #46	; 0x2e
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f009 f847 	bl	800ac84 <memset>

	static TS_StateTypeDef  TS_State;

	char str_time[50] = {};
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bfe:	222e      	movs	r2, #46	; 0x2e
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f009 f83e 	bl	800ac84 <memset>
	RTC_DateTypeDef sDate = {0};
 8001c08:	2300      	movs	r3, #0
 8001c0a:	66bb      	str	r3, [r7, #104]	; 0x68
	RTC_TimeTypeDef sTime = {0};
 8001c0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001c1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_StatusTypeDef status;
	char tx_msg[50];
	char rx_msg[10];
	uint8_t rx_char;

	int xMove = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	int yMove = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	int vxy = 5;
 8001c3e:	2305      	movs	r3, #5
 8001c40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	int xPos = 50;
 8001c44:	2332      	movs	r3, #50	; 0x32
 8001c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	int yPos = 50;
 8001c4a:	2332      	movs	r3, #50	; 0x32
 8001c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c50:	f002 fe7f 	bl	8004952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c54:	f000 f9be 	bl	8001fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c58:	f7ff fa18 	bl	800108c <MX_GPIO_Init>
  MX_ADC3_Init();
 8001c5c:	f7fe fd00 	bl	8000660 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001c60:	f7fe fe30 	bl	80008c4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001c64:	f7fe fe86 	bl	8000974 <MX_FMC_Init>
  MX_I2C1_Init();
 8001c68:	f7ff fcd0 	bl	800160c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c6c:	f7ff fd0e 	bl	800168c <MX_I2C3_Init>
  MX_LTDC_Init();
 8001c70:	f7ff fe30 	bl	80018d4 <MX_LTDC_Init>
  MX_RTC_Init();
 8001c74:	f000 fa38 	bl	80020e8 <MX_RTC_Init>
  MX_SPI2_Init();
 8001c78:	f000 fb08 	bl	800228c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001c7c:	f002 fa7c 	bl	8004178 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c80:	f002 face 	bl	8004220 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c84:	f002 fb1a 	bl	80042bc <MX_TIM3_Init>
  MX_TIM5_Init();
 8001c88:	f002 fb66 	bl	8004358 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001c8c:	f002 fbb2 	bl	80043f4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001c90:	f002 fcc6 	bl	8004620 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001c94:	f002 fcf4 	bl	8004680 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001c98:	f7fe fc90 	bl	80005bc <MX_ADC1_Init>
  MX_DAC_Init();
 8001c9c:	f7fe fda0 	bl	80007e0 <MX_DAC_Init>
  MX_UART7_Init();
 8001ca0:	f002 fc8e 	bl	80045c0 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001ca4:	f000 fd36 	bl	8002714 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001ca8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001cac:	2000      	movs	r0, #0
 8001cae:	f000 fdc9 	bl	8002844 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001cb2:	f000 fd9f 	bl	80027f4 <BSP_LCD_GetXSize>
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	f000 fdb0 	bl	800281c <BSP_LCD_GetYSize>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	fb04 f303 	mul.w	r3, r4, r3
 8001cc2:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f000 fdba 	bl	8002844 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001cd0:	f001 fa8a 	bl	80031e8 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f000 fe15 	bl	8002904 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_RED);
 8001cda:	48ad      	ldr	r0, [pc, #692]	; (8001f90 <main+0x3b4>)
 8001cdc:	f000 fe6e 	bl	80029bc <BSP_LCD_Clear>
  BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
 8001ce0:	4aac      	ldr	r2, [pc, #688]	; (8001f94 <main+0x3b8>)
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f001 f92d 	bl	8002f44 <BSP_LCD_DrawBitmap>

  BSP_LCD_SelectLayer(1);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f000 fe0a 	bl	8002904 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f000 fe63 	bl	80029bc <BSP_LCD_Clear>

  BSP_LCD_SetFont(&Font24); // Définit la police à Font16
 8001cf6:	48a8      	ldr	r0, [pc, #672]	; (8001f98 <main+0x3bc>)
 8001cf8:	f000 fe46 	bl	8002988 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN); // Définit la couleur du texte en vert
 8001cfc:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001d00:	f000 fe10 	bl	8002924 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK); // Définit la couleur de fond du texte en noir
 8001d04:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001d08:	f000 fe24 	bl	8002954 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001d0c:	f000 fd72 	bl	80027f4 <BSP_LCD_GetXSize>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b29c      	uxth	r4, r3
 8001d14:	f000 fd82 	bl	800281c <BSP_LCD_GetYSize>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f001 fe74 	bl	8003a0c <BSP_TS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d28:	489c      	ldr	r0, [pc, #624]	; (8001f9c <main+0x3c0>)
 8001d2a:	f004 fc31 	bl	8006590 <HAL_GPIO_ReadPin>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d36:	489a      	ldr	r0, [pc, #616]	; (8001fa0 <main+0x3c4>)
 8001d38:	f004 fc42 	bl	80065c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
 8001d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d40:	4896      	ldr	r0, [pc, #600]	; (8001f9c <main+0x3c0>)
 8001d42:	f004 fc25 	bl	8006590 <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2120      	movs	r1, #32
 8001d4c:	4895      	ldr	r0, [pc, #596]	; (8001fa4 <main+0x3c8>)
 8001d4e:	f004 fc37 	bl	80065c0 <HAL_GPIO_WritePin>
//	  sConfig.Channel = ADC_CHANNEL_7;
//	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
//	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
//	  vxy = (int)HAL_ADC_GetValue(&hadc3)/200;

	  sConfig.Channel = ADC_CHANNEL_8;
 8001d52:	2308      	movs	r3, #8
 8001d54:	647b      	str	r3, [r7, #68]	; 0x44
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001d56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4892      	ldr	r0, [pc, #584]	; (8001fa8 <main+0x3cc>)
 8001d5e:	f002 fff3 	bl	8004d48 <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 8001d62:	4892      	ldr	r0, [pc, #584]	; (8001fac <main+0x3d0>)
 8001d64:	f002 fe8a 	bl	8004a7c <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001d68:	bf00      	nop
 8001d6a:	2164      	movs	r1, #100	; 0x64
 8001d6c:	488f      	ldr	r0, [pc, #572]	; (8001fac <main+0x3d0>)
 8001d6e:	f002 ff53 	bl	8004c18 <HAL_ADC_PollForConversion>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f8      	bne.n	8001d6a <main+0x18e>
	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8001d78:	488c      	ldr	r0, [pc, #560]	; (8001fac <main+0x3d0>)
 8001d7a:	f002 ffd8 	bl	8004d2e <HAL_ADC_GetValue>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4a8b      	ldr	r2, [pc, #556]	; (8001fb0 <main+0x3d4>)
 8001d82:	6013      	str	r3, [r2, #0]

	  HAL_ADC_Start(&hadc3);
 8001d84:	4888      	ldr	r0, [pc, #544]	; (8001fa8 <main+0x3cc>)
 8001d86:	f002 fe79 	bl	8004a7c <HAL_ADC_Start>
	  while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001d8a:	bf00      	nop
 8001d8c:	2164      	movs	r1, #100	; 0x64
 8001d8e:	4886      	ldr	r0, [pc, #536]	; (8001fa8 <main+0x3cc>)
 8001d90:	f002 ff42 	bl	8004c18 <HAL_ADC_PollForConversion>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f8      	bne.n	8001d8c <main+0x1b0>
	  joystick_v = HAL_ADC_GetValue(&hadc3);
 8001d9a:	4883      	ldr	r0, [pc, #524]	; (8001fa8 <main+0x3cc>)
 8001d9c:	f002 ffc7 	bl	8004d2e <HAL_ADC_GetValue>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4a84      	ldr	r2, [pc, #528]	; (8001fb4 <main+0x3d8>)
 8001da4:	6013      	str	r3, [r2, #0]

	  // Formatage des valeurs du joystick dans une chaîne de caractères
	  sprintf(tx_msg, "h=%d | v=%d\n\r", joystick_h, joystick_v);
 8001da6:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <main+0x3d4>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4b82      	ldr	r3, [pc, #520]	; (8001fb4 <main+0x3d8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f107 0010 	add.w	r0, r7, #16
 8001db2:	4981      	ldr	r1, [pc, #516]	; (8001fb8 <main+0x3dc>)
 8001db4:	f008 ff46 	bl	800ac44 <siprintf>

	  // Envoi de la chaîne de caractères via UART
	  HAL_UART_Transmit(&huart1, (uint8_t*)tx_msg, strlen(tx_msg), HAL_MAX_DELAY);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fa27 	bl	8000210 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	f107 0110 	add.w	r1, r7, #16
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	487b      	ldr	r0, [pc, #492]	; (8001fbc <main+0x3e0>)
 8001dd0:	f008 f8ea 	bl	8009fa8 <HAL_UART_Transmit>

	  status = HAL_UART_Receive(&huart1, &rx_char,1, 500);
 8001dd4:	1cf9      	adds	r1, r7, #3
 8001dd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4877      	ldr	r0, [pc, #476]	; (8001fbc <main+0x3e0>)
 8001dde:	f008 f966 	bl	800a0ae <HAL_UART_Receive>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

	  // Background update
	  BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
 8001de8:	4a6a      	ldr	r2, [pc, #424]	; (8001f94 <main+0x3b8>)
 8001dea:	2100      	movs	r1, #0
 8001dec:	2000      	movs	r0, #0
 8001dee:	f001 f8a9 	bl	8002f44 <BSP_LCD_DrawBitmap>

	  BSP_LCD_SetFont(&Font12);
 8001df2:	4873      	ldr	r0, [pc, #460]	; (8001fc0 <main+0x3e4>)
 8001df4:	f000 fdc8 	bl	8002988 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001df8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001dfc:	f000 fd92 	bl	8002924 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f000 fda6 	bl	8002954 <BSP_LCD_SetBackColor>

	  sprintf(text, ">> %d", rx_char);
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e10:	496c      	ldr	r1, [pc, #432]	; (8001fc4 <main+0x3e8>)
 8001e12:	4618      	mov	r0, r3
 8001e14:	f008 ff16 	bl	800ac44 <siprintf>
	  BSP_LCD_DisplayStringAt(5, 5, (uint8_t*)text, LEFT_MODE);
 8001e18:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	2105      	movs	r1, #5
 8001e20:	2005      	movs	r0, #5
 8001e22:	f000 fe37 	bl	8002a94 <BSP_LCD_DisplayStringAt>

	  sprintf(text, "vxy = %d", vxy);
 8001e26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e2a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e2e:	4966      	ldr	r1, [pc, #408]	; (8001fc8 <main+0x3ec>)
 8001e30:	4618      	mov	r0, r3
 8001e32:	f008 ff07 	bl	800ac44 <siprintf>
	  BSP_LCD_DisplayStringAt(400, 5, (uint8_t*)text, LEFT_MODE);
 8001e36:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	2105      	movs	r1, #5
 8001e3e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e42:	f000 fe27 	bl	8002a94 <BSP_LCD_DisplayStringAt>

//	  sprintf(text, ">>> %d", rx_char);
//
//	  BSP_LCD_DisplayStringAt(row*2, col*4, (uint8_t*)text, LEFT_MODE);

	  if (status == HAL_TIMEOUT) {
 8001e46:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d106      	bne.n	8001e5c <main+0x280>
		  xMove = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		  yMove = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e5a:	e03d      	b.n	8001ed8 <main+0x2fc>
	  } else {
		  switch(rx_char) {
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	3b71      	subs	r3, #113	; 0x71
 8001e60:	2b09      	cmp	r3, #9
 8001e62:	d839      	bhi.n	8001ed8 <main+0x2fc>
 8001e64:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <main+0x290>)
 8001e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6a:	bf00      	nop
 8001e6c:	08001ec7 	.word	0x08001ec7
 8001e70:	08001ed9 	.word	0x08001ed9
 8001e74:	08001eb7 	.word	0x08001eb7
 8001e78:	08001ed9 	.word	0x08001ed9
 8001e7c:	08001ed9 	.word	0x08001ed9
 8001e80:	08001ed9 	.word	0x08001ed9
 8001e84:	08001ea7 	.word	0x08001ea7
 8001e88:	08001ed9 	.word	0x08001ed9
 8001e8c:	08001ed9 	.word	0x08001ed9
 8001e90:	08001e95 	.word	0x08001e95

		  case 122 :
			  xMove = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			  yMove = -vxy;
 8001e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e9e:	425b      	negs	r3, r3
 8001ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			  break;
 8001ea4:	e018      	b.n	8001ed8 <main+0x2fc>
		  case 119 :
			  xMove = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			  yMove = vxy;
 8001eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			  break;
 8001eb4:	e010      	b.n	8001ed8 <main+0x2fc>
		  case 115 :
			  xMove = vxy;
 8001eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			  yMove = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			  break;
 8001ec4:	e008      	b.n	8001ed8 <main+0x2fc>
		  case 113 :
			  xMove = -vxy;
 8001ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001eca:	425b      	negs	r3, r3
 8001ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			  yMove = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			  break;
 8001ed6:	bf00      	nop
		  }
	  }

	  xPos += xMove;
 8001ed8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	  yPos += yMove;
 8001ee6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001eee:	4413      	add	r3, r2
 8001ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	  if (xPos < 0) {
 8001ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da03      	bge.n	8001f04 <main+0x328>
		  xPos = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001f02:	e00b      	b.n	8001f1c <main+0x340>
	  } else if (xPos > BSP_LCD_GetXSize()) {
 8001f04:	f000 fc76 	bl	80027f4 <BSP_LCD_GetXSize>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d204      	bcs.n	8001f1c <main+0x340>
		  xPos = BSP_LCD_GetXSize();
 8001f12:	f000 fc6f 	bl	80027f4 <BSP_LCD_GetXSize>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	  }

	  if (yPos < 0) {
 8001f1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	da03      	bge.n	8001f2c <main+0x350>
		  yPos = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f2a:	e00b      	b.n	8001f44 <main+0x368>
	  } else if (yPos > BSP_LCD_GetYSize()) {
 8001f2c:	f000 fc76 	bl	800281c <BSP_LCD_GetYSize>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d204      	bcs.n	8001f44 <main+0x368>
		  yPos = BSP_LCD_GetYSize();
 8001f3a:	f000 fc6f 	bl	800281c <BSP_LCD_GetYSize>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  }

	  BSP_LCD_SetFont(&Font24);
 8001f44:	4814      	ldr	r0, [pc, #80]	; (8001f98 <main+0x3bc>)
 8001f46:	f000 fd1f 	bl	8002988 <BSP_LCD_SetFont>
	  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001f4a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001f4e:	f000 fce9 	bl	8002924 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001f52:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001f56:	f000 fcfd 	bl	8002954 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(xPos, yPos, (uint8_t*)"o", LEFT_MODE);
 8001f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f5e:	b298      	uxth	r0, r3
 8001f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f64:	b299      	uxth	r1, r3
 8001f66:	2303      	movs	r3, #3
 8001f68:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <main+0x3f0>)
 8001f6a:	f000 fd93 	bl	8002a94 <BSP_LCD_DisplayStringAt>
//	  BSP_LCD_DisplayStringAt(row, col, (uint8_t*)str_time, LEFT_MODE);
//	  // Dans la boucle principale ou la fonction de mise à jour
//	  //UpdateBackgroundColor(joystick_h, joystick_v);


	  BSP_TS_GetState(&TS_State);
 8001f6e:	4818      	ldr	r0, [pc, #96]	; (8001fd0 <main+0x3f4>)
 8001f70:	f001 fd8c 	bl	8003a8c <BSP_TS_GetState>
	  if(TS_State.touchDetected){
 8001f74:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <main+0x3f4>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f43f aed3 	beq.w	8001d24 <main+0x148>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <main+0x3f4>)
 8001f80:	885b      	ldrh	r3, [r3, #2]
 8001f82:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <main+0x3f4>)
 8001f84:	8991      	ldrh	r1, [r2, #12]
 8001f86:	2204      	movs	r2, #4
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 f88d 	bl	80030a8 <BSP_LCD_FillCircle>
	  HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001f8e:	e6c9      	b.n	8001d24 <main+0x148>
 8001f90:	ffff0000 	.word	0xffff0000
 8001f94:	0800b5cc 	.word	0x0800b5cc
 8001f98:	20000028 	.word	0x20000028
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40021c00 	.word	0x40021c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	200000fc 	.word	0x200000fc
 8001fac:	200000b4 	.word	0x200000b4
 8001fb0:	2000032c 	.word	0x2000032c
 8001fb4:	20000328 	.word	0x20000328
 8001fb8:	0800b5a4 	.word	0x0800b5a4
 8001fbc:	20000904 	.word	0x20000904
 8001fc0:	20000030 	.word	0x20000030
 8001fc4:	0800b5b4 	.word	0x0800b5b4
 8001fc8:	0800b5bc 	.word	0x0800b5bc
 8001fcc:	0800b5c8 	.word	0x0800b5c8
 8001fd0:	20000330 	.word	0x20000330

08001fd4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b094      	sub	sp, #80	; 0x50
 8001fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fda:	f107 0320 	add.w	r3, r7, #32
 8001fde:	2230      	movs	r2, #48	; 0x30
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f008 fe4e 	bl	800ac84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ff8:	f005 fca2 	bl	8007940 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <SystemClock_Config+0xdc>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	4a2b      	ldr	r2, [pc, #172]	; (80020b0 <SystemClock_Config+0xdc>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	6413      	str	r3, [r2, #64]	; 0x40
 8002008:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <SystemClock_Config+0xdc>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <SystemClock_Config+0xe0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <SystemClock_Config+0xe0>)
 800201a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <SystemClock_Config+0xe0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800202c:	2309      	movs	r3, #9
 800202e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002036:	2301      	movs	r3, #1
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800203a:	2302      	movs	r3, #2
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800203e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002044:	2319      	movs	r3, #25
 8002046:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002048:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800204c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800204e:	2302      	movs	r3, #2
 8002050:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002052:	2309      	movs	r3, #9
 8002054:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002056:	f107 0320 	add.w	r3, r7, #32
 800205a:	4618      	mov	r0, r3
 800205c:	f005 fcd0 	bl	8007a00 <HAL_RCC_OscConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002066:	f000 f839 	bl	80020dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800206a:	f005 fc79 	bl	8007960 <HAL_PWREx_EnableOverDrive>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002074:	f000 f832 	bl	80020dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002078:	230f      	movs	r3, #15
 800207a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002084:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002088:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800208a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2106      	movs	r1, #6
 8002096:	4618      	mov	r0, r3
 8002098:	f005 ff56 	bl	8007f48 <HAL_RCC_ClockConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80020a2:	f000 f81b 	bl	80020dc <Error_Handler>
  }
}
 80020a6:	bf00      	nop
 80020a8:	3750      	adds	r7, #80	; 0x50
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40007000 	.word	0x40007000

080020b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020ca:	f002 fc4f 	bl	800496c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40001000 	.word	0x40001000

080020dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <Error_Handler+0x8>
	...

080020e8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b090      	sub	sp, #64	; 0x40
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80020fe:	2300      	movs	r3, #0
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002102:	463b      	mov	r3, r7
 8002104:	2228      	movs	r2, #40	; 0x28
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f008 fdbb 	bl	800ac84 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800210e:	4b46      	ldr	r3, [pc, #280]	; (8002228 <MX_RTC_Init+0x140>)
 8002110:	4a46      	ldr	r2, [pc, #280]	; (800222c <MX_RTC_Init+0x144>)
 8002112:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002114:	4b44      	ldr	r3, [pc, #272]	; (8002228 <MX_RTC_Init+0x140>)
 8002116:	2200      	movs	r2, #0
 8002118:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800211a:	4b43      	ldr	r3, [pc, #268]	; (8002228 <MX_RTC_Init+0x140>)
 800211c:	227f      	movs	r2, #127	; 0x7f
 800211e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <MX_RTC_Init+0x140>)
 8002122:	22ff      	movs	r2, #255	; 0xff
 8002124:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002126:	4b40      	ldr	r3, [pc, #256]	; (8002228 <MX_RTC_Init+0x140>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800212c:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <MX_RTC_Init+0x140>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <MX_RTC_Init+0x140>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002138:	483b      	ldr	r0, [pc, #236]	; (8002228 <MX_RTC_Init+0x140>)
 800213a:	f006 fd0d 	bl	8008b58 <HAL_RTC_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002144:	f7ff ffca 	bl	80020dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002148:	2300      	movs	r3, #0
 800214a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002154:	2300      	movs	r3, #0
 8002156:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800215a:	2300      	movs	r3, #0
 800215c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002166:	2201      	movs	r2, #1
 8002168:	4619      	mov	r1, r3
 800216a:	482f      	ldr	r0, [pc, #188]	; (8002228 <MX_RTC_Init+0x140>)
 800216c:	f006 fd78 	bl	8008c60 <HAL_RTC_SetTime>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002176:	f7ff ffb1 	bl	80020dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002180:	2301      	movs	r3, #1
 8002182:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800218c:	2300      	movs	r3, #0
 800218e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002196:	2201      	movs	r2, #1
 8002198:	4619      	mov	r1, r3
 800219a:	4823      	ldr	r0, [pc, #140]	; (8002228 <MX_RTC_Init+0x140>)
 800219c:	f006 fdfa 	bl	8008d94 <HAL_RTC_SetDate>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80021a6:	f7ff ff99 	bl	80020dc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80021d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80021da:	463b      	mov	r3, r7
 80021dc:	2201      	movs	r2, #1
 80021de:	4619      	mov	r1, r3
 80021e0:	4811      	ldr	r0, [pc, #68]	; (8002228 <MX_RTC_Init+0x140>)
 80021e2:	f006 fe5b 	bl	8008e9c <HAL_RTC_SetAlarm>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80021ec:	f7ff ff76 	bl	80020dc <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80021f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80021f6:	463b      	mov	r3, r7
 80021f8:	2201      	movs	r2, #1
 80021fa:	4619      	mov	r1, r3
 80021fc:	480a      	ldr	r0, [pc, #40]	; (8002228 <MX_RTC_Init+0x140>)
 80021fe:	f006 fe4d 	bl	8008e9c <HAL_RTC_SetAlarm>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002208:	f7ff ff68 	bl	80020dc <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800220c:	2202      	movs	r2, #2
 800220e:	2100      	movs	r1, #0
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_RTC_Init+0x140>)
 8002212:	f007 f80f 	bl	8009234 <HAL_RTCEx_SetTimeStamp>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 800221c:	f7ff ff5e 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002220:	bf00      	nop
 8002222:	3740      	adds	r7, #64	; 0x40
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000035c 	.word	0x2000035c
 800222c:	40002800 	.word	0x40002800

08002230 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0a4      	sub	sp, #144	; 0x90
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	2284      	movs	r2, #132	; 0x84
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f008 fd1f 	bl	800ac84 <memset>
  if(rtcHandle->Instance==RTC)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <HAL_RTC_MspInit+0x54>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d114      	bne.n	800227a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002250:	2320      	movs	r3, #32
 8002252:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002258:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4618      	mov	r0, r3
 8002260:	f006 f88a 	bl	8008378 <HAL_RCCEx_PeriphCLKConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800226a:	f7ff ff37 	bl	80020dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RTC_MspInit+0x58>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002272:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_RTC_MspInit+0x58>)
 8002274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002278:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800227a:	bf00      	nop
 800227c:	3790      	adds	r7, #144	; 0x90
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40002800 	.word	0x40002800
 8002288:	40023800 	.word	0x40023800

0800228c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <MX_SPI2_Init+0x74>)
 8002292:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <MX_SPI2_Init+0x78>)
 8002294:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <MX_SPI2_Init+0x74>)
 8002298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800229c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <MX_SPI2_Init+0x74>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <MX_SPI2_Init+0x74>)
 80022a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80022aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <MX_SPI2_Init+0x74>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <MX_SPI2_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <MX_SPI2_Init+0x74>)
 80022ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <MX_SPI2_Init+0x74>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <MX_SPI2_Init+0x74>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <MX_SPI2_Init+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <MX_SPI2_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <MX_SPI2_Init+0x74>)
 80022da:	2207      	movs	r2, #7
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <MX_SPI2_Init+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <MX_SPI2_Init+0x74>)
 80022e6:	2208      	movs	r2, #8
 80022e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <MX_SPI2_Init+0x74>)
 80022ec:	f007 f89b 	bl	8009426 <HAL_SPI_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80022f6:	f7ff fef1 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000037c 	.word	0x2000037c
 8002304:	40003800 	.word	0x40003800

08002308 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a25      	ldr	r2, [pc, #148]	; (80023bc <HAL_SPI_MspInit+0xb4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d144      	bne.n	80023b4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002372:	2303      	movs	r3, #3
 8002374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002382:	2305      	movs	r3, #5
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	480d      	ldr	r0, [pc, #52]	; (80023c4 <HAL_SPI_MspInit+0xbc>)
 800238e:	f003 fe47 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002392:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a4:	2305      	movs	r3, #5
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4619      	mov	r1, r3
 80023ae:	4806      	ldr	r0, [pc, #24]	; (80023c8 <HAL_SPI_MspInit+0xc0>)
 80023b0:	f003 fe36 	bl	8006020 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80023b4:	bf00      	nop
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40003800 	.word	0x40003800
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40020400 	.word	0x40020400

080023cc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	; 0x30
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a51      	ldr	r2, [pc, #324]	; (800251c <I2Cx_MspInit+0x150>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d14d      	bne.n	8002478 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <I2Cx_MspInit+0x154>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	4a4f      	ldr	r2, [pc, #316]	; (8002520 <I2Cx_MspInit+0x154>)
 80023e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e6:	6313      	str	r3, [r2, #48]	; 0x30
 80023e8:	4b4d      	ldr	r3, [pc, #308]	; (8002520 <I2Cx_MspInit+0x154>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023f8:	2312      	movs	r3, #18
 80023fa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002404:	2304      	movs	r3, #4
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	4845      	ldr	r0, [pc, #276]	; (8002524 <I2Cx_MspInit+0x158>)
 8002410:	f003 fe06 	bl	8006020 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800241a:	f107 031c 	add.w	r3, r7, #28
 800241e:	4619      	mov	r1, r3
 8002420:	4840      	ldr	r0, [pc, #256]	; (8002524 <I2Cx_MspInit+0x158>)
 8002422:	f003 fdfd 	bl	8006020 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002426:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <I2Cx_MspInit+0x154>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a3d      	ldr	r2, [pc, #244]	; (8002520 <I2Cx_MspInit+0x154>)
 800242c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <I2Cx_MspInit+0x154>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800243e:	4b38      	ldr	r3, [pc, #224]	; (8002520 <I2Cx_MspInit+0x154>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a37      	ldr	r2, [pc, #220]	; (8002520 <I2Cx_MspInit+0x154>)
 8002444:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002448:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800244a:	4b35      	ldr	r3, [pc, #212]	; (8002520 <I2Cx_MspInit+0x154>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a34      	ldr	r2, [pc, #208]	; (8002520 <I2Cx_MspInit+0x154>)
 8002450:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002454:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	210f      	movs	r1, #15
 800245a:	2048      	movs	r0, #72	; 0x48
 800245c:	f002 ff7c 	bl	8005358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002460:	2048      	movs	r0, #72	; 0x48
 8002462:	f002 ff95 	bl	8005390 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	210f      	movs	r1, #15
 800246a:	2049      	movs	r0, #73	; 0x49
 800246c:	f002 ff74 	bl	8005358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002470:	2049      	movs	r0, #73	; 0x49
 8002472:	f002 ff8d 	bl	8005390 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002476:	e04d      	b.n	8002514 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <I2Cx_MspInit+0x154>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4a28      	ldr	r2, [pc, #160]	; (8002520 <I2Cx_MspInit+0x154>)
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	6313      	str	r3, [r2, #48]	; 0x30
 8002484:	4b26      	ldr	r3, [pc, #152]	; (8002520 <I2Cx_MspInit+0x154>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002494:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002496:	2312      	movs	r3, #18
 8002498:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800249e:	2302      	movs	r3, #2
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80024a2:	2304      	movs	r3, #4
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024a6:	f107 031c 	add.w	r3, r7, #28
 80024aa:	4619      	mov	r1, r3
 80024ac:	481e      	ldr	r0, [pc, #120]	; (8002528 <I2Cx_MspInit+0x15c>)
 80024ae:	f003 fdb7 	bl	8006020 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80024b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024b8:	f107 031c 	add.w	r3, r7, #28
 80024bc:	4619      	mov	r1, r3
 80024be:	481a      	ldr	r0, [pc, #104]	; (8002528 <I2Cx_MspInit+0x15c>)
 80024c0:	f003 fdae 	bl	8006020 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <I2Cx_MspInit+0x154>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	4a15      	ldr	r2, [pc, #84]	; (8002520 <I2Cx_MspInit+0x154>)
 80024ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024ce:	6413      	str	r3, [r2, #64]	; 0x40
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <I2Cx_MspInit+0x154>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <I2Cx_MspInit+0x154>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <I2Cx_MspInit+0x154>)
 80024e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024e6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <I2Cx_MspInit+0x154>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <I2Cx_MspInit+0x154>)
 80024ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024f2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	210f      	movs	r1, #15
 80024f8:	201f      	movs	r0, #31
 80024fa:	f002 ff2d 	bl	8005358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80024fe:	201f      	movs	r0, #31
 8002500:	f002 ff46 	bl	8005390 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	210f      	movs	r1, #15
 8002508:	2020      	movs	r0, #32
 800250a:	f002 ff25 	bl	8005358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800250e:	2020      	movs	r0, #32
 8002510:	f002 ff3e 	bl	8005390 <HAL_NVIC_EnableIRQ>
}
 8002514:	bf00      	nop
 8002516:	3730      	adds	r7, #48	; 0x30
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200003e0 	.word	0x200003e0
 8002520:	40023800 	.word	0x40023800
 8002524:	40021c00 	.word	0x40021c00
 8002528:	40020400 	.word	0x40020400

0800252c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f004 fb4b 	bl	8006bd0 <HAL_I2C_GetState>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d125      	bne.n	800258c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a14      	ldr	r2, [pc, #80]	; (8002594 <I2Cx_Init+0x68>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d103      	bne.n	8002550 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a13      	ldr	r2, [pc, #76]	; (8002598 <I2Cx_Init+0x6c>)
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e002      	b.n	8002556 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a12      	ldr	r2, [pc, #72]	; (800259c <I2Cx_Init+0x70>)
 8002554:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <I2Cx_Init+0x74>)
 800255a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff23 	bl	80023cc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f004 f834 	bl	80065f4 <HAL_I2C_Init>
  }
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200003e0 	.word	0x200003e0
 8002598:	40005c00 	.word	0x40005c00
 800259c:	40005400 	.word	0x40005400
 80025a0:	40912732 	.word	0x40912732

080025a4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af04      	add	r7, sp, #16
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	72fb      	strb	r3, [r7, #11]
 80025b6:	460b      	mov	r3, r1
 80025b8:	813b      	strh	r3, [r7, #8]
 80025ba:	4613      	mov	r3, r2
 80025bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80025c2:	7afb      	ldrb	r3, [r7, #11]
 80025c4:	b299      	uxth	r1, r3
 80025c6:	88f8      	ldrh	r0, [r7, #6]
 80025c8:	893a      	ldrh	r2, [r7, #8]
 80025ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4603      	mov	r3, r0
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f004 f9de 	bl	800699c <HAL_I2C_Mem_Read>
 80025e0:	4603      	mov	r3, r0
 80025e2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d004      	beq.n	80025f4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80025ea:	7afb      	ldrb	r3, [r7, #11]
 80025ec:	4619      	mov	r1, r3
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f832 	bl	8002658 <I2Cx_Error>
  }
  return status;    
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b08a      	sub	sp, #40	; 0x28
 8002602:	af04      	add	r7, sp, #16
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	4608      	mov	r0, r1
 8002608:	4611      	mov	r1, r2
 800260a:	461a      	mov	r2, r3
 800260c:	4603      	mov	r3, r0
 800260e:	72fb      	strb	r3, [r7, #11]
 8002610:	460b      	mov	r3, r1
 8002612:	813b      	strh	r3, [r7, #8]
 8002614:	4613      	mov	r3, r2
 8002616:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800261c:	7afb      	ldrb	r3, [r7, #11]
 800261e:	b299      	uxth	r1, r3
 8002620:	88f8      	ldrh	r0, [r7, #6]
 8002622:	893a      	ldrh	r2, [r7, #8]
 8002624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002628:	9302      	str	r3, [sp, #8]
 800262a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4603      	mov	r3, r0
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f004 f89d 	bl	8006774 <HAL_I2C_Mem_Write>
 800263a:	4603      	mov	r3, r0
 800263c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002644:	7afb      	ldrb	r3, [r7, #11]
 8002646:	4619      	mov	r1, r3
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f805 	bl	8002658 <I2Cx_Error>
  }
  return status;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f004 f855 	bl	8006714 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ff5e 	bl	800252c <I2Cx_Init>
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <TS_IO_Init+0x10>)
 800267e:	f7ff ff55 	bl	800252c <I2Cx_Init>
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200003e0 	.word	0x200003e0

0800268c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af02      	add	r7, sp, #8
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
 8002696:	460b      	mov	r3, r1
 8002698:	71bb      	strb	r3, [r7, #6]
 800269a:	4613      	mov	r3, r2
 800269c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800269e:	79bb      	ldrb	r3, [r7, #6]
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	79f9      	ldrb	r1, [r7, #7]
 80026a4:	2301      	movs	r3, #1
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	1d7b      	adds	r3, r7, #5
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2301      	movs	r3, #1
 80026ae:	4803      	ldr	r0, [pc, #12]	; (80026bc <TS_IO_Write+0x30>)
 80026b0:	f7ff ffa5 	bl	80025fe <I2Cx_WriteMultiple>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200003e0 	.word	0x200003e0

080026c0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	4603      	mov	r3, r0
 80026c8:	460a      	mov	r2, r1
 80026ca:	71fb      	strb	r3, [r7, #7]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80026d4:	79bb      	ldrb	r3, [r7, #6]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	79f9      	ldrb	r1, [r7, #7]
 80026da:	2301      	movs	r3, #1
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	f107 030f 	add.w	r3, r7, #15
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2301      	movs	r3, #1
 80026e6:	4804      	ldr	r0, [pc, #16]	; (80026f8 <TS_IO_Read+0x38>)
 80026e8:	f7ff ff5c 	bl	80025a4 <I2Cx_ReadMultiple>

  return read_value;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200003e0 	.word	0x200003e0

080026fc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f002 f951 	bl	80049ac <HAL_Delay>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <BSP_LCD_Init+0xcc>)
 800271a:	2228      	movs	r2, #40	; 0x28
 800271c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800271e:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <BSP_LCD_Init+0xcc>)
 8002720:	2209      	movs	r2, #9
 8002722:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002724:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <BSP_LCD_Init+0xcc>)
 8002726:	2235      	movs	r2, #53	; 0x35
 8002728:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <BSP_LCD_Init+0xcc>)
 800272c:	220b      	movs	r2, #11
 800272e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <BSP_LCD_Init+0xcc>)
 8002732:	f240 121b 	movw	r2, #283	; 0x11b
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <BSP_LCD_Init+0xcc>)
 800273a:	f240 2215 	movw	r2, #533	; 0x215
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002740:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <BSP_LCD_Init+0xcc>)
 8002742:	f240 121d 	movw	r2, #285	; 0x11d
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <BSP_LCD_Init+0xcc>)
 800274a:	f240 2235 	movw	r2, #565	; 0x235
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002750:	2100      	movs	r1, #0
 8002752:	4823      	ldr	r0, [pc, #140]	; (80027e0 <BSP_LCD_Init+0xcc>)
 8002754:	f000 fe40 	bl	80033d8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002758:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <BSP_LCD_Init+0xcc>)
 800275a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800275e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <BSP_LCD_Init+0xcc>)
 8002762:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002766:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <BSP_LCD_Init+0xcc>)
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <BSP_LCD_Init+0xcc>)
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <BSP_LCD_Init+0xcc>)
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <BSP_LCD_Init+0xcc>)
 8002782:	2200      	movs	r2, #0
 8002784:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <BSP_LCD_Init+0xcc>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800278c:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <BSP_LCD_Init+0xcc>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <BSP_LCD_Init+0xcc>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <BSP_LCD_Init+0xcc>)
 800279a:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <BSP_LCD_Init+0xd0>)
 800279c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800279e:	4810      	ldr	r0, [pc, #64]	; (80027e0 <BSP_LCD_Init+0xcc>)
 80027a0:	f004 ff26 	bl	80075f0 <HAL_LTDC_GetState>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80027aa:	2100      	movs	r1, #0
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <BSP_LCD_Init+0xcc>)
 80027ae:	f000 fd39 	bl	8003224 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80027b2:	480b      	ldr	r0, [pc, #44]	; (80027e0 <BSP_LCD_Init+0xcc>)
 80027b4:	f004 fd4c 	bl	8007250 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80027b8:	2201      	movs	r2, #1
 80027ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027be:	480a      	ldr	r0, [pc, #40]	; (80027e8 <BSP_LCD_Init+0xd4>)
 80027c0:	f003 fefe 	bl	80065c0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80027c4:	2201      	movs	r2, #1
 80027c6:	2108      	movs	r1, #8
 80027c8:	4808      	ldr	r0, [pc, #32]	; (80027ec <BSP_LCD_Init+0xd8>)
 80027ca:	f003 fef9 	bl	80065c0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80027ce:	f000 ff67 	bl	80036a0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80027d2:	4807      	ldr	r0, [pc, #28]	; (80027f0 <BSP_LCD_Init+0xdc>)
 80027d4:	f000 f8d8 	bl	8002988 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000434 	.word	0x20000434
 80027e4:	40016800 	.word	0x40016800
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40022800 	.word	0x40022800
 80027f0:	20000028 	.word	0x20000028

080027f4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <BSP_LCD_GetXSize+0x20>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a06      	ldr	r2, [pc, #24]	; (8002818 <BSP_LCD_GetXSize+0x24>)
 80027fe:	2134      	movs	r1, #52	; 0x34
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	3360      	adds	r3, #96	; 0x60
 8002808:	681b      	ldr	r3, [r3, #0]
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	2000051c 	.word	0x2000051c
 8002818:	20000434 	.word	0x20000434

0800281c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <BSP_LCD_GetYSize+0x20>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a06      	ldr	r2, [pc, #24]	; (8002840 <BSP_LCD_GetYSize+0x24>)
 8002826:	2134      	movs	r1, #52	; 0x34
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3364      	adds	r3, #100	; 0x64
 8002830:	681b      	ldr	r3, [r3, #0]
}
 8002832:	4618      	mov	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	2000051c 	.word	0x2000051c
 8002840:	20000434 	.word	0x20000434

08002844 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002844:	b580      	push	{r7, lr}
 8002846:	b090      	sub	sp, #64	; 0x40
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002854:	f7ff ffce 	bl	80027f4 <BSP_LCD_GetXSize>
 8002858:	4603      	mov	r3, r0
 800285a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002860:	f7ff ffdc 	bl	800281c <BSP_LCD_GetYSize>
 8002864:	4603      	mov	r3, r0
 8002866:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002870:	23ff      	movs	r3, #255	; 0xff
 8002872:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800288a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002890:	2307      	movs	r3, #7
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002894:	f7ff ffae 	bl	80027f4 <BSP_LCD_GetXSize>
 8002898:	4603      	mov	r3, r0
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800289c:	f7ff ffbe 	bl	800281c <BSP_LCD_GetYSize>
 80028a0:	4603      	mov	r3, r0
 80028a2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80028a4:	88fa      	ldrh	r2, [r7, #6]
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	4619      	mov	r1, r3
 80028ac:	4812      	ldr	r0, [pc, #72]	; (80028f8 <BSP_LCD_LayerDefaultInit+0xb4>)
 80028ae:	f004 fe61 	bl	8007574 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	4911      	ldr	r1, [pc, #68]	; (80028fc <BSP_LCD_LayerDefaultInit+0xb8>)
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	3304      	adds	r3, #4
 80028c2:	f04f 32ff 	mov.w	r2, #4294967295
 80028c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	490c      	ldr	r1, [pc, #48]	; (80028fc <BSP_LCD_LayerDefaultInit+0xb8>)
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3308      	adds	r3, #8
 80028d8:	4a09      	ldr	r2, [pc, #36]	; (8002900 <BSP_LCD_LayerDefaultInit+0xbc>)
 80028da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80028dc:	88fa      	ldrh	r2, [r7, #6]
 80028de:	4907      	ldr	r1, [pc, #28]	; (80028fc <BSP_LCD_LayerDefaultInit+0xb8>)
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80028ee:	601a      	str	r2, [r3, #0]
}
 80028f0:	bf00      	nop
 80028f2:	3740      	adds	r7, #64	; 0x40
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000434 	.word	0x20000434
 80028fc:	20000520 	.word	0x20000520
 8002900:	20000028 	.word	0x20000028

08002904 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <BSP_LCD_SelectLayer+0x1c>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6013      	str	r3, [r2, #0]
} 
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	2000051c 	.word	0x2000051c

08002924 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <BSP_LCD_SetTextColor+0x28>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4907      	ldr	r1, [pc, #28]	; (8002950 <BSP_LCD_SetTextColor+0x2c>)
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	601a      	str	r2, [r3, #0]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	2000051c 	.word	0x2000051c
 8002950:	20000520 	.word	0x20000520

08002954 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <BSP_LCD_SetBackColor+0x2c>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4908      	ldr	r1, [pc, #32]	; (8002984 <BSP_LCD_SetBackColor+0x30>)
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3304      	adds	r3, #4
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	601a      	str	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	2000051c 	.word	0x2000051c
 8002984:	20000520 	.word	0x20000520

08002988 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <BSP_LCD_SetFont+0x2c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4908      	ldr	r1, [pc, #32]	; (80029b8 <BSP_LCD_SetFont+0x30>)
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3308      	adds	r3, #8
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	2000051c 	.word	0x2000051c
 80029b8:	20000520 	.word	0x20000520

080029bc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80029bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029be:	b085      	sub	sp, #20
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <BSP_LCD_Clear+0x48>)
 80029c6:	681c      	ldr	r4, [r3, #0]
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <BSP_LCD_Clear+0x48>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <BSP_LCD_Clear+0x4c>)
 80029ce:	2134      	movs	r1, #52	; 0x34
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	335c      	adds	r3, #92	; 0x5c
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461e      	mov	r6, r3
 80029dc:	f7ff ff0a 	bl	80027f4 <BSP_LCD_GetXSize>
 80029e0:	4605      	mov	r5, r0
 80029e2:	f7ff ff1b 	bl	800281c <BSP_LCD_GetYSize>
 80029e6:	4602      	mov	r2, r0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	2300      	movs	r3, #0
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	462a      	mov	r2, r5
 80029f4:	4631      	mov	r1, r6
 80029f6:	4620      	mov	r0, r4
 80029f8:	f000 fdc2 	bl	8003580 <LL_FillBuffer>
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a04:	2000051c 	.word	0x2000051c
 8002a08:	20000434 	.word	0x20000434

08002a0c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002a0c:	b590      	push	{r4, r7, lr}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	80fb      	strh	r3, [r7, #6]
 8002a16:	460b      	mov	r3, r1
 8002a18:	80bb      	strh	r3, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <BSP_LCD_DisplayChar+0x80>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	491b      	ldr	r1, [pc, #108]	; (8002a90 <BSP_LCD_DisplayChar+0x84>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3308      	adds	r3, #8
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <BSP_LCD_DisplayChar+0x80>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4c14      	ldr	r4, [pc, #80]	; (8002a90 <BSP_LCD_DisplayChar+0x84>)
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4423      	add	r3, r4
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a50:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002a54:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <BSP_LCD_DisplayChar+0x80>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4c0d      	ldr	r4, [pc, #52]	; (8002a90 <BSP_LCD_DisplayChar+0x84>)
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4423      	add	r3, r4
 8002a64:	3308      	adds	r3, #8
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	889b      	ldrh	r3, [r3, #4]
 8002a6a:	3307      	adds	r3, #7
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	da00      	bge.n	8002a72 <BSP_LCD_DisplayChar+0x66>
 8002a70:	3307      	adds	r3, #7
 8002a72:	10db      	asrs	r3, r3, #3
 8002a74:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a78:	18ca      	adds	r2, r1, r3
 8002a7a:	88b9      	ldrh	r1, [r7, #4]
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fcc6 	bl	8003410 <DrawChar>
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}
 8002a8c:	2000051c 	.word	0x2000051c
 8002a90:	20000520 	.word	0x20000520

08002a94 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002a94:	b5b0      	push	{r4, r5, r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60ba      	str	r2, [r7, #8]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	81fb      	strh	r3, [r7, #14]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	81bb      	strh	r3, [r7, #12]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	83fb      	strh	r3, [r7, #30]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002abe:	e002      	b.n	8002ac6 <BSP_LCD_DisplayStringAt+0x32>
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	617a      	str	r2, [r7, #20]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f6      	bne.n	8002ac0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002ad2:	f7ff fe8f 	bl	80027f4 <BSP_LCD_GetXSize>
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <BSP_LCD_DisplayStringAt+0x188>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4850      	ldr	r0, [pc, #320]	; (8002c20 <BSP_LCD_DisplayStringAt+0x18c>)
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4403      	add	r3, r0
 8002ae8:	3308      	adds	r3, #8
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	889b      	ldrh	r3, [r3, #4]
 8002aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d01c      	beq.n	8002b34 <BSP_LCD_DisplayStringAt+0xa0>
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	dc33      	bgt.n	8002b66 <BSP_LCD_DisplayStringAt+0xd2>
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d002      	beq.n	8002b08 <BSP_LCD_DisplayStringAt+0x74>
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d019      	beq.n	8002b3a <BSP_LCD_DisplayStringAt+0xa6>
 8002b06:	e02e      	b.n	8002b66 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	1ad1      	subs	r1, r2, r3
 8002b0e:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <BSP_LCD_DisplayStringAt+0x188>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4843      	ldr	r0, [pc, #268]	; (8002c20 <BSP_LCD_DisplayStringAt+0x18c>)
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4403      	add	r3, r0
 8002b1e:	3308      	adds	r3, #8
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	889b      	ldrh	r3, [r3, #4]
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	085b      	lsrs	r3, r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	89fb      	ldrh	r3, [r7, #14]
 8002b2e:	4413      	add	r3, r2
 8002b30:	83fb      	strh	r3, [r7, #30]
      break;
 8002b32:	e01b      	b.n	8002b6c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002b34:	89fb      	ldrh	r3, [r7, #14]
 8002b36:	83fb      	strh	r3, [r7, #30]
      break;
 8002b38:	e018      	b.n	8002b6c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	b299      	uxth	r1, r3
 8002b42:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <BSP_LCD_DisplayStringAt+0x188>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4836      	ldr	r0, [pc, #216]	; (8002c20 <BSP_LCD_DisplayStringAt+0x18c>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4403      	add	r3, r0
 8002b52:	3308      	adds	r3, #8
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	889b      	ldrh	r3, [r3, #4]
 8002b58:	fb11 f303 	smulbb	r3, r1, r3
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	89fb      	ldrh	r3, [r7, #14]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	83fb      	strh	r3, [r7, #30]
      break;
 8002b64:	e002      	b.n	8002b6c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002b66:	89fb      	ldrh	r3, [r7, #14]
 8002b68:	83fb      	strh	r3, [r7, #30]
      break;
 8002b6a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002b6c:	8bfb      	ldrh	r3, [r7, #30]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <BSP_LCD_DisplayStringAt+0xe6>
 8002b72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	da1d      	bge.n	8002bb6 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002b7e:	e01a      	b.n	8002bb6 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	89b9      	ldrh	r1, [r7, #12]
 8002b86:	8bfb      	ldrh	r3, [r7, #30]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff3f 	bl	8002a0c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002b8e:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <BSP_LCD_DisplayStringAt+0x188>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4923      	ldr	r1, [pc, #140]	; (8002c20 <BSP_LCD_DisplayStringAt+0x18c>)
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	889a      	ldrh	r2, [r3, #4]
 8002ba4:	8bfb      	ldrh	r3, [r7, #30]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3301      	adds	r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
    i++;
 8002bb0:	8bbb      	ldrh	r3, [r7, #28]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2dc      	uxtb	r4, r3
 8002bc4:	f7ff fe16 	bl	80027f4 <BSP_LCD_GetXSize>
 8002bc8:	8bb9      	ldrh	r1, [r7, #28]
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <BSP_LCD_DisplayStringAt+0x188>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4d14      	ldr	r5, [pc, #80]	; (8002c20 <BSP_LCD_DisplayStringAt+0x18c>)
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	442b      	add	r3, r5
 8002bda:	3308      	adds	r3, #8
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	889b      	ldrh	r3, [r3, #4]
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	1ac3      	subs	r3, r0, r3
 8002be6:	b299      	uxth	r1, r3
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <BSP_LCD_DisplayStringAt+0x188>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	480c      	ldr	r0, [pc, #48]	; (8002c20 <BSP_LCD_DisplayStringAt+0x18c>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4403      	add	r3, r0
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	889b      	ldrh	r3, [r3, #4]
 8002bfe:	4299      	cmp	r1, r3
 8002c00:	bf2c      	ite	cs
 8002c02:	2301      	movcs	r3, #1
 8002c04:	2300      	movcc	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4023      	ands	r3, r4
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1b7      	bne.n	8002b80 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000051c 	.word	0x2000051c
 8002c20:	20000520 	.word	0x20000520

08002c24 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002c24:	b5b0      	push	{r4, r5, r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	80bb      	strh	r3, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <BSP_LCD_DrawHLine+0xb0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <BSP_LCD_DrawHLine+0xb4>)
 8002c40:	2134      	movs	r1, #52	; 0x34
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3348      	adds	r3, #72	; 0x48
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d114      	bne.n	8002c7a <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002c50:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <BSP_LCD_DrawHLine+0xb0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <BSP_LCD_DrawHLine+0xb4>)
 8002c56:	2134      	movs	r1, #52	; 0x34
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	335c      	adds	r3, #92	; 0x5c
 8002c60:	681c      	ldr	r4, [r3, #0]
 8002c62:	f7ff fdc7 	bl	80027f4 <BSP_LCD_GetXSize>
 8002c66:	4602      	mov	r2, r0
 8002c68:	88bb      	ldrh	r3, [r7, #4]
 8002c6a:	fb03 f202 	mul.w	r2, r3, r2
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	4413      	add	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4423      	add	r3, r4
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e013      	b.n	8002ca2 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002c7a:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <BSP_LCD_DrawHLine+0xb0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <BSP_LCD_DrawHLine+0xb4>)
 8002c80:	2134      	movs	r1, #52	; 0x34
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	335c      	adds	r3, #92	; 0x5c
 8002c8a:	681c      	ldr	r4, [r3, #0]
 8002c8c:	f7ff fdb2 	bl	80027f4 <BSP_LCD_GetXSize>
 8002c90:	4602      	mov	r2, r0
 8002c92:	88bb      	ldrh	r3, [r7, #4]
 8002c94:	fb03 f202 	mul.w	r2, r3, r2
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4423      	add	r3, r4
 8002ca0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <BSP_LCD_DrawHLine+0xb0>)
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	68f9      	ldr	r1, [r7, #12]
 8002ca8:	887c      	ldrh	r4, [r7, #2]
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <BSP_LCD_DrawHLine+0xb0>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4d0b      	ldr	r5, [pc, #44]	; (8002cdc <BSP_LCD_DrawHLine+0xb8>)
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	442b      	add	r3, r5
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	f000 fc5b 	bl	8003580 <LL_FillBuffer>
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	2000051c 	.word	0x2000051c
 8002cd8:	20000434 	.word	0x20000434
 8002cdc:	20000520 	.word	0x20000520

08002ce0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	80fb      	strh	r3, [r7, #6]
 8002cea:	460b      	mov	r3, r1
 8002cec:	80bb      	strh	r3, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	f1c3 0303 	rsb	r3, r3, #3
 8002cfa:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002d04:	e0c7      	b.n	8002e96 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b298      	uxth	r0, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	88ba      	ldrh	r2, [r7, #4]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	b299      	uxth	r1, r3
 8002d1a:	4b64      	ldr	r3, [pc, #400]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4c64      	ldr	r4, [pc, #400]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4423      	add	r3, r4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f000 f8c1 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	b298      	uxth	r0, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	88ba      	ldrh	r2, [r7, #4]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b299      	uxth	r1, r3
 8002d46:	4b59      	ldr	r3, [pc, #356]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4c59      	ldr	r4, [pc, #356]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4423      	add	r3, r4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f000 f8ab 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	4413      	add	r3, r2
 8002d66:	b298      	uxth	r0, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	88ba      	ldrh	r2, [r7, #4]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	b299      	uxth	r1, r3
 8002d72:	4b4e      	ldr	r3, [pc, #312]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4c4e      	ldr	r4, [pc, #312]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4423      	add	r3, r4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f000 f895 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	b298      	uxth	r0, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	88ba      	ldrh	r2, [r7, #4]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b299      	uxth	r1, r3
 8002d9e:	4b43      	ldr	r3, [pc, #268]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4c43      	ldr	r4, [pc, #268]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4423      	add	r3, r4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	f000 f87f 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b298      	uxth	r0, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	88bb      	ldrh	r3, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b299      	uxth	r1, r3
 8002dca:	4b38      	ldr	r3, [pc, #224]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4c38      	ldr	r4, [pc, #224]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4423      	add	r3, r4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f000 f869 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	b298      	uxth	r0, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	88bb      	ldrh	r3, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	b299      	uxth	r1, r3
 8002df6:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4c2d      	ldr	r4, [pc, #180]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4423      	add	r3, r4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f000 f853 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	4413      	add	r3, r2
 8002e16:	b298      	uxth	r0, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	88bb      	ldrh	r3, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b299      	uxth	r1, r3
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4c22      	ldr	r4, [pc, #136]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4423      	add	r3, r4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f000 f83d 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b298      	uxth	r0, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4c17      	ldr	r4, [pc, #92]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4423      	add	r3, r4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f000 f827 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	da06      	bge.n	8002e7a <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	009a      	lsls	r2, r3, #2
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	4413      	add	r3, r2
 8002e74:	3306      	adds	r3, #6
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e00a      	b.n	8002e90 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	009a      	lsls	r2, r3, #2
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	4413      	add	r3, r2
 8002e86:	330a      	adds	r3, #10
 8002e88:	617b      	str	r3, [r7, #20]
      current_y--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	3301      	adds	r3, #1
 8002e94:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	f67f af33 	bls.w	8002d06 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd90      	pop	{r4, r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000051c 	.word	0x2000051c
 8002eb0:	20000520 	.word	0x20000520

08002eb4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	603a      	str	r2, [r7, #0]
 8002ebe:	80fb      	strh	r3, [r7, #6]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <BSP_LCD_DrawPixel+0x88>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <BSP_LCD_DrawPixel+0x8c>)
 8002eca:	2134      	movs	r1, #52	; 0x34
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3348      	adds	r3, #72	; 0x48
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d116      	bne.n	8002f08 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <BSP_LCD_DrawPixel+0x88>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <BSP_LCD_DrawPixel+0x8c>)
 8002ee0:	2134      	movs	r1, #52	; 0x34
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	335c      	adds	r3, #92	; 0x5c
 8002eea:	681c      	ldr	r4, [r3, #0]
 8002eec:	88bd      	ldrh	r5, [r7, #4]
 8002eee:	f7ff fc81 	bl	80027f4 <BSP_LCD_GetXSize>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	fb03 f205 	mul.w	r2, r3, r5
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	4413      	add	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4423      	add	r3, r4
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	b292      	uxth	r2, r2
 8002f04:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002f06:	e015      	b.n	8002f34 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <BSP_LCD_DrawPixel+0x88>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <BSP_LCD_DrawPixel+0x8c>)
 8002f0e:	2134      	movs	r1, #52	; 0x34
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	335c      	adds	r3, #92	; 0x5c
 8002f18:	681c      	ldr	r4, [r3, #0]
 8002f1a:	88bd      	ldrh	r5, [r7, #4]
 8002f1c:	f7ff fc6a 	bl	80027f4 <BSP_LCD_GetXSize>
 8002f20:	4603      	mov	r3, r0
 8002f22:	fb03 f205 	mul.w	r2, r3, r5
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4423      	add	r3, r4
 8002f2e:	461a      	mov	r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3c:	2000051c 	.word	0x2000051c
 8002f40:	20000434 	.word	0x20000434

08002f44 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b08b      	sub	sp, #44	; 0x2c
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	2300      	movs	r3, #0
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	330a      	adds	r3, #10
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	330b      	adds	r3, #11
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	441a      	add	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	441a      	add	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	330d      	adds	r3, #13
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	061b      	lsls	r3, r3, #24
 8002f88:	4413      	add	r3, r2
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3312      	adds	r3, #18
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3313      	adds	r3, #19
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	441a      	add	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3314      	adds	r3, #20
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	441a      	add	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3315      	adds	r3, #21
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	4413      	add	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3316      	adds	r3, #22
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3317      	adds	r3, #23
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3318      	adds	r3, #24
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	441a      	add	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3319      	adds	r3, #25
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	061b      	lsls	r3, r3, #24
 8002fd8:	4413      	add	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	331c      	adds	r3, #28
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	331d      	adds	r3, #29
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	4413      	add	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <BSP_LCD_DrawBitmap+0x15c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <BSP_LCD_DrawBitmap+0x160>)
 8002ff6:	2134      	movs	r1, #52	; 0x34
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	335c      	adds	r3, #92	; 0x5c
 8003000:	681c      	ldr	r4, [r3, #0]
 8003002:	f7ff fbf7 	bl	80027f4 <BSP_LCD_GetXSize>
 8003006:	4602      	mov	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	fb03 f202 	mul.w	r2, r3, r2
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4423      	add	r3, r4
 8003016:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3b20      	subs	r3, #32
 800301c:	2b07      	cmp	r3, #7
 800301e:	d802      	bhi.n	8003026 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]
 8003024:	e008      	b.n	8003038 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	3b10      	subs	r3, #16
 800302a:	2b07      	cmp	r3, #7
 800302c:	d802      	bhi.n	8003034 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 800302e:	2302      	movs	r3, #2
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e001      	b.n	8003038 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003034:	2301      	movs	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	3b01      	subs	r3, #1
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	08d2      	lsrs	r2, r2, #3
 8003046:	fb03 f202 	mul.w	r2, r3, r2
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	4413      	add	r3, r2
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	e018      	b.n	800308c <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 800305a:	6a39      	ldr	r1, [r7, #32]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fad9 	bl	8003618 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003066:	f7ff fbc5 	bl	80027f4 <BSP_LCD_GetXSize>
 800306a:	4603      	mov	r3, r0
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	6a3a      	ldr	r2, [r7, #32]
 8003070:	4413      	add	r3, r2
 8003072:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	08db      	lsrs	r3, r3, #3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	425b      	negs	r3, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	3301      	adds	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
 800308c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	429a      	cmp	r2, r3
 8003092:	d3e2      	bcc.n	800305a <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	372c      	adds	r7, #44	; 0x2c
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000051c 	.word	0x2000051c
 80030a4:	20000434 	.word	0x20000434

080030a8 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
 80030b2:	460b      	mov	r3, r1
 80030b4:	80bb      	strh	r3, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	f1c3 0303 	rsb	r3, r3, #3
 80030c2:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80030cc:	4b44      	ldr	r3, [pc, #272]	; (80031e0 <BSP_LCD_FillCircle+0x138>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4944      	ldr	r1, [pc, #272]	; (80031e4 <BSP_LCD_FillCircle+0x13c>)
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fc20 	bl	8002924 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 80030e4:	e061      	b.n	80031aa <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d021      	beq.n	8003130 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	88fa      	ldrh	r2, [r7, #6]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	b298      	uxth	r0, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	88bb      	ldrh	r3, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	b299      	uxth	r1, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	b29b      	uxth	r3, r3
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	b29b      	uxth	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	f7ff fd8b 	bl	8002c24 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	b29b      	uxth	r3, r3
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	b298      	uxth	r0, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	b29b      	uxth	r3, r3
 800311c:	88ba      	ldrh	r2, [r7, #4]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	b299      	uxth	r1, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	b29b      	uxth	r3, r3
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	f7ff fd7a 	bl	8002c24 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d021      	beq.n	800317a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	b29b      	uxth	r3, r3
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	b298      	uxth	r0, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	b29b      	uxth	r3, r3
 8003144:	88ba      	ldrh	r2, [r7, #4]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	b299      	uxth	r1, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	b29b      	uxth	r3, r3
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	b29b      	uxth	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	f7ff fd66 	bl	8002c24 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	b29b      	uxth	r3, r3
 800315c:	88fa      	ldrh	r2, [r7, #6]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	b298      	uxth	r0, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	b29a      	uxth	r2, r3
 8003166:	88bb      	ldrh	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	b299      	uxth	r1, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	b29b      	uxth	r3, r3
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	f7ff fd55 	bl	8002c24 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	da06      	bge.n	800318e <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	009a      	lsls	r2, r3, #2
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	4413      	add	r3, r2
 8003188:	3306      	adds	r3, #6
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	e00a      	b.n	80031a4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	4413      	add	r3, r2
 800319a:	330a      	adds	r3, #10
 800319c:	617b      	str	r3, [r7, #20]
      current_y--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	3301      	adds	r3, #1
 80031a8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d999      	bls.n	80030e6 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <BSP_LCD_FillCircle+0x138>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	490b      	ldr	r1, [pc, #44]	; (80031e4 <BSP_LCD_FillCircle+0x13c>)
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fbad 	bl	8002924 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80031ca:	887a      	ldrh	r2, [r7, #2]
 80031cc:	88b9      	ldrh	r1, [r7, #4]
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fd85 	bl	8002ce0 <BSP_LCD_DrawCircle>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2000051c 	.word	0x2000051c
 80031e4:	20000520 	.word	0x20000520

080031e8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <BSP_LCD_DisplayOn+0x30>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	4b09      	ldr	r3, [pc, #36]	; (8003218 <BSP_LCD_DisplayOn+0x30>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80031fc:	2201      	movs	r2, #1
 80031fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003202:	4806      	ldr	r0, [pc, #24]	; (800321c <BSP_LCD_DisplayOn+0x34>)
 8003204:	f003 f9dc 	bl	80065c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003208:	2201      	movs	r2, #1
 800320a:	2108      	movs	r1, #8
 800320c:	4804      	ldr	r0, [pc, #16]	; (8003220 <BSP_LCD_DisplayOn+0x38>)
 800320e:	f003 f9d7 	bl	80065c0 <HAL_GPIO_WritePin>
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000434 	.word	0x20000434
 800321c:	40022000 	.word	0x40022000
 8003220:	40022800 	.word	0x40022800

08003224 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b090      	sub	sp, #64	; 0x40
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800322e:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	4a63      	ldr	r2, [pc, #396]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003234:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003238:	6453      	str	r3, [r2, #68]	; 0x44
 800323a:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003246:	4b5e      	ldr	r3, [pc, #376]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a5d      	ldr	r2, [pc, #372]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 800324c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800325e:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003264:	f043 0310 	orr.w	r3, r3, #16
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	623b      	str	r3, [r7, #32]
 8003274:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003276:	4b52      	ldr	r3, [pc, #328]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a51      	ldr	r2, [pc, #324]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 800327c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800328e:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a4b      	ldr	r2, [pc, #300]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	61bb      	str	r3, [r7, #24]
 80032a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80032a6:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a45      	ldr	r2, [pc, #276]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80032be:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a3f      	ldr	r2, [pc, #252]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4a39      	ldr	r2, [pc, #228]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80032ee:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a33      	ldr	r2, [pc, #204]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <BSP_LCD_MspInit+0x19c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003306:	2310      	movs	r3, #16
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800330a:	2302      	movs	r3, #2
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003312:	2302      	movs	r3, #2
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003316:	230e      	movs	r3, #14
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800331a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800331e:	4619      	mov	r1, r3
 8003320:	4828      	ldr	r0, [pc, #160]	; (80033c4 <BSP_LCD_MspInit+0x1a0>)
 8003322:	f002 fe7d 	bl	8006020 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003330:	2309      	movs	r3, #9
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003338:	4619      	mov	r1, r3
 800333a:	4823      	ldr	r0, [pc, #140]	; (80033c8 <BSP_LCD_MspInit+0x1a4>)
 800333c:	f002 fe70 	bl	8006020 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003340:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800334a:	230e      	movs	r3, #14
 800334c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800334e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003352:	4619      	mov	r1, r3
 8003354:	481d      	ldr	r0, [pc, #116]	; (80033cc <BSP_LCD_MspInit+0x1a8>)
 8003356:	f002 fe63 	bl	8006020 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800335a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003364:	230e      	movs	r3, #14
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800336c:	4619      	mov	r1, r3
 800336e:	4818      	ldr	r0, [pc, #96]	; (80033d0 <BSP_LCD_MspInit+0x1ac>)
 8003370:	f002 fe56 	bl	8006020 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003374:	23f7      	movs	r3, #247	; 0xf7
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800337c:	230e      	movs	r3, #14
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003384:	4619      	mov	r1, r3
 8003386:	4813      	ldr	r0, [pc, #76]	; (80033d4 <BSP_LCD_MspInit+0x1b0>)
 8003388:	f002 fe4a 	bl	8006020 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800338c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003392:	2301      	movs	r3, #1
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800339a:	4619      	mov	r1, r3
 800339c:	480b      	ldr	r0, [pc, #44]	; (80033cc <BSP_LCD_MspInit+0x1a8>)
 800339e:	f002 fe3f 	bl	8006020 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80033a2:	2308      	movs	r3, #8
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80033a6:	2301      	movs	r3, #1
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80033aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ae:	4619      	mov	r1, r3
 80033b0:	4808      	ldr	r0, [pc, #32]	; (80033d4 <BSP_LCD_MspInit+0x1b0>)
 80033b2:	f002 fe35 	bl	8006020 <HAL_GPIO_Init>
}
 80033b6:	bf00      	nop
 80033b8:	3740      	adds	r7, #64	; 0x40
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40021800 	.word	0x40021800
 80033cc:	40022000 	.word	0x40022000
 80033d0:	40022400 	.word	0x40022400
 80033d4:	40022800 	.word	0x40022800

080033d8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <BSP_LCD_ClockConfig+0x34>)
 80033e4:	2208      	movs	r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80033e8:	4b08      	ldr	r3, [pc, #32]	; (800340c <BSP_LCD_ClockConfig+0x34>)
 80033ea:	22c0      	movs	r2, #192	; 0xc0
 80033ec:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <BSP_LCD_ClockConfig+0x34>)
 80033f0:	2205      	movs	r2, #5
 80033f2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <BSP_LCD_ClockConfig+0x34>)
 80033f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80033fc:	4803      	ldr	r0, [pc, #12]	; (800340c <BSP_LCD_ClockConfig+0x34>)
 80033fe:	f004 ffbb 	bl	8008378 <HAL_RCCEx_PeriphCLKConfig>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000538 	.word	0x20000538

08003410 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	603a      	str	r2, [r7, #0]
 800341a:	80fb      	strh	r3, [r7, #6]
 800341c:	460b      	mov	r3, r1
 800341e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <DrawChar+0x168>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4953      	ldr	r1, [pc, #332]	; (800357c <DrawChar+0x16c>)
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3308      	adds	r3, #8
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	88db      	ldrh	r3, [r3, #6]
 800343e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003440:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <DrawChar+0x168>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <DrawChar+0x16c>)
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3308      	adds	r3, #8
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	889b      	ldrh	r3, [r3, #4]
 8003456:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003458:	8a3b      	ldrh	r3, [r7, #16]
 800345a:	3307      	adds	r3, #7
 800345c:	2b00      	cmp	r3, #0
 800345e:	da00      	bge.n	8003462 <DrawChar+0x52>
 8003460:	3307      	adds	r3, #7
 8003462:	10db      	asrs	r3, r3, #3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	b2da      	uxtb	r2, r3
 800346a:	8a3b      	ldrh	r3, [r7, #16]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e076      	b.n	8003566 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003478:	8a3b      	ldrh	r3, [r7, #16]
 800347a:	3307      	adds	r3, #7
 800347c:	2b00      	cmp	r3, #0
 800347e:	da00      	bge.n	8003482 <DrawChar+0x72>
 8003480:	3307      	adds	r3, #7
 8003482:	10db      	asrs	r3, r3, #3
 8003484:	461a      	mov	r2, r3
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	4413      	add	r3, r2
 8003490:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003492:	8a3b      	ldrh	r3, [r7, #16]
 8003494:	3307      	adds	r3, #7
 8003496:	2b00      	cmp	r3, #0
 8003498:	da00      	bge.n	800349c <DrawChar+0x8c>
 800349a:	3307      	adds	r3, #7
 800349c:	10db      	asrs	r3, r3, #3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d002      	beq.n	80034a8 <DrawChar+0x98>
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d004      	beq.n	80034b0 <DrawChar+0xa0>
 80034a6:	e00c      	b.n	80034c2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	617b      	str	r3, [r7, #20]
      break;
 80034ae:	e016      	b.n	80034de <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	3201      	adds	r2, #1
 80034ba:	7812      	ldrb	r2, [r2, #0]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
      break;
 80034c0:	e00d      	b.n	80034de <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	041a      	lsls	r2, r3, #16
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	3301      	adds	r3, #1
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	4313      	orrs	r3, r2
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	3202      	adds	r2, #2
 80034d6:	7812      	ldrb	r2, [r2, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
      break;
 80034dc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	e036      	b.n	8003552 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80034e4:	8a3a      	ldrh	r2, [r7, #16]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	1ad2      	subs	r2, r2, r3
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	4413      	add	r3, r2
 80034ee:	3b01      	subs	r3, #1
 80034f0:	2201      	movs	r2, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d012      	beq.n	8003526 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	b29a      	uxth	r2, r3
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	4413      	add	r3, r2
 8003508:	b298      	uxth	r0, r3
 800350a:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <DrawChar+0x168>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	491b      	ldr	r1, [pc, #108]	; (800357c <DrawChar+0x16c>)
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	88bb      	ldrh	r3, [r7, #4]
 800351e:	4619      	mov	r1, r3
 8003520:	f7ff fcc8 	bl	8002eb4 <BSP_LCD_DrawPixel>
 8003524:	e012      	b.n	800354c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	b29a      	uxth	r2, r3
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	4413      	add	r3, r2
 800352e:	b298      	uxth	r0, r3
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <DrawChar+0x168>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4911      	ldr	r1, [pc, #68]	; (800357c <DrawChar+0x16c>)
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3304      	adds	r3, #4
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	88bb      	ldrh	r3, [r7, #4]
 8003546:	4619      	mov	r1, r3
 8003548:	f7ff fcb4 	bl	8002eb4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	3301      	adds	r3, #1
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	8a3b      	ldrh	r3, [r7, #16]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	429a      	cmp	r2, r3
 8003558:	d3c4      	bcc.n	80034e4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800355a:	88bb      	ldrh	r3, [r7, #4]
 800355c:	3301      	adds	r3, #1
 800355e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3301      	adds	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	8a7b      	ldrh	r3, [r7, #18]
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	429a      	cmp	r2, r3
 800356c:	d384      	bcc.n	8003478 <DrawChar+0x68>
  }
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	2000051c 	.word	0x2000051c
 800357c:	20000520 	.word	0x20000520

08003580 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <LL_FillBuffer+0x88>)
 8003590:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003594:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003596:	4b1d      	ldr	r3, [pc, #116]	; (800360c <LL_FillBuffer+0x8c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <LL_FillBuffer+0x90>)
 800359c:	2134      	movs	r1, #52	; 0x34
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3348      	adds	r3, #72	; 0x48
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d103      	bne.n	80035b4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80035ac:	4b16      	ldr	r3, [pc, #88]	; (8003608 <LL_FillBuffer+0x88>)
 80035ae:	2202      	movs	r2, #2
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	e002      	b.n	80035ba <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80035b4:	4b14      	ldr	r3, [pc, #80]	; (8003608 <LL_FillBuffer+0x88>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80035ba:	4a13      	ldr	r2, [pc, #76]	; (8003608 <LL_FillBuffer+0x88>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <LL_FillBuffer+0x88>)
 80035c2:	4a14      	ldr	r2, [pc, #80]	; (8003614 <LL_FillBuffer+0x94>)
 80035c4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80035c6:	4810      	ldr	r0, [pc, #64]	; (8003608 <LL_FillBuffer+0x88>)
 80035c8:	f002 f98e 	bl	80058e8 <HAL_DMA2D_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d115      	bne.n	80035fe <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	480c      	ldr	r0, [pc, #48]	; (8003608 <LL_FillBuffer+0x88>)
 80035d6:	f002 fbf5 	bl	8005dc4 <HAL_DMA2D_ConfigLayer>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10e      	bne.n	80035fe <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69f9      	ldr	r1, [r7, #28]
 80035ea:	4807      	ldr	r0, [pc, #28]	; (8003608 <LL_FillBuffer+0x88>)
 80035ec:	f002 f9c6 	bl	800597c <HAL_DMA2D_Start>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80035f6:	210a      	movs	r1, #10
 80035f8:	4803      	ldr	r0, [pc, #12]	; (8003608 <LL_FillBuffer+0x88>)
 80035fa:	f002 f9ea 	bl	80059d2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200004dc 	.word	0x200004dc
 800360c:	2000051c 	.word	0x2000051c
 8003610:	20000434 	.word	0x20000434
 8003614:	4002b000 	.word	0x4002b000

08003618 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 8003628:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800362c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003634:	4b18      	ldr	r3, [pc, #96]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800363a:	4b17      	ldr	r3, [pc, #92]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 8003642:	22ff      	movs	r2, #255	; 0xff
 8003644:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003646:	4a14      	ldr	r2, [pc, #80]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 800364e:	2200      	movs	r2, #0
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 8003654:	4a11      	ldr	r2, [pc, #68]	; (800369c <LL_ConvertLineToARGB8888+0x84>)
 8003656:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003658:	480f      	ldr	r0, [pc, #60]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 800365a:	f002 f945 	bl	80058e8 <HAL_DMA2D_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d115      	bne.n	8003690 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003664:	2101      	movs	r1, #1
 8003666:	480c      	ldr	r0, [pc, #48]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 8003668:	f002 fbac 	bl	8005dc4 <HAL_DMA2D_ConfigLayer>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10e      	bne.n	8003690 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003672:	68f9      	ldr	r1, [r7, #12]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	2301      	movs	r3, #1
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4806      	ldr	r0, [pc, #24]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 800367e:	f002 f97d 	bl	800597c <HAL_DMA2D_Start>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003688:	210a      	movs	r1, #10
 800368a:	4803      	ldr	r0, [pc, #12]	; (8003698 <LL_ConvertLineToARGB8888+0x80>)
 800368c:	f002 f9a1 	bl	80059d2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	200004dc 	.word	0x200004dc
 800369c:	4002b000 	.word	0x4002b000

080036a0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036a6:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <BSP_SDRAM_Init+0xb0>)
 80036a8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80036aa:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036ac:	2202      	movs	r2, #2
 80036ae:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80036b0:	4b28      	ldr	r3, [pc, #160]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036b2:	2207      	movs	r2, #7
 80036b4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036b8:	2204      	movs	r2, #4
 80036ba:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80036bc:	4b25      	ldr	r3, [pc, #148]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036be:	2207      	movs	r2, #7
 80036c0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036c4:	2202      	movs	r2, #2
 80036c6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80036c8:	4b22      	ldr	r3, [pc, #136]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036ca:	2202      	movs	r2, #2
 80036cc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 80036d0:	2202      	movs	r2, #2
 80036d2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80036e0:	4b1a      	ldr	r3, [pc, #104]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036e2:	2204      	movs	r2, #4
 80036e4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036e8:	2210      	movs	r2, #16
 80036ea:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80036ec:	4b17      	ldr	r3, [pc, #92]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036ee:	2240      	movs	r2, #64	; 0x40
 80036f0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036f8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <BSP_SDRAM_Init+0xac>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <BSP_SDRAM_Init+0xac>)
 8003702:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003706:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <BSP_SDRAM_Init+0xac>)
 800370a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800370e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <BSP_SDRAM_Init+0xac>)
 8003712:	2200      	movs	r2, #0
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003716:	2100      	movs	r1, #0
 8003718:	480c      	ldr	r0, [pc, #48]	; (800374c <BSP_SDRAM_Init+0xac>)
 800371a:	f000 f87f 	bl	800381c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800371e:	490d      	ldr	r1, [pc, #52]	; (8003754 <BSP_SDRAM_Init+0xb4>)
 8003720:	480a      	ldr	r0, [pc, #40]	; (800374c <BSP_SDRAM_Init+0xac>)
 8003722:	f005 fdef 	bl	8009304 <HAL_SDRAM_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <BSP_SDRAM_Init+0xb8>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e002      	b.n	800373a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <BSP_SDRAM_Init+0xb8>)
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800373a:	f240 6003 	movw	r0, #1539	; 0x603
 800373e:	f000 f80d 	bl	800375c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <BSP_SDRAM_Init+0xb8>)
 8003744:	781b      	ldrb	r3, [r3, #0]
}
 8003746:	4618      	mov	r0, r3
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200005bc 	.word	0x200005bc
 8003750:	a0000140 	.word	0xa0000140
 8003754:	200005f0 	.word	0x200005f0
 8003758:	20000038 	.word	0x20000038

0800375c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800376a:	2201      	movs	r2, #1
 800376c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800376e:	4b29      	ldr	r3, [pc, #164]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003770:	2210      	movs	r2, #16
 8003772:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003776:	2201      	movs	r2, #1
 8003778:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800377c:	2200      	movs	r2, #0
 800377e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003784:	4923      	ldr	r1, [pc, #140]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003786:	4824      	ldr	r0, [pc, #144]	; (8003818 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003788:	f005 fdf0 	bl	800936c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800378c:	2001      	movs	r0, #1
 800378e:	f001 f90d 	bl	80049ac <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003794:	2202      	movs	r2, #2
 8003796:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003798:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800379a:	2210      	movs	r2, #16
 800379c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80037aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ae:	4919      	ldr	r1, [pc, #100]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b0:	4819      	ldr	r0, [pc, #100]	; (8003818 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037b2:	f005 fddb 	bl	800936c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b8:	2203      	movs	r2, #3
 80037ba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037be:	2210      	movs	r2, #16
 80037c0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c4:	2208      	movs	r2, #8
 80037c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80037ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037d2:	4910      	ldr	r1, [pc, #64]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037d4:	4810      	ldr	r0, [pc, #64]	; (8003818 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037d6:	f005 fdc9 	bl	800936c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80037da:	f44f 7308 	mov.w	r3, #544	; 0x220
 80037de:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e2:	2204      	movs	r2, #4
 80037e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e8:	2210      	movs	r2, #16
 80037ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a07      	ldr	r2, [pc, #28]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037f6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80037f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037fc:	4905      	ldr	r1, [pc, #20]	; (8003814 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037fe:	4806      	ldr	r0, [pc, #24]	; (8003818 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003800:	f005 fdb4 	bl	800936c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4804      	ldr	r0, [pc, #16]	; (8003818 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003808:	f005 fde5 	bl	80093d6 <HAL_SDRAM_ProgramRefreshRate>
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	2000060c 	.word	0x2000060c
 8003818:	200005bc 	.word	0x200005bc

0800381c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800381c:	b580      	push	{r7, lr}
 800381e:	b090      	sub	sp, #64	; 0x40
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003826:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	4a6f      	ldr	r2, [pc, #444]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6393      	str	r3, [r2, #56]	; 0x38
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800383e:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a69      	ldr	r2, [pc, #420]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003856:	4b64      	ldr	r3, [pc, #400]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800386e:	4b5e      	ldr	r3, [pc, #376]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a5d      	ldr	r2, [pc, #372]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003874:	f043 0308 	orr.w	r3, r3, #8
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003886:	4b58      	ldr	r3, [pc, #352]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a57      	ldr	r2, [pc, #348]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 800388c:	f043 0310 	orr.w	r3, r3, #16
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b55      	ldr	r3, [pc, #340]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800389e:	4b52      	ldr	r3, [pc, #328]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038a4:	f043 0320 	orr.w	r3, r3, #32
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b4f      	ldr	r3, [pc, #316]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4a4b      	ldr	r2, [pc, #300]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c0:	6313      	str	r3, [r2, #48]	; 0x30
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038ce:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	4a45      	ldr	r2, [pc, #276]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30
 80038da:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <BSP_SDRAM_MspInit+0x1cc>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80038ea:	2301      	movs	r3, #1
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80038ee:	2302      	movs	r3, #2
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80038f2:	230c      	movs	r3, #12
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80038f6:	2308      	movs	r3, #8
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80038fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038fe:	4619      	mov	r1, r3
 8003900:	483a      	ldr	r0, [pc, #232]	; (80039ec <BSP_SDRAM_MspInit+0x1d0>)
 8003902:	f002 fb8d 	bl	8006020 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003906:	f24c 7303 	movw	r3, #50947	; 0xc703
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800390c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003910:	4619      	mov	r1, r3
 8003912:	4837      	ldr	r0, [pc, #220]	; (80039f0 <BSP_SDRAM_MspInit+0x1d4>)
 8003914:	f002 fb84 	bl	8006020 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003918:	f64f 7383 	movw	r3, #65411	; 0xff83
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800391e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003922:	4619      	mov	r1, r3
 8003924:	4833      	ldr	r0, [pc, #204]	; (80039f4 <BSP_SDRAM_MspInit+0x1d8>)
 8003926:	f002 fb7b 	bl	8006020 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800392a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003934:	4619      	mov	r1, r3
 8003936:	4830      	ldr	r0, [pc, #192]	; (80039f8 <BSP_SDRAM_MspInit+0x1dc>)
 8003938:	f002 fb72 	bl	8006020 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800393c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003946:	4619      	mov	r1, r3
 8003948:	482c      	ldr	r0, [pc, #176]	; (80039fc <BSP_SDRAM_MspInit+0x1e0>)
 800394a:	f002 fb69 	bl	8006020 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800394e:	2328      	movs	r3, #40	; 0x28
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003956:	4619      	mov	r1, r3
 8003958:	4829      	ldr	r0, [pc, #164]	; (8003a00 <BSP_SDRAM_MspInit+0x1e4>)
 800395a:	f002 fb61 	bl	8006020 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800395e:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 8003960:	2200      	movs	r2, #0
 8003962:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 800396c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003970:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 8003974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003978:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 800397c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003980:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 8003984:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003988:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800398a:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 800398c:	2200      	movs	r2, #0
 800398e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003990:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 8003992:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003996:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 800399a:	2200      	movs	r2, #0
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039a0:	2203      	movs	r2, #3
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80039a4:	4b17      	ldr	r3, [pc, #92]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039b2:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <BSP_SDRAM_MspInit+0x1ec>)
 80039b4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
 80039bc:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80039c2:	4810      	ldr	r0, [pc, #64]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039c4:	f001 fe80 	bl	80056c8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80039c8:	480e      	ldr	r0, [pc, #56]	; (8003a04 <BSP_SDRAM_MspInit+0x1e8>)
 80039ca:	f001 fdcf 	bl	800556c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80039ce:	2200      	movs	r2, #0
 80039d0:	210f      	movs	r1, #15
 80039d2:	2038      	movs	r0, #56	; 0x38
 80039d4:	f001 fcc0 	bl	8005358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80039d8:	2038      	movs	r0, #56	; 0x38
 80039da:	f001 fcd9 	bl	8005390 <HAL_NVIC_EnableIRQ>
}
 80039de:	bf00      	nop
 80039e0:	3740      	adds	r7, #64	; 0x40
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40021400 	.word	0x40021400
 80039fc:	40021800 	.word	0x40021800
 8003a00:	40021c00 	.word	0x40021c00
 8003a04:	2000061c 	.word	0x2000061c
 8003a08:	40026410 	.word	0x40026410

08003a0c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	460a      	mov	r2, r1
 8003a16:	80fb      	strh	r3, [r7, #6]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <BSP_TS_Init+0x68>)
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003a26:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <BSP_TS_Init+0x6c>)
 8003a28:	88bb      	ldrh	r3, [r7, #4]
 8003a2a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003a2c:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <BSP_TS_Init+0x70>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2070      	movs	r0, #112	; 0x70
 8003a32:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <BSP_TS_Init+0x70>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2070      	movs	r0, #112	; 0x70
 8003a3a:	4798      	blx	r3
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b51      	cmp	r3, #81	; 0x51
 8003a40:	d111      	bne.n	8003a66 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <BSP_TS_Init+0x74>)
 8003a44:	4a0d      	ldr	r2, [pc, #52]	; (8003a7c <BSP_TS_Init+0x70>)
 8003a46:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <BSP_TS_Init+0x78>)
 8003a4a:	2270      	movs	r2, #112	; 0x70
 8003a4c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <BSP_TS_Init+0x7c>)
 8003a50:	2208      	movs	r2, #8
 8003a52:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <BSP_TS_Init+0x74>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <BSP_TS_Init+0x78>)
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	b292      	uxth	r2, r2
 8003a60:	4610      	mov	r0, r2
 8003a62:	4798      	blx	r3
 8003a64:	e001      	b.n	8003a6a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003a66:	2303      	movs	r3, #3
 8003a68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000680 	.word	0x20000680
 8003a78:	20000682 	.word	0x20000682
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	2000067c 	.word	0x2000067c
 8003a84:	20000685 	.word	0x20000685
 8003a88:	20000684 	.word	0x20000684

08003a8c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003a8c:	b590      	push	{r4, r7, lr}
 8003a8e:	b097      	sub	sp, #92	; 0x5c
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003aa6:	4bb4      	ldr	r3, [pc, #720]	; (8003d78 <BSP_TS_GetState+0x2ec>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	4ab3      	ldr	r2, [pc, #716]	; (8003d7c <BSP_TS_GetState+0x2f0>)
 8003aae:	7812      	ldrb	r2, [r2, #0]
 8003ab0:	b292      	uxth	r2, r2
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4798      	blx	r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8196 	beq.w	8003df4 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003acc:	e185      	b.n	8003dda <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003ace:	4baa      	ldr	r3, [pc, #680]	; (8003d78 <BSP_TS_GetState+0x2ec>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	4aa9      	ldr	r2, [pc, #676]	; (8003d7c <BSP_TS_GetState+0x2f0>)
 8003ad6:	7812      	ldrb	r2, [r2, #0]
 8003ad8:	b290      	uxth	r0, r2
 8003ada:	f107 0120 	add.w	r1, r7, #32
 8003ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ae0:	0052      	lsls	r2, r2, #1
 8003ae2:	188c      	adds	r4, r1, r2
 8003ae4:	f107 0114 	add.w	r1, r7, #20
 8003ae8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aea:	0052      	lsls	r2, r2, #1
 8003aec:	440a      	add	r2, r1
 8003aee:	4621      	mov	r1, r4
 8003af0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003af2:	4ba3      	ldr	r3, [pc, #652]	; (8003d80 <BSP_TS_GetState+0x2f4>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d117      	bne.n	8003b2a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8003afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	3350      	adds	r3, #80	; 0x50
 8003b00:	443b      	add	r3, r7
 8003b02:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	3350      	adds	r3, #80	; 0x50
 8003b0c:	443b      	add	r3, r7
 8003b0e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	3350      	adds	r3, #80	; 0x50
 8003b18:	443b      	add	r3, r7
 8003b1a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	3350      	adds	r3, #80	; 0x50
 8003b24:	443b      	add	r3, r7
 8003b26:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003b2a:	4b95      	ldr	r3, [pc, #596]	; (8003d80 <BSP_TS_GetState+0x2f4>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8003b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	3350      	adds	r3, #80	; 0x50
 8003b3c:	443b      	add	r3, r7
 8003b3e:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003b42:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	3350      	adds	r3, #80	; 0x50
 8003b4e:	443b      	add	r3, r7
 8003b50:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003b54:	4b8a      	ldr	r3, [pc, #552]	; (8003d80 <BSP_TS_GetState+0x2f4>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00e      	beq.n	8003b7e <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8003b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	3350      	adds	r3, #80	; 0x50
 8003b66:	443b      	add	r3, r7
 8003b68:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003b6c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	3350      	adds	r3, #80	; 0x50
 8003b78:	443b      	add	r3, r7
 8003b7a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003b7e:	4b80      	ldr	r3, [pc, #512]	; (8003d80 <BSP_TS_GetState+0x2f4>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d017      	beq.n	8003bba <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	3350      	adds	r3, #80	; 0x50
 8003b90:	443b      	add	r3, r7
 8003b92:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	3350      	adds	r3, #80	; 0x50
 8003b9c:	443b      	add	r3, r7
 8003b9e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	3350      	adds	r3, #80	; 0x50
 8003ba8:	443b      	add	r3, r7
 8003baa:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	3350      	adds	r3, #80	; 0x50
 8003bb4:	443b      	add	r3, r7
 8003bb6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	3350      	adds	r3, #80	; 0x50
 8003bc0:	443b      	add	r3, r7
 8003bc2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4a6e      	ldr	r2, [pc, #440]	; (8003d84 <BSP_TS_GetState+0x2f8>)
 8003bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	4299      	cmp	r1, r3
 8003bd2:	d90d      	bls.n	8003bf0 <BSP_TS_GetState+0x164>
 8003bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	3350      	adds	r3, #80	; 0x50
 8003bda:	443b      	add	r3, r7
 8003bdc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003be0:	4968      	ldr	r1, [pc, #416]	; (8003d84 <BSP_TS_GetState+0x2f8>)
 8003be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	e00c      	b.n	8003c0a <BSP_TS_GetState+0x17e>
 8003bf0:	4a64      	ldr	r2, [pc, #400]	; (8003d84 <BSP_TS_GetState+0x2f8>)
 8003bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	3350      	adds	r3, #80	; 0x50
 8003c00:	443b      	add	r3, r7
 8003c02:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	3350      	adds	r3, #80	; 0x50
 8003c14:	443b      	add	r3, r7
 8003c16:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4a5a      	ldr	r2, [pc, #360]	; (8003d88 <BSP_TS_GetState+0x2fc>)
 8003c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c24:	4299      	cmp	r1, r3
 8003c26:	d90d      	bls.n	8003c44 <BSP_TS_GetState+0x1b8>
 8003c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	3350      	adds	r3, #80	; 0x50
 8003c2e:	443b      	add	r3, r7
 8003c30:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003c34:	4954      	ldr	r1, [pc, #336]	; (8003d88 <BSP_TS_GetState+0x2fc>)
 8003c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	e00c      	b.n	8003c5e <BSP_TS_GetState+0x1d2>
 8003c44:	4a50      	ldr	r2, [pc, #320]	; (8003d88 <BSP_TS_GetState+0x2fc>)
 8003c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	3350      	adds	r3, #80	; 0x50
 8003c54:	443b      	add	r3, r7
 8003c56:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003c62:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003c66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c6a:	4413      	add	r3, r2
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	dd15      	ble.n	8003c9c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8003c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	3350      	adds	r3, #80	; 0x50
 8003c76:	443b      	add	r3, r7
 8003c78:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4a41      	ldr	r2, [pc, #260]	; (8003d84 <BSP_TS_GetState+0x2f8>)
 8003c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	3350      	adds	r3, #80	; 0x50
 8003c8c:	443b      	add	r3, r7
 8003c8e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003c92:	4619      	mov	r1, r3
 8003c94:	4a3c      	ldr	r2, [pc, #240]	; (8003d88 <BSP_TS_GetState+0x2fc>)
 8003c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003c9c:	4b37      	ldr	r3, [pc, #220]	; (8003d7c <BSP_TS_GetState+0x2f0>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b70      	cmp	r3, #112	; 0x70
 8003ca2:	d119      	bne.n	8003cd8 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8003ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	3350      	adds	r3, #80	; 0x50
 8003caa:	443b      	add	r3, r7
 8003cac:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	460a      	mov	r2, r1
 8003cba:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	3350      	adds	r3, #80	; 0x50
 8003cc2:	443b      	add	r3, r7
 8003cc4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ccc:	3304      	adds	r3, #4
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	809a      	strh	r2, [r3, #4]
 8003cd6:	e022      	b.n	8003d1e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003cd8:	4b2c      	ldr	r3, [pc, #176]	; (8003d8c <BSP_TS_GetState+0x300>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4a29      	ldr	r2, [pc, #164]	; (8003d84 <BSP_TS_GetState+0x2f8>)
 8003ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	0b1b      	lsrs	r3, r3, #12
 8003cec:	b299      	uxth	r1, r3
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	460a      	mov	r2, r1
 8003cf8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003cfa:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <BSP_TS_GetState+0x304>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <BSP_TS_GetState+0x2fc>)
 8003d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	0b1b      	lsrs	r3, r3, #12
 8003d0e:	b299      	uxth	r1, r3
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d14:	3304      	adds	r3, #4
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003d1e:	4b17      	ldr	r3, [pc, #92]	; (8003d7c <BSP_TS_GetState+0x2f0>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	b298      	uxth	r0, r3
 8003d24:	f107 010c 	add.w	r1, r7, #12
 8003d28:	f107 0210 	add.w	r2, r7, #16
 8003d2c:	f107 0308 	add.w	r3, r7, #8
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	460b      	mov	r3, r1
 8003d34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003d36:	f7fd f8d1 	bl	8000edc <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	b2d9      	uxtb	r1, r3
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d42:	4413      	add	r3, r2
 8003d44:	3316      	adds	r3, #22
 8003d46:	460a      	mov	r2, r1
 8003d48:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	b2d9      	uxtb	r1, r3
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d52:	4413      	add	r3, r2
 8003d54:	3320      	adds	r3, #32
 8003d56:	460a      	mov	r2, r1
 8003d58:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d835      	bhi.n	8003dcc <BSP_TS_GetState+0x340>
 8003d60:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <BSP_TS_GetState+0x2dc>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d95 	.word	0x08003d95
 8003d6c:	08003da3 	.word	0x08003da3
 8003d70:	08003db1 	.word	0x08003db1
 8003d74:	08003dbf 	.word	0x08003dbf
 8003d78:	2000067c 	.word	0x2000067c
 8003d7c:	20000685 	.word	0x20000685
 8003d80:	20000684 	.word	0x20000684
 8003d84:	20000688 	.word	0x20000688
 8003d88:	2000069c 	.word	0x2000069c
 8003d8c:	20000680 	.word	0x20000680
 8003d90:	20000682 	.word	0x20000682
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d98:	4413      	add	r3, r2
 8003d9a:	331b      	adds	r3, #27
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	701a      	strb	r2, [r3, #0]
          break;
 8003da0:	e018      	b.n	8003dd4 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da6:	4413      	add	r3, r2
 8003da8:	331b      	adds	r3, #27
 8003daa:	2202      	movs	r2, #2
 8003dac:	701a      	strb	r2, [r3, #0]
          break;
 8003dae:	e011      	b.n	8003dd4 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db4:	4413      	add	r3, r2
 8003db6:	331b      	adds	r3, #27
 8003db8:	2203      	movs	r2, #3
 8003dba:	701a      	strb	r2, [r3, #0]
          break;
 8003dbc:	e00a      	b.n	8003dd4 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc2:	4413      	add	r3, r2
 8003dc4:	331b      	adds	r3, #27
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
          break;
 8003dca:	e003      	b.n	8003dd4 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003dd2:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	461a      	mov	r2, r3
 8003de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de2:	4293      	cmp	r3, r2
 8003de4:	f4ff ae73 	bcc.w	8003ace <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f809 	bl	8003e00 <BSP_TS_Get_GestureId>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003df4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3754      	adds	r7, #84	; 0x54
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd90      	pop	{r4, r7, pc}

08003e00 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003e10:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <BSP_TS_Get_GestureId+0x100>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f107 0208 	add.w	r2, r7, #8
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fd f844 	bl	8000eaa <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b49      	cmp	r3, #73	; 0x49
 8003e26:	d05e      	beq.n	8003ee6 <BSP_TS_Get_GestureId+0xe6>
 8003e28:	2b49      	cmp	r3, #73	; 0x49
 8003e2a:	d860      	bhi.n	8003eee <BSP_TS_Get_GestureId+0xee>
 8003e2c:	2b1c      	cmp	r3, #28
 8003e2e:	d83f      	bhi.n	8003eb0 <BSP_TS_Get_GestureId+0xb0>
 8003e30:	2b1c      	cmp	r3, #28
 8003e32:	d85c      	bhi.n	8003eee <BSP_TS_Get_GestureId+0xee>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <BSP_TS_Get_GestureId+0x3c>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003eb7 	.word	0x08003eb7
 8003e40:	08003eef 	.word	0x08003eef
 8003e44:	08003eef 	.word	0x08003eef
 8003e48:	08003eef 	.word	0x08003eef
 8003e4c:	08003eef 	.word	0x08003eef
 8003e50:	08003eef 	.word	0x08003eef
 8003e54:	08003eef 	.word	0x08003eef
 8003e58:	08003eef 	.word	0x08003eef
 8003e5c:	08003eef 	.word	0x08003eef
 8003e60:	08003eef 	.word	0x08003eef
 8003e64:	08003eef 	.word	0x08003eef
 8003e68:	08003eef 	.word	0x08003eef
 8003e6c:	08003eef 	.word	0x08003eef
 8003e70:	08003eef 	.word	0x08003eef
 8003e74:	08003eef 	.word	0x08003eef
 8003e78:	08003eef 	.word	0x08003eef
 8003e7c:	08003ebf 	.word	0x08003ebf
 8003e80:	08003eef 	.word	0x08003eef
 8003e84:	08003eef 	.word	0x08003eef
 8003e88:	08003eef 	.word	0x08003eef
 8003e8c:	08003ec7 	.word	0x08003ec7
 8003e90:	08003eef 	.word	0x08003eef
 8003e94:	08003eef 	.word	0x08003eef
 8003e98:	08003eef 	.word	0x08003eef
 8003e9c:	08003ecf 	.word	0x08003ecf
 8003ea0:	08003eef 	.word	0x08003eef
 8003ea4:	08003eef 	.word	0x08003eef
 8003ea8:	08003eef 	.word	0x08003eef
 8003eac:	08003ed7 	.word	0x08003ed7
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	d014      	beq.n	8003ede <BSP_TS_Get_GestureId+0xde>
 8003eb4:	e01b      	b.n	8003eee <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003ebc:	e01a      	b.n	8003ef4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003ec4:	e016      	b.n	8003ef4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003ecc:	e012      	b.n	8003ef4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003ed4:	e00e      	b.n	8003ef4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003edc:	e00a      	b.n	8003ef4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003ee4:	e006      	b.n	8003ef4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2206      	movs	r2, #6
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003eec:	e002      	b.n	8003ef4 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef2:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000685 	.word	0x20000685

08003f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <HAL_MspInit+0x44>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <HAL_MspInit+0x44>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
 8003f16:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <HAL_MspInit+0x44>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	607b      	str	r3, [r7, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_MspInit+0x44>)
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <HAL_MspInit+0x44>)
 8003f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_MspInit+0x44>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800

08003f4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08e      	sub	sp, #56	; 0x38
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003f5c:	4b33      	ldr	r3, [pc, #204]	; (800402c <HAL_InitTick+0xe0>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	4a32      	ldr	r2, [pc, #200]	; (800402c <HAL_InitTick+0xe0>)
 8003f62:	f043 0310 	orr.w	r3, r3, #16
 8003f66:	6413      	str	r3, [r2, #64]	; 0x40
 8003f68:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_InitTick+0xe0>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f74:	f107 0210 	add.w	r2, r7, #16
 8003f78:	f107 0314 	add.w	r3, r7, #20
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 f9c8 	bl	8008314 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003f8e:	f004 f999 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 8003f92:	6378      	str	r0, [r7, #52]	; 0x34
 8003f94:	e004      	b.n	8003fa0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003f96:	f004 f995 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa2:	4a23      	ldr	r2, [pc, #140]	; (8004030 <HAL_InitTick+0xe4>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	0c9b      	lsrs	r3, r3, #18
 8003faa:	3b01      	subs	r3, #1
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_InitTick+0xe8>)
 8003fb0:	4a21      	ldr	r2, [pc, #132]	; (8004038 <HAL_InitTick+0xec>)
 8003fb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003fb4:	4b1f      	ldr	r3, [pc, #124]	; (8004034 <HAL_InitTick+0xe8>)
 8003fb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003fbc:	4a1d      	ldr	r2, [pc, #116]	; (8004034 <HAL_InitTick+0xe8>)
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003fc2:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <HAL_InitTick+0xe8>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <HAL_InitTick+0xe8>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_InitTick+0xe8>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003fd4:	4817      	ldr	r0, [pc, #92]	; (8004034 <HAL_InitTick+0xe8>)
 8003fd6:	f005 fad1 	bl	800957c <HAL_TIM_Base_Init>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d11b      	bne.n	8004020 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003fe8:	4812      	ldr	r0, [pc, #72]	; (8004034 <HAL_InitTick+0xe8>)
 8003fea:	f005 fb1f 	bl	800962c <HAL_TIM_Base_Start_IT>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003ff4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d111      	bne.n	8004020 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ffc:	2036      	movs	r0, #54	; 0x36
 8003ffe:	f001 f9c7 	bl	8005390 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b0f      	cmp	r3, #15
 8004006:	d808      	bhi.n	800401a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004008:	2200      	movs	r2, #0
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	2036      	movs	r0, #54	; 0x36
 800400e:	f001 f9a3 	bl	8005358 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <HAL_InitTick+0xf0>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e002      	b.n	8004020 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004020:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004024:	4618      	mov	r0, r3
 8004026:	3738      	adds	r7, #56	; 0x38
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	431bde83 	.word	0x431bde83
 8004034:	200006b0 	.word	0x200006b0
 8004038:	40001000 	.word	0x40001000
 800403c:	20000040 	.word	0x20000040

08004040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004044:	e7fe      	b.n	8004044 <NMI_Handler+0x4>

08004046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800404a:	e7fe      	b.n	800404a <HardFault_Handler+0x4>

0800404c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004050:	e7fe      	b.n	8004050 <MemManage_Handler+0x4>

08004052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004052:	b480      	push	{r7}
 8004054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004056:	e7fe      	b.n	8004056 <BusFault_Handler+0x4>

08004058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800405c:	e7fe      	b.n	800405c <UsageFault_Handler+0x4>

0800405e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800405e:	b480      	push	{r7}
 8004060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004062:	bf00      	nop
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <TIM6_DAC_IRQHandler+0x20>)
 800409e:	791b      	ldrb	r3, [r3, #4]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80040a6:	4804      	ldr	r0, [pc, #16]	; (80040b8 <TIM6_DAC_IRQHandler+0x20>)
 80040a8:	f001 f9a2 	bl	80053f0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80040ac:	4803      	ldr	r0, [pc, #12]	; (80040bc <TIM6_DAC_IRQHandler+0x24>)
 80040ae:	f005 fb35 	bl	800971c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000144 	.word	0x20000144
 80040bc:	200006b0 	.word	0x200006b0

080040c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80040c4:	4802      	ldr	r0, [pc, #8]	; (80040d0 <LTDC_IRQHandler+0x10>)
 80040c6:	f003 f993 	bl	80073f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000280 	.word	0x20000280

080040d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80040d8:	4802      	ldr	r0, [pc, #8]	; (80040e4 <DMA2D_IRQHandler+0x10>)
 80040da:	f001 fd63 	bl	8005ba4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80040de:	bf00      	nop
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000158 	.word	0x20000158

080040e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040f0:	4a14      	ldr	r2, [pc, #80]	; (8004144 <_sbrk+0x5c>)
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <_sbrk+0x60>)
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040fc:	4b13      	ldr	r3, [pc, #76]	; (800414c <_sbrk+0x64>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <_sbrk+0x64>)
 8004106:	4a12      	ldr	r2, [pc, #72]	; (8004150 <_sbrk+0x68>)
 8004108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <_sbrk+0x64>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	429a      	cmp	r2, r3
 8004116:	d207      	bcs.n	8004128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004118:	f006 fdbc 	bl	800ac94 <__errno>
 800411c:	4603      	mov	r3, r0
 800411e:	220c      	movs	r2, #12
 8004120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
 8004126:	e009      	b.n	800413c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004128:	4b08      	ldr	r3, [pc, #32]	; (800414c <_sbrk+0x64>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <_sbrk+0x64>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4413      	add	r3, r2
 8004136:	4a05      	ldr	r2, [pc, #20]	; (800414c <_sbrk+0x64>)
 8004138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800413a:	68fb      	ldr	r3, [r7, #12]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20050000 	.word	0x20050000
 8004148:	00000400 	.word	0x00000400
 800414c:	200006fc 	.word	0x200006fc
 8004150:	20000b60 	.word	0x20000b60

08004154 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <SystemInit+0x20>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	4a05      	ldr	r2, [pc, #20]	; (8004174 <SystemInit+0x20>)
 8004160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800417e:	f107 0310 	add.w	r3, r7, #16
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	609a      	str	r2, [r3, #8]
 800418a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800418c:	1d3b      	adds	r3, r7, #4
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004196:	4b20      	ldr	r3, [pc, #128]	; (8004218 <MX_TIM1_Init+0xa0>)
 8004198:	4a20      	ldr	r2, [pc, #128]	; (800421c <MX_TIM1_Init+0xa4>)
 800419a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800419c:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <MX_TIM1_Init+0xa0>)
 800419e:	2200      	movs	r2, #0
 80041a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <MX_TIM1_Init+0xa0>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80041a8:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <MX_TIM1_Init+0xa0>)
 80041aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <MX_TIM1_Init+0xa0>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <MX_TIM1_Init+0xa0>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <MX_TIM1_Init+0xa0>)
 80041be:	2200      	movs	r2, #0
 80041c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80041c2:	4815      	ldr	r0, [pc, #84]	; (8004218 <MX_TIM1_Init+0xa0>)
 80041c4:	f005 f9da 	bl	800957c <HAL_TIM_Base_Init>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80041ce:	f7fd ff85 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80041d8:	f107 0310 	add.w	r3, r7, #16
 80041dc:	4619      	mov	r1, r3
 80041de:	480e      	ldr	r0, [pc, #56]	; (8004218 <MX_TIM1_Init+0xa0>)
 80041e0:	f005 fbbc 	bl	800995c <HAL_TIM_ConfigClockSource>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80041ea:	f7fd ff77 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4806      	ldr	r0, [pc, #24]	; (8004218 <MX_TIM1_Init+0xa0>)
 8004200:	f005 fdd8 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800420a:	f7fd ff67 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800420e:	bf00      	nop
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000700 	.word	0x20000700
 800421c:	40010000 	.word	0x40010000

08004220 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004226:	f107 0310 	add.w	r3, r7, #16
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	609a      	str	r2, [r3, #8]
 8004232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004234:	1d3b      	adds	r3, r7, #4
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800423e:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <MX_TIM2_Init+0x98>)
 8004240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004244:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004246:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <MX_TIM2_Init+0x98>)
 8004248:	2200      	movs	r2, #0
 800424a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <MX_TIM2_Init+0x98>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004252:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <MX_TIM2_Init+0x98>)
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800425a:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <MX_TIM2_Init+0x98>)
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004260:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <MX_TIM2_Init+0x98>)
 8004262:	2200      	movs	r2, #0
 8004264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004266:	4814      	ldr	r0, [pc, #80]	; (80042b8 <MX_TIM2_Init+0x98>)
 8004268:	f005 f988 	bl	800957c <HAL_TIM_Base_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004272:	f7fd ff33 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800427a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	4619      	mov	r1, r3
 8004282:	480d      	ldr	r0, [pc, #52]	; (80042b8 <MX_TIM2_Init+0x98>)
 8004284:	f005 fb6a 	bl	800995c <HAL_TIM_ConfigClockSource>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800428e:	f7fd ff25 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004292:	2300      	movs	r3, #0
 8004294:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800429a:	1d3b      	adds	r3, r7, #4
 800429c:	4619      	mov	r1, r3
 800429e:	4806      	ldr	r0, [pc, #24]	; (80042b8 <MX_TIM2_Init+0x98>)
 80042a0:	f005 fd88 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80042aa:	f7fd ff17 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80042ae:	bf00      	nop
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	2000074c 	.word	0x2000074c

080042bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042c2:	f107 0310 	add.w	r3, r7, #16
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	609a      	str	r2, [r3, #8]
 80042ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042d0:	1d3b      	adds	r3, r7, #4
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042da:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <MX_TIM3_Init+0x94>)
 80042dc:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <MX_TIM3_Init+0x98>)
 80042de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <MX_TIM3_Init+0x94>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <MX_TIM3_Init+0x94>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80042ec:	4b18      	ldr	r3, [pc, #96]	; (8004350 <MX_TIM3_Init+0x94>)
 80042ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042f4:	4b16      	ldr	r3, [pc, #88]	; (8004350 <MX_TIM3_Init+0x94>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042fa:	4b15      	ldr	r3, [pc, #84]	; (8004350 <MX_TIM3_Init+0x94>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004300:	4813      	ldr	r0, [pc, #76]	; (8004350 <MX_TIM3_Init+0x94>)
 8004302:	f005 f93b 	bl	800957c <HAL_TIM_Base_Init>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800430c:	f7fd fee6 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004314:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004316:	f107 0310 	add.w	r3, r7, #16
 800431a:	4619      	mov	r1, r3
 800431c:	480c      	ldr	r0, [pc, #48]	; (8004350 <MX_TIM3_Init+0x94>)
 800431e:	f005 fb1d 	bl	800995c <HAL_TIM_ConfigClockSource>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004328:	f7fd fed8 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800432c:	2300      	movs	r3, #0
 800432e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004334:	1d3b      	adds	r3, r7, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4805      	ldr	r0, [pc, #20]	; (8004350 <MX_TIM3_Init+0x94>)
 800433a:	f005 fd3b 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004344:	f7fd feca 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004348:	bf00      	nop
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000798 	.word	0x20000798
 8004354:	40000400 	.word	0x40000400

08004358 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800435e:	f107 0310 	add.w	r3, r7, #16
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	605a      	str	r2, [r3, #4]
 8004374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004376:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <MX_TIM5_Init+0x94>)
 8004378:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <MX_TIM5_Init+0x98>)
 800437a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <MX_TIM5_Init+0x94>)
 800437e:	2200      	movs	r2, #0
 8004380:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004382:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <MX_TIM5_Init+0x94>)
 8004384:	2200      	movs	r2, #0
 8004386:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004388:	4b18      	ldr	r3, [pc, #96]	; (80043ec <MX_TIM5_Init+0x94>)
 800438a:	f04f 32ff 	mov.w	r2, #4294967295
 800438e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004390:	4b16      	ldr	r3, [pc, #88]	; (80043ec <MX_TIM5_Init+0x94>)
 8004392:	2200      	movs	r2, #0
 8004394:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004396:	4b15      	ldr	r3, [pc, #84]	; (80043ec <MX_TIM5_Init+0x94>)
 8004398:	2200      	movs	r2, #0
 800439a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800439c:	4813      	ldr	r0, [pc, #76]	; (80043ec <MX_TIM5_Init+0x94>)
 800439e:	f005 f8ed 	bl	800957c <HAL_TIM_Base_Init>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80043a8:	f7fd fe98 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80043b2:	f107 0310 	add.w	r3, r7, #16
 80043b6:	4619      	mov	r1, r3
 80043b8:	480c      	ldr	r0, [pc, #48]	; (80043ec <MX_TIM5_Init+0x94>)
 80043ba:	f005 facf 	bl	800995c <HAL_TIM_ConfigClockSource>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80043c4:	f7fd fe8a 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043c8:	2300      	movs	r3, #0
 80043ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4805      	ldr	r0, [pc, #20]	; (80043ec <MX_TIM5_Init+0x94>)
 80043d6:	f005 fced 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80043e0:	f7fd fe7c 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80043e4:	bf00      	nop
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	200007e4 	.word	0x200007e4
 80043f0:	40000c00 	.word	0x40000c00

080043f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043fa:	f107 0310 	add.w	r3, r7, #16
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	605a      	str	r2, [r3, #4]
 8004404:	609a      	str	r2, [r3, #8]
 8004406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004408:	1d3b      	adds	r3, r7, #4
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004412:	4b20      	ldr	r3, [pc, #128]	; (8004494 <MX_TIM8_Init+0xa0>)
 8004414:	4a20      	ldr	r2, [pc, #128]	; (8004498 <MX_TIM8_Init+0xa4>)
 8004416:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004418:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <MX_TIM8_Init+0xa0>)
 800441a:	2200      	movs	r2, #0
 800441c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <MX_TIM8_Init+0xa0>)
 8004420:	2200      	movs	r2, #0
 8004422:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <MX_TIM8_Init+0xa0>)
 8004426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800442a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <MX_TIM8_Init+0xa0>)
 800442e:	2200      	movs	r2, #0
 8004430:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004432:	4b18      	ldr	r3, [pc, #96]	; (8004494 <MX_TIM8_Init+0xa0>)
 8004434:	2200      	movs	r2, #0
 8004436:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004438:	4b16      	ldr	r3, [pc, #88]	; (8004494 <MX_TIM8_Init+0xa0>)
 800443a:	2200      	movs	r2, #0
 800443c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800443e:	4815      	ldr	r0, [pc, #84]	; (8004494 <MX_TIM8_Init+0xa0>)
 8004440:	f005 f89c 	bl	800957c <HAL_TIM_Base_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800444a:	f7fd fe47 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800444e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004452:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004454:	f107 0310 	add.w	r3, r7, #16
 8004458:	4619      	mov	r1, r3
 800445a:	480e      	ldr	r0, [pc, #56]	; (8004494 <MX_TIM8_Init+0xa0>)
 800445c:	f005 fa7e 	bl	800995c <HAL_TIM_ConfigClockSource>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8004466:	f7fd fe39 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4806      	ldr	r0, [pc, #24]	; (8004494 <MX_TIM8_Init+0xa0>)
 800447c:	f005 fc9a 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004486:	f7fd fe29 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800448a:	bf00      	nop
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000830 	.word	0x20000830
 8004498:	40010400 	.word	0x40010400

0800449c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08e      	sub	sp, #56	; 0x38
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a3b      	ldr	r2, [pc, #236]	; (80045a8 <HAL_TIM_Base_MspInit+0x10c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10c      	bne.n	80044d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044be:	4b3b      	ldr	r3, [pc, #236]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	4a3a      	ldr	r2, [pc, #232]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ca:	4b38      	ldr	r3, [pc, #224]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	623b      	str	r3, [r7, #32]
 80044d4:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80044d6:	e062      	b.n	800459e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e0:	d10c      	bne.n	80044fc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044e2:	4b32      	ldr	r3, [pc, #200]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	4a31      	ldr	r2, [pc, #196]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6413      	str	r3, [r2, #64]	; 0x40
 80044ee:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	69fb      	ldr	r3, [r7, #28]
}
 80044fa:	e050      	b.n	800459e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2b      	ldr	r2, [pc, #172]	; (80045b0 <HAL_TIM_Base_MspInit+0x114>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d10c      	bne.n	8004520 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004506:	4b29      	ldr	r3, [pc, #164]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a28      	ldr	r2, [pc, #160]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 800450c:	f043 0302 	orr.w	r3, r3, #2
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b26      	ldr	r3, [pc, #152]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	69bb      	ldr	r3, [r7, #24]
}
 800451e:	e03e      	b.n	800459e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a23      	ldr	r2, [pc, #140]	; (80045b4 <HAL_TIM_Base_MspInit+0x118>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10c      	bne.n	8004544 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 8004530:	f043 0308 	orr.w	r3, r3, #8
 8004534:	6413      	str	r3, [r2, #64]	; 0x40
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697b      	ldr	r3, [r7, #20]
}
 8004542:	e02c      	b.n	800459e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_TIM_Base_MspInit+0x11c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d127      	bne.n	800459e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800454e:	4b17      	ldr	r3, [pc, #92]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	4a16      	ldr	r2, [pc, #88]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 8004554:	f043 0302 	orr.w	r3, r3, #2
 8004558:	6453      	str	r3, [r2, #68]	; 0x44
 800455a:	4b14      	ldr	r3, [pc, #80]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004566:	4b11      	ldr	r3, [pc, #68]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	4a10      	ldr	r2, [pc, #64]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004570:	6313      	str	r3, [r2, #48]	; 0x30
 8004572:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <HAL_TIM_Base_MspInit+0x110>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800457e:	2304      	movs	r3, #4
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004582:	2302      	movs	r3, #2
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004586:	2300      	movs	r3, #0
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800458a:	2300      	movs	r3, #0
 800458c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800458e:	2303      	movs	r3, #3
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004596:	4619      	mov	r1, r3
 8004598:	4808      	ldr	r0, [pc, #32]	; (80045bc <HAL_TIM_Base_MspInit+0x120>)
 800459a:	f001 fd41 	bl	8006020 <HAL_GPIO_Init>
}
 800459e:	bf00      	nop
 80045a0:	3738      	adds	r7, #56	; 0x38
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	40010400 	.word	0x40010400
 80045bc:	40022000 	.word	0x40022000

080045c0 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <MX_UART7_Init+0x58>)
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <MX_UART7_Init+0x5c>)
 80045c8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80045ca:	4b13      	ldr	r3, [pc, #76]	; (8004618 <MX_UART7_Init+0x58>)
 80045cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045d0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <MX_UART7_Init+0x58>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <MX_UART7_Init+0x58>)
 80045da:	2200      	movs	r2, #0
 80045dc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <MX_UART7_Init+0x58>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <MX_UART7_Init+0x58>)
 80045e6:	220c      	movs	r2, #12
 80045e8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <MX_UART7_Init+0x58>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <MX_UART7_Init+0x58>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <MX_UART7_Init+0x58>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <MX_UART7_Init+0x58>)
 80045fe:	2200      	movs	r2, #0
 8004600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004602:	4805      	ldr	r0, [pc, #20]	; (8004618 <MX_UART7_Init+0x58>)
 8004604:	f005 fc82 	bl	8009f0c <HAL_UART_Init>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800460e:	f7fd fd65 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	2000087c 	.word	0x2000087c
 800461c:	40007800 	.word	0x40007800

08004620 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004624:	4b14      	ldr	r3, [pc, #80]	; (8004678 <MX_USART1_UART_Init+0x58>)
 8004626:	4a15      	ldr	r2, [pc, #84]	; (800467c <MX_USART1_UART_Init+0x5c>)
 8004628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <MX_USART1_UART_Init+0x58>)
 800462c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <MX_USART1_UART_Init+0x58>)
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <MX_USART1_UART_Init+0x58>)
 800463a:	2200      	movs	r2, #0
 800463c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800463e:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <MX_USART1_UART_Init+0x58>)
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <MX_USART1_UART_Init+0x58>)
 8004646:	220c      	movs	r2, #12
 8004648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <MX_USART1_UART_Init+0x58>)
 800464c:	2200      	movs	r2, #0
 800464e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <MX_USART1_UART_Init+0x58>)
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <MX_USART1_UART_Init+0x58>)
 8004658:	2200      	movs	r2, #0
 800465a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <MX_USART1_UART_Init+0x58>)
 800465e:	2200      	movs	r2, #0
 8004660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004662:	4805      	ldr	r0, [pc, #20]	; (8004678 <MX_USART1_UART_Init+0x58>)
 8004664:	f005 fc52 	bl	8009f0c <HAL_UART_Init>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800466e:	f7fd fd35 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000904 	.word	0x20000904
 800467c:	40011000 	.word	0x40011000

08004680 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004684:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 8004686:	4a15      	ldr	r2, [pc, #84]	; (80046dc <MX_USART6_UART_Init+0x5c>)
 8004688:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 800468c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004690:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004692:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 8004694:	2200      	movs	r2, #0
 8004696:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 800469a:	2200      	movs	r2, #0
 800469c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 80046a6:	220c      	movs	r2, #12
 80046a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80046b0:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 80046be:	2200      	movs	r2, #0
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80046c2:	4805      	ldr	r0, [pc, #20]	; (80046d8 <MX_USART6_UART_Init+0x58>)
 80046c4:	f005 fc22 	bl	8009f0c <HAL_UART_Init>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80046ce:	f7fd fd05 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80046d2:	bf00      	nop
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	2000098c 	.word	0x2000098c
 80046dc:	40011400 	.word	0x40011400

080046e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b0b0      	sub	sp, #192	; 0xc0
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046fc:	2284      	movs	r2, #132	; 0x84
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f006 fabf 	bl	800ac84 <memset>
  if(uartHandle->Instance==UART7)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a75      	ldr	r2, [pc, #468]	; (80048e0 <HAL_UART_MspInit+0x200>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d13d      	bne.n	800478c <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004716:	2300      	movs	r3, #0
 8004718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800471c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004720:	4618      	mov	r0, r3
 8004722:	f003 fe29 	bl	8008378 <HAL_RCCEx_PeriphCLKConfig>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800472c:	f7fd fcd6 	bl	80020dc <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004730:	4b6c      	ldr	r3, [pc, #432]	; (80048e4 <HAL_UART_MspInit+0x204>)
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	4a6b      	ldr	r2, [pc, #428]	; (80048e4 <HAL_UART_MspInit+0x204>)
 8004736:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800473a:	6413      	str	r3, [r2, #64]	; 0x40
 800473c:	4b69      	ldr	r3, [pc, #420]	; (80048e4 <HAL_UART_MspInit+0x204>)
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004748:	4b66      	ldr	r3, [pc, #408]	; (80048e4 <HAL_UART_MspInit+0x204>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	4a65      	ldr	r2, [pc, #404]	; (80048e4 <HAL_UART_MspInit+0x204>)
 800474e:	f043 0320 	orr.w	r3, r3, #32
 8004752:	6313      	str	r3, [r2, #48]	; 0x30
 8004754:	4b63      	ldr	r3, [pc, #396]	; (80048e4 <HAL_UART_MspInit+0x204>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004760:	23c0      	movs	r3, #192	; 0xc0
 8004762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
 8004768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004772:	2303      	movs	r3, #3
 8004774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004778:	2308      	movs	r3, #8
 800477a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800477e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004782:	4619      	mov	r1, r3
 8004784:	4858      	ldr	r0, [pc, #352]	; (80048e8 <HAL_UART_MspInit+0x208>)
 8004786:	f001 fc4b 	bl	8006020 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800478a:	e0a4      	b.n	80048d6 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a56      	ldr	r2, [pc, #344]	; (80048ec <HAL_UART_MspInit+0x20c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d15d      	bne.n	8004852 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004796:	2340      	movs	r3, #64	; 0x40
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800479a:	2300      	movs	r3, #0
 800479c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800479e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047a2:	4618      	mov	r0, r3
 80047a4:	f003 fde8 	bl	8008378 <HAL_RCCEx_PeriphCLKConfig>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80047ae:	f7fd fc95 	bl	80020dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80047b2:	4b4c      	ldr	r3, [pc, #304]	; (80048e4 <HAL_UART_MspInit+0x204>)
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	4a4b      	ldr	r2, [pc, #300]	; (80048e4 <HAL_UART_MspInit+0x204>)
 80047b8:	f043 0310 	orr.w	r3, r3, #16
 80047bc:	6453      	str	r3, [r2, #68]	; 0x44
 80047be:	4b49      	ldr	r3, [pc, #292]	; (80048e4 <HAL_UART_MspInit+0x204>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ca:	4b46      	ldr	r3, [pc, #280]	; (80048e4 <HAL_UART_MspInit+0x204>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	4a45      	ldr	r2, [pc, #276]	; (80048e4 <HAL_UART_MspInit+0x204>)
 80047d0:	f043 0302 	orr.w	r3, r3, #2
 80047d4:	6313      	str	r3, [r2, #48]	; 0x30
 80047d6:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_UART_MspInit+0x204>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e2:	4b40      	ldr	r3, [pc, #256]	; (80048e4 <HAL_UART_MspInit+0x204>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a3f      	ldr	r2, [pc, #252]	; (80048e4 <HAL_UART_MspInit+0x204>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <HAL_UART_MspInit+0x204>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004800:	2302      	movs	r3, #2
 8004802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480c:	2300      	movs	r3, #0
 800480e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004812:	2307      	movs	r3, #7
 8004814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004818:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800481c:	4619      	mov	r1, r3
 800481e:	4834      	ldr	r0, [pc, #208]	; (80048f0 <HAL_UART_MspInit+0x210>)
 8004820:	f001 fbfe 	bl	8006020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482c:	2302      	movs	r3, #2
 800482e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004832:	2300      	movs	r3, #0
 8004834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004838:	2300      	movs	r3, #0
 800483a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800483e:	2307      	movs	r3, #7
 8004840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004844:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004848:	4619      	mov	r1, r3
 800484a:	482a      	ldr	r0, [pc, #168]	; (80048f4 <HAL_UART_MspInit+0x214>)
 800484c:	f001 fbe8 	bl	8006020 <HAL_GPIO_Init>
}
 8004850:	e041      	b.n	80048d6 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a28      	ldr	r2, [pc, #160]	; (80048f8 <HAL_UART_MspInit+0x218>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d13c      	bne.n	80048d6 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800485c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004862:	2300      	movs	r3, #0
 8004864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800486c:	4618      	mov	r0, r3
 800486e:	f003 fd83 	bl	8008378 <HAL_RCCEx_PeriphCLKConfig>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004878:	f7fd fc30 	bl	80020dc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_UART_MspInit+0x204>)
 800487e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004880:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_UART_MspInit+0x204>)
 8004882:	f043 0320 	orr.w	r3, r3, #32
 8004886:	6453      	str	r3, [r2, #68]	; 0x44
 8004888:	4b16      	ldr	r3, [pc, #88]	; (80048e4 <HAL_UART_MspInit+0x204>)
 800488a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <HAL_UART_MspInit+0x204>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	4a12      	ldr	r2, [pc, #72]	; (80048e4 <HAL_UART_MspInit+0x204>)
 800489a:	f043 0304 	orr.w	r3, r3, #4
 800489e:	6313      	str	r3, [r2, #48]	; 0x30
 80048a0:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <HAL_UART_MspInit+0x204>)
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80048ac:	23c0      	movs	r3, #192	; 0xc0
 80048ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b2:	2302      	movs	r3, #2
 80048b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048be:	2303      	movs	r3, #3
 80048c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80048c4:	2308      	movs	r3, #8
 80048c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80048ce:	4619      	mov	r1, r3
 80048d0:	480a      	ldr	r0, [pc, #40]	; (80048fc <HAL_UART_MspInit+0x21c>)
 80048d2:	f001 fba5 	bl	8006020 <HAL_GPIO_Init>
}
 80048d6:	bf00      	nop
 80048d8:	37c0      	adds	r7, #192	; 0xc0
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40007800 	.word	0x40007800
 80048e4:	40023800 	.word	0x40023800
 80048e8:	40021400 	.word	0x40021400
 80048ec:	40011000 	.word	0x40011000
 80048f0:	40020400 	.word	0x40020400
 80048f4:	40020000 	.word	0x40020000
 80048f8:	40011400 	.word	0x40011400
 80048fc:	40020800 	.word	0x40020800

08004900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004904:	480d      	ldr	r0, [pc, #52]	; (800493c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004906:	490e      	ldr	r1, [pc, #56]	; (8004940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004908:	4a0e      	ldr	r2, [pc, #56]	; (8004944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800490a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800490c:	e002      	b.n	8004914 <LoopCopyDataInit>

0800490e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800490e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004912:	3304      	adds	r3, #4

08004914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004918:	d3f9      	bcc.n	800490e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800491a:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800491c:	4c0b      	ldr	r4, [pc, #44]	; (800494c <LoopFillZerobss+0x26>)
  movs r3, #0
 800491e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004920:	e001      	b.n	8004926 <LoopFillZerobss>

08004922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004924:	3204      	adds	r2, #4

08004926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004928:	d3fb      	bcc.n	8004922 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800492a:	f7ff fc13 	bl	8004154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800492e:	f006 f9b7 	bl	800aca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004932:	f7fd f953 	bl	8001bdc <main>
  bx  lr    
 8004936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004938:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800493c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004940:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8004944:	0804d1a4 	.word	0x0804d1a4
  ldr r2, =_sbss
 8004948:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800494c:	20000b60 	.word	0x20000b60

08004950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004950:	e7fe      	b.n	8004950 <ADC_IRQHandler>

08004952 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004956:	2003      	movs	r0, #3
 8004958:	f000 fcf3 	bl	8005342 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800495c:	200f      	movs	r0, #15
 800495e:	f7ff faf5 	bl	8003f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004962:	f7ff facf 	bl	8003f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_IncTick+0x20>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_IncTick+0x24>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4413      	add	r3, r2
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <HAL_IncTick+0x24>)
 800497e:	6013      	str	r3, [r2, #0]
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20000044 	.word	0x20000044
 8004990:	20000a14 	.word	0x20000a14

08004994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return uwTick;
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <HAL_GetTick+0x14>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000a14 	.word	0x20000a14

080049ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049b4:	f7ff ffee 	bl	8004994 <HAL_GetTick>
 80049b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d005      	beq.n	80049d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <HAL_Delay+0x44>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049d2:	bf00      	nop
 80049d4:	f7ff ffde 	bl	8004994 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d8f7      	bhi.n	80049d4 <HAL_Delay+0x28>
  {
  }
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000044 	.word	0x20000044

080049f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e031      	b.n	8004a6e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fb fe76 	bl	8000704 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d116      	bne.n	8004a60 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <HAL_ADC_Init+0x84>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	f043 0202 	orr.w	r2, r3, #2
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fad6 	bl	8004ff4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	f043 0201 	orr.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	641a      	str	r2, [r3, #64]	; 0x40
 8004a5e:	e001      	b.n	8004a64 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	ffffeefd 	.word	0xffffeefd

08004a7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_Start+0x1a>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e0ad      	b.n	8004bf2 <HAL_ADC_Start+0x176>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d018      	beq.n	8004ade <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004abc:	4b50      	ldr	r3, [pc, #320]	; (8004c00 <HAL_ADC_Start+0x184>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a50      	ldr	r2, [pc, #320]	; (8004c04 <HAL_ADC_Start+0x188>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0c9a      	lsrs	r2, r3, #18
 8004ac8:	4613      	mov	r3, r2
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	4413      	add	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004ad0:	e002      	b.n	8004ad8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f9      	bne.n	8004ad2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d175      	bne.n	8004bd8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004af0:	4b45      	ldr	r3, [pc, #276]	; (8004c08 <HAL_ADC_Start+0x18c>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b26:	d106      	bne.n	8004b36 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2c:	f023 0206 	bic.w	r2, r3, #6
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	645a      	str	r2, [r3, #68]	; 0x44
 8004b34:	e002      	b.n	8004b3c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b4c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004b4e:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <HAL_ADC_Start+0x190>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d143      	bne.n	8004bf0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b76:	609a      	str	r2, [r3, #8]
 8004b78:	e03a      	b.n	8004bf0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a24      	ldr	r2, [pc, #144]	; (8004c10 <HAL_ADC_Start+0x194>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10e      	bne.n	8004ba2 <HAL_ADC_Start+0x126>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d107      	bne.n	8004ba2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ba0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004ba2:	4b1a      	ldr	r3, [pc, #104]	; (8004c0c <HAL_ADC_Start+0x190>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d120      	bne.n	8004bf0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <HAL_ADC_Start+0x198>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_ADC_Start+0x174>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d114      	bne.n	8004bf0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bd4:	609a      	str	r2, [r3, #8]
 8004bd6:	e00b      	b.n	8004bf0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	f043 0210 	orr.w	r2, r3, #16
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	f043 0201 	orr.w	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	2000003c 	.word	0x2000003c
 8004c04:	431bde83 	.word	0x431bde83
 8004c08:	fffff8fe 	.word	0xfffff8fe
 8004c0c:	40012300 	.word	0x40012300
 8004c10:	40012000 	.word	0x40012000
 8004c14:	40012200 	.word	0x40012200

08004c18 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c34:	d113      	bne.n	8004c5e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c44:	d10b      	bne.n	8004c5e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e063      	b.n	8004d26 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004c5e:	f7ff fe99 	bl	8004994 <HAL_GetTick>
 8004c62:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c64:	e021      	b.n	8004caa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d01d      	beq.n	8004caa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <HAL_ADC_PollForConversion+0x6c>
 8004c74:	f7ff fe8e 	bl	8004994 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d212      	bcs.n	8004caa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d00b      	beq.n	8004caa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f043 0204 	orr.w	r2, r3, #4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e03d      	b.n	8004d26 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d1d6      	bne.n	8004c66 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0212 	mvn.w	r2, #18
 8004cc0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d123      	bne.n	8004d24 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d11f      	bne.n	8004d24 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d006      	beq.n	8004d00 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d111      	bne.n	8004d24 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f043 0201 	orr.w	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x1c>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e136      	b.n	8004fd2 <HAL_ADC_ConfigChannel+0x28a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b09      	cmp	r3, #9
 8004d72:	d93a      	bls.n	8004dea <HAL_ADC_ConfigChannel+0xa2>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d7c:	d035      	beq.n	8004dea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68d9      	ldr	r1, [r3, #12]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	3b1e      	subs	r3, #30
 8004d94:	2207      	movs	r2, #7
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	400a      	ands	r2, r1
 8004da2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a8d      	ldr	r2, [pc, #564]	; (8004fe0 <HAL_ADC_ConfigChannel+0x298>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10a      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68d9      	ldr	r1, [r3, #12]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	061a      	lsls	r2, r3, #24
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004dc2:	e035      	b.n	8004e30 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68d9      	ldr	r1, [r3, #12]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	4403      	add	r3, r0
 8004ddc:	3b1e      	subs	r3, #30
 8004dde:	409a      	lsls	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004de8:	e022      	b.n	8004e30 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6919      	ldr	r1, [r3, #16]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	4613      	mov	r3, r2
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	4413      	add	r3, r2
 8004dfe:	2207      	movs	r2, #7
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	43da      	mvns	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	400a      	ands	r2, r1
 8004e0c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6919      	ldr	r1, [r3, #16]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	4618      	mov	r0, r3
 8004e20:	4603      	mov	r3, r0
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	4403      	add	r3, r0
 8004e26:	409a      	lsls	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b06      	cmp	r3, #6
 8004e36:	d824      	bhi.n	8004e82 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	3b05      	subs	r3, #5
 8004e4a:	221f      	movs	r2, #31
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	43da      	mvns	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	400a      	ands	r2, r1
 8004e58:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	4618      	mov	r0, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	3b05      	subs	r3, #5
 8004e74:	fa00 f203 	lsl.w	r2, r0, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8004e80:	e04c      	b.n	8004f1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b0c      	cmp	r3, #12
 8004e88:	d824      	bhi.n	8004ed4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	3b23      	subs	r3, #35	; 0x23
 8004e9c:	221f      	movs	r2, #31
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43da      	mvns	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	4618      	mov	r0, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3b23      	subs	r3, #35	; 0x23
 8004ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ed2:	e023      	b.n	8004f1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3b41      	subs	r3, #65	; 0x41
 8004ee6:	221f      	movs	r2, #31
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43da      	mvns	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	4618      	mov	r0, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3b41      	subs	r3, #65	; 0x41
 8004f10:	fa00 f203 	lsl.w	r2, r0, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a30      	ldr	r2, [pc, #192]	; (8004fe4 <HAL_ADC_ConfigChannel+0x29c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10a      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x1f4>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f2e:	d105      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004f30:	4b2d      	ldr	r3, [pc, #180]	; (8004fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a2c      	ldr	r2, [pc, #176]	; (8004fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004f36:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004f3a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <HAL_ADC_ConfigChannel+0x29c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10f      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x21e>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b12      	cmp	r3, #18
 8004f4c:	d10b      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004f4e:	4b26      	ldr	r3, [pc, #152]	; (8004fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004f54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f58:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004f5a:	4b23      	ldr	r3, [pc, #140]	; (8004fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004f60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f64:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <HAL_ADC_ConfigChannel+0x29c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d12b      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x280>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <HAL_ADC_ConfigChannel+0x298>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <HAL_ADC_ConfigChannel+0x23a>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b11      	cmp	r3, #17
 8004f80:	d122      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004f82:	4b19      	ldr	r3, [pc, #100]	; (8004fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004f88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004f8c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004f8e:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4a15      	ldr	r2, [pc, #84]	; (8004fe8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004f94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f98:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a10      	ldr	r2, [pc, #64]	; (8004fe0 <HAL_ADC_ConfigChannel+0x298>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d111      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <HAL_ADC_ConfigChannel+0x2a4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a11      	ldr	r2, [pc, #68]	; (8004ff0 <HAL_ADC_ConfigChannel+0x2a8>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	0c9a      	lsrs	r2, r3, #18
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004fba:	e002      	b.n	8004fc2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f9      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	10000012 	.word	0x10000012
 8004fe4:	40012000 	.word	0x40012000
 8004fe8:	40012300 	.word	0x40012300
 8004fec:	2000003c 	.word	0x2000003c
 8004ff0:	431bde83 	.word	0x431bde83

08004ff4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004ffc:	4b78      	ldr	r3, [pc, #480]	; (80051e0 <ADC_Init+0x1ec>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4a77      	ldr	r2, [pc, #476]	; (80051e0 <ADC_Init+0x1ec>)
 8005002:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005006:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005008:	4b75      	ldr	r3, [pc, #468]	; (80051e0 <ADC_Init+0x1ec>)
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	4973      	ldr	r1, [pc, #460]	; (80051e0 <ADC_Init+0x1ec>)
 8005012:	4313      	orrs	r3, r2
 8005014:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6859      	ldr	r1, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	021a      	lsls	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800506a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6899      	ldr	r1, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	4a58      	ldr	r2, [pc, #352]	; (80051e4 <ADC_Init+0x1f0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d022      	beq.n	80050ce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005096:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6899      	ldr	r1, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6899      	ldr	r1, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	e00f      	b.n	80050ee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0202 	bic.w	r2, r2, #2
 80050fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6899      	ldr	r1, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	005a      	lsls	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01b      	beq.n	8005154 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800512a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800513a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	3b01      	subs	r3, #1
 8005148:	035a      	lsls	r2, r3, #13
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	e007      	b.n	8005164 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005162:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	3b01      	subs	r3, #1
 8005180:	051a      	lsls	r2, r3, #20
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6899      	ldr	r1, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051a6:	025a      	lsls	r2, r3, #9
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6899      	ldr	r1, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	029a      	lsls	r2, r3, #10
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	609a      	str	r2, [r3, #8]
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	40012300 	.word	0x40012300
 80051e4:	0f000001 	.word	0x0f000001

080051e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <__NVIC_SetPriorityGrouping+0x40>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005204:	4013      	ands	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <__NVIC_SetPriorityGrouping+0x44>)
 8005212:	4313      	orrs	r3, r2
 8005214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005216:	4a04      	ldr	r2, [pc, #16]	; (8005228 <__NVIC_SetPriorityGrouping+0x40>)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	60d3      	str	r3, [r2, #12]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	e000ed00 	.word	0xe000ed00
 800522c:	05fa0000 	.word	0x05fa0000

08005230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005234:	4b04      	ldr	r3, [pc, #16]	; (8005248 <__NVIC_GetPriorityGrouping+0x18>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	0a1b      	lsrs	r3, r3, #8
 800523a:	f003 0307 	and.w	r3, r3, #7
}
 800523e:	4618      	mov	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e000ed00 	.word	0xe000ed00

0800524c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525a:	2b00      	cmp	r3, #0
 800525c:	db0b      	blt.n	8005276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	f003 021f 	and.w	r2, r3, #31
 8005264:	4907      	ldr	r1, [pc, #28]	; (8005284 <__NVIC_EnableIRQ+0x38>)
 8005266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526a:	095b      	lsrs	r3, r3, #5
 800526c:	2001      	movs	r0, #1
 800526e:	fa00 f202 	lsl.w	r2, r0, r2
 8005272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	e000e100 	.word	0xe000e100

08005288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	6039      	str	r1, [r7, #0]
 8005292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005298:	2b00      	cmp	r3, #0
 800529a:	db0a      	blt.n	80052b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	490c      	ldr	r1, [pc, #48]	; (80052d4 <__NVIC_SetPriority+0x4c>)
 80052a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a6:	0112      	lsls	r2, r2, #4
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	440b      	add	r3, r1
 80052ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052b0:	e00a      	b.n	80052c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	4908      	ldr	r1, [pc, #32]	; (80052d8 <__NVIC_SetPriority+0x50>)
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	3b04      	subs	r3, #4
 80052c0:	0112      	lsls	r2, r2, #4
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	440b      	add	r3, r1
 80052c6:	761a      	strb	r2, [r3, #24]
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	e000e100 	.word	0xe000e100
 80052d8:	e000ed00 	.word	0xe000ed00

080052dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052dc:	b480      	push	{r7}
 80052de:	b089      	sub	sp, #36	; 0x24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f1c3 0307 	rsb	r3, r3, #7
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	bf28      	it	cs
 80052fa:	2304      	movcs	r3, #4
 80052fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3304      	adds	r3, #4
 8005302:	2b06      	cmp	r3, #6
 8005304:	d902      	bls.n	800530c <NVIC_EncodePriority+0x30>
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	3b03      	subs	r3, #3
 800530a:	e000      	b.n	800530e <NVIC_EncodePriority+0x32>
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005310:	f04f 32ff 	mov.w	r2, #4294967295
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	43da      	mvns	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	401a      	ands	r2, r3
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005324:	f04f 31ff 	mov.w	r1, #4294967295
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	43d9      	mvns	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005334:	4313      	orrs	r3, r2
         );
}
 8005336:	4618      	mov	r0, r3
 8005338:	3724      	adds	r7, #36	; 0x24
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff ff4c 	bl	80051e8 <__NVIC_SetPriorityGrouping>
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800536a:	f7ff ff61 	bl	8005230 <__NVIC_GetPriorityGrouping>
 800536e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	6978      	ldr	r0, [r7, #20]
 8005376:	f7ff ffb1 	bl	80052dc <NVIC_EncodePriority>
 800537a:	4602      	mov	r2, r0
 800537c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005380:	4611      	mov	r1, r2
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff ff80 	bl	8005288 <__NVIC_SetPriority>
}
 8005388:	bf00      	nop
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800539a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff ff54 	bl	800524c <__NVIC_EnableIRQ>
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e014      	b.n	80053e8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	791b      	ldrb	r3, [r3, #4]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d105      	bne.n	80053d4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fb fa30 	bl	8000834 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005406:	d120      	bne.n	800544a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005416:	d118      	bne.n	800544a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2204      	movs	r2, #4
 800541c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005432:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005442:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f82d 	bl	80054a4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005458:	d120      	bne.n	800549c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005468:	d118      	bne.n	800549c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2204      	movs	r2, #4
 800546e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f043 0202 	orr.w	r2, r3, #2
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005484:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f85d 	bl	8005556 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	795b      	ldrb	r3, [r3, #5]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_DAC_ConfigChannel+0x18>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e03c      	b.n	800554a <HAL_DAC_ConfigChannel+0x92>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2202      	movs	r2, #2
 80054da:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43db      	mvns	r3, r3
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4013      	ands	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6819      	ldr	r1, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	22c0      	movs	r2, #192	; 0xc0
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43da      	mvns	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	400a      	ands	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
	...

0800556c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005578:	f7ff fa0c 	bl	8004994 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e099      	b.n	80056bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0201 	bic.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055a8:	e00f      	b.n	80055ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055aa:	f7ff f9f3 	bl	8004994 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	d908      	bls.n	80055ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2203      	movs	r2, #3
 80055c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e078      	b.n	80056bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e8      	bne.n	80055aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4b38      	ldr	r3, [pc, #224]	; (80056c4 <HAL_DMA_Init+0x158>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005602:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800560e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	2b04      	cmp	r3, #4
 8005622:	d107      	bne.n	8005634 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	4313      	orrs	r3, r2
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0307 	bic.w	r3, r3, #7
 800564a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	2b04      	cmp	r3, #4
 800565c:	d117      	bne.n	800568e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00e      	beq.n	800568e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f8bd 	bl	80057f0 <DMA_CheckFifoParam>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2240      	movs	r2, #64	; 0x40
 8005680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800568a:	2301      	movs	r3, #1
 800568c:	e016      	b.n	80056bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f874 	bl	8005784 <DMA_CalcBaseAndBitshift>
 800569c:	4603      	mov	r3, r0
 800569e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a4:	223f      	movs	r2, #63	; 0x3f
 80056a6:	409a      	lsls	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	f010803f 	.word	0xf010803f

080056c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e050      	b.n	800577c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d101      	bne.n	80056ea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
 80056e8:	e048      	b.n	800577c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0201 	bic.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2200      	movs	r2, #0
 8005708:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2200      	movs	r2, #0
 8005710:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2200      	movs	r2, #0
 8005718:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2221      	movs	r2, #33	; 0x21
 8005728:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f82a 	bl	8005784 <DMA_CalcBaseAndBitshift>
 8005730:	4603      	mov	r3, r0
 8005732:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005738:	223f      	movs	r2, #63	; 0x3f
 800573a:	409a      	lsls	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	3b10      	subs	r3, #16
 8005794:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <DMA_CalcBaseAndBitshift+0x60>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	091b      	lsrs	r3, r3, #4
 800579c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800579e:	4a12      	ldr	r2, [pc, #72]	; (80057e8 <DMA_CalcBaseAndBitshift+0x64>)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d908      	bls.n	80057c4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <DMA_CalcBaseAndBitshift+0x68>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	1d1a      	adds	r2, r3, #4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	659a      	str	r2, [r3, #88]	; 0x58
 80057c2:	e006      	b.n	80057d2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b08      	ldr	r3, [pc, #32]	; (80057ec <DMA_CalcBaseAndBitshift+0x68>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	aaaaaaab 	.word	0xaaaaaaab
 80057e8:	0804d158 	.word	0x0804d158
 80057ec:	fffffc00 	.word	0xfffffc00

080057f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d11f      	bne.n	800584a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b03      	cmp	r3, #3
 800580e:	d856      	bhi.n	80058be <DMA_CheckFifoParam+0xce>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <DMA_CheckFifoParam+0x28>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	08005829 	.word	0x08005829
 800581c:	0800583b 	.word	0x0800583b
 8005820:	08005829 	.word	0x08005829
 8005824:	080058bf 	.word	0x080058bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d046      	beq.n	80058c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005838:	e043      	b.n	80058c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005842:	d140      	bne.n	80058c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005848:	e03d      	b.n	80058c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005852:	d121      	bne.n	8005898 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b03      	cmp	r3, #3
 8005858:	d837      	bhi.n	80058ca <DMA_CheckFifoParam+0xda>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <DMA_CheckFifoParam+0x70>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005871 	.word	0x08005871
 8005864:	08005877 	.word	0x08005877
 8005868:	08005871 	.word	0x08005871
 800586c:	08005889 	.word	0x08005889
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
      break;
 8005874:	e030      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d025      	beq.n	80058ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005886:	e022      	b.n	80058ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005890:	d11f      	bne.n	80058d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005896:	e01c      	b.n	80058d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d903      	bls.n	80058a6 <DMA_CheckFifoParam+0xb6>
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d003      	beq.n	80058ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058a4:	e018      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
      break;
 80058aa:	e015      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00e      	beq.n	80058d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	e00b      	b.n	80058d6 <DMA_CheckFifoParam+0xe6>
      break;
 80058be:	bf00      	nop
 80058c0:	e00a      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;
 80058c2:	bf00      	nop
 80058c4:	e008      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;
 80058c6:	bf00      	nop
 80058c8:	e006      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;
 80058ca:	bf00      	nop
 80058cc:	e004      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;
 80058ce:	bf00      	nop
 80058d0:	e002      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80058d2:	bf00      	nop
 80058d4:	e000      	b.n	80058d8 <DMA_CheckFifoParam+0xe8>
      break;
 80058d6:	bf00      	nop
    }
  } 
  
  return status; 
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop

080058e8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e039      	b.n	800596e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fb f80a 	bl	8000928 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005938:	f023 0107 	bic.w	r1, r3, #7
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800594e:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <HAL_DMA2D_Init+0x90>)
 8005950:	4013      	ands	r3, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68d1      	ldr	r1, [r2, #12]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	430b      	orrs	r3, r1
 800595c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	ffffc000 	.word	0xffffc000

0800597c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_DMA2D_Start+0x1c>
 8005994:	2302      	movs	r3, #2
 8005996:	e018      	b.n	80059ca <HAL_DMA2D_Start+0x4e>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fa98 	bl	8005ee8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d056      	beq.n	8005a9c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ee:	f7fe ffd1 	bl	8004994 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059f4:	e04b      	b.n	8005a8e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d023      	beq.n	8005a50 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	f043 0202 	orr.w	r2, r3, #2
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2c:	f043 0201 	orr.w	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2221      	movs	r2, #33	; 0x21
 8005a3a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0a5      	b.n	8005b9c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d01a      	beq.n	8005a8e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a58:	f7fe ff9c 	bl	8004994 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d302      	bcc.n	8005a6e <HAL_DMA2D_PollForTransfer+0x9c>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10f      	bne.n	8005a8e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	f043 0220 	orr.w	r2, r3, #32
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2203      	movs	r2, #3
 8005a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e086      	b.n	8005b9c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0ac      	beq.n	80059f6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d061      	beq.n	8005b82 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005abe:	f7fe ff69 	bl	8004994 <HAL_GetTick>
 8005ac2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ac4:	e056      	b.n	8005b74 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d02e      	beq.n	8005b36 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae6:	f043 0204 	orr.w	r2, r3, #4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afc:	f043 0202 	orr.w	r2, r3, #2
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b12:	f043 0201 	orr.w	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2229      	movs	r2, #41	; 0x29
 8005b20:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2204      	movs	r2, #4
 8005b26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e032      	b.n	8005b9c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3c:	d01a      	beq.n	8005b74 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b3e:	f7fe ff29 	bl	8004994 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d302      	bcc.n	8005b54 <HAL_DMA2D_PollForTransfer+0x182>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10f      	bne.n	8005b74 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	f043 0220 	orr.w	r2, r3, #32
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2203      	movs	r2, #3
 8005b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e013      	b.n	8005b9c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 0310 	and.w	r3, r3, #16
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0a1      	beq.n	8005ac6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2212      	movs	r2, #18
 8005b88:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d026      	beq.n	8005c14 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d021      	beq.n	8005c14 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bde:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be4:	f043 0201 	orr.w	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d026      	beq.n	8005c6c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d021      	beq.n	8005c6c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c36:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c44:	f043 0202 	orr.w	r2, r3, #2
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2204      	movs	r2, #4
 8005c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 0308 	and.w	r3, r3, #8
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d026      	beq.n	8005cc4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d021      	beq.n	8005cc4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c8e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2208      	movs	r2, #8
 8005c96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9c:	f043 0204 	orr.w	r2, r3, #4
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d013      	beq.n	8005cf6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00e      	beq.n	8005cf6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2204      	movs	r2, #4
 8005cee:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f853 	bl	8005d9c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d024      	beq.n	8005d4a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01f      	beq.n	8005d4a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d18:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01f      	beq.n	8005d94 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d01a      	beq.n	8005d94 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d6c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2210      	movs	r2, #16
 8005d74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f80e 	bl	8005db0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_DMA2D_ConfigLayer+0x20>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e079      	b.n	8005ed8 <HAL_DMA2D_ConfigLayer+0x114>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	3318      	adds	r3, #24
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005e0e:	4b35      	ldr	r3, [pc, #212]	; (8005ee4 <HAL_DMA2D_ConfigLayer+0x120>)
 8005e10:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b0a      	cmp	r3, #10
 8005e18:	d003      	beq.n	8005e22 <HAL_DMA2D_ConfigLayer+0x5e>
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b09      	cmp	r3, #9
 8005e20:	d107      	bne.n	8005e32 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e005      	b.n	8005e3e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	061b      	lsls	r3, r3, #24
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d120      	bne.n	8005e86 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	ea02 0103 	and.w	r1, r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b0a      	cmp	r3, #10
 8005e6c:	d003      	beq.n	8005e76 <HAL_DMA2D_ConfigLayer+0xb2>
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b09      	cmp	r3, #9
 8005e74:	d127      	bne.n	8005ec6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005e82:	629a      	str	r2, [r3, #40]	; 0x28
 8005e84:	e01f      	b.n	8005ec6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	ea02 0103 	and.w	r1, r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b0a      	cmp	r3, #10
 8005eae:	d003      	beq.n	8005eb8 <HAL_DMA2D_ConfigLayer+0xf4>
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b09      	cmp	r3, #9
 8005eb6:	d106      	bne.n	8005ec6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005ec4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	ff03000f 	.word	0xff03000f

08005ee8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b08b      	sub	sp, #44	; 0x2c
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	041a      	lsls	r2, r3, #16
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	431a      	orrs	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f20:	d174      	bne.n	800600c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005f28:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f30:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f38:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d108      	bne.n	8005f5a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
 8005f58:	e053      	b.n	8006002 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d106      	bne.n	8005f70 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6e:	e048      	b.n	8006002 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d111      	bne.n	8005f9c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	0cdb      	lsrs	r3, r3, #19
 8005f7c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	0a9b      	lsrs	r3, r3, #10
 8005f82:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	08db      	lsrs	r3, r3, #3
 8005f88:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	02db      	lsls	r3, r3, #11
 8005f92:	4313      	orrs	r3, r2
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9a:	e032      	b.n	8006002 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d117      	bne.n	8005fd4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	0fdb      	lsrs	r3, r3, #31
 8005fa8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	0cdb      	lsrs	r3, r3, #19
 8005fae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	0adb      	lsrs	r3, r3, #11
 8005fb4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	08db      	lsrs	r3, r3, #3
 8005fba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	029b      	lsls	r3, r3, #10
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	03db      	lsls	r3, r3, #15
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd2:	e016      	b.n	8006002 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	0f1b      	lsrs	r3, r3, #28
 8005fd8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	0d1b      	lsrs	r3, r3, #20
 8005fde:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	0b1b      	lsrs	r3, r3, #12
 8005fe4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	011a      	lsls	r2, r3, #4
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	031b      	lsls	r3, r3, #12
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800600a:	e003      	b.n	8006014 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	60da      	str	r2, [r3, #12]
}
 8006014:	bf00      	nop
 8006016:	372c      	adds	r7, #44	; 0x2c
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	; 0x24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006036:	2300      	movs	r3, #0
 8006038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	e175      	b.n	800632c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006040:	2201      	movs	r2, #1
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4013      	ands	r3, r2
 8006052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	429a      	cmp	r2, r3
 800605a:	f040 8164 	bne.w	8006326 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b01      	cmp	r3, #1
 8006068:	d005      	beq.n	8006076 <HAL_GPIO_Init+0x56>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d130      	bne.n	80060d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	2203      	movs	r2, #3
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	43db      	mvns	r3, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4013      	ands	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4313      	orrs	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060ac:	2201      	movs	r2, #1
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	091b      	lsrs	r3, r3, #4
 80060c2:	f003 0201 	and.w	r2, r3, #1
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 0303 	and.w	r3, r3, #3
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d017      	beq.n	8006114 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	2203      	movs	r2, #3
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	43db      	mvns	r3, r3
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4013      	ands	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	4313      	orrs	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d123      	bne.n	8006168 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	08da      	lsrs	r2, r3, #3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3208      	adds	r2, #8
 8006128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	220f      	movs	r2, #15
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	43db      	mvns	r3, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4013      	ands	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	4313      	orrs	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	08da      	lsrs	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3208      	adds	r2, #8
 8006162:	69b9      	ldr	r1, [r7, #24]
 8006164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	2203      	movs	r2, #3
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	43db      	mvns	r3, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4013      	ands	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 0203 	and.w	r2, r3, #3
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4313      	orrs	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80be 	beq.w	8006326 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061aa:	4b66      	ldr	r3, [pc, #408]	; (8006344 <HAL_GPIO_Init+0x324>)
 80061ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ae:	4a65      	ldr	r2, [pc, #404]	; (8006344 <HAL_GPIO_Init+0x324>)
 80061b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061b4:	6453      	str	r3, [r2, #68]	; 0x44
 80061b6:	4b63      	ldr	r3, [pc, #396]	; (8006344 <HAL_GPIO_Init+0x324>)
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80061c2:	4a61      	ldr	r2, [pc, #388]	; (8006348 <HAL_GPIO_Init+0x328>)
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	089b      	lsrs	r3, r3, #2
 80061c8:	3302      	adds	r3, #2
 80061ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	220f      	movs	r2, #15
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	4013      	ands	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a58      	ldr	r2, [pc, #352]	; (800634c <HAL_GPIO_Init+0x32c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d037      	beq.n	800625e <HAL_GPIO_Init+0x23e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a57      	ldr	r2, [pc, #348]	; (8006350 <HAL_GPIO_Init+0x330>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d031      	beq.n	800625a <HAL_GPIO_Init+0x23a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a56      	ldr	r2, [pc, #344]	; (8006354 <HAL_GPIO_Init+0x334>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d02b      	beq.n	8006256 <HAL_GPIO_Init+0x236>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a55      	ldr	r2, [pc, #340]	; (8006358 <HAL_GPIO_Init+0x338>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d025      	beq.n	8006252 <HAL_GPIO_Init+0x232>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a54      	ldr	r2, [pc, #336]	; (800635c <HAL_GPIO_Init+0x33c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d01f      	beq.n	800624e <HAL_GPIO_Init+0x22e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a53      	ldr	r2, [pc, #332]	; (8006360 <HAL_GPIO_Init+0x340>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d019      	beq.n	800624a <HAL_GPIO_Init+0x22a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a52      	ldr	r2, [pc, #328]	; (8006364 <HAL_GPIO_Init+0x344>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_GPIO_Init+0x226>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a51      	ldr	r2, [pc, #324]	; (8006368 <HAL_GPIO_Init+0x348>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00d      	beq.n	8006242 <HAL_GPIO_Init+0x222>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a50      	ldr	r2, [pc, #320]	; (800636c <HAL_GPIO_Init+0x34c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <HAL_GPIO_Init+0x21e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a4f      	ldr	r2, [pc, #316]	; (8006370 <HAL_GPIO_Init+0x350>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d101      	bne.n	800623a <HAL_GPIO_Init+0x21a>
 8006236:	2309      	movs	r3, #9
 8006238:	e012      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800623a:	230a      	movs	r3, #10
 800623c:	e010      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800623e:	2308      	movs	r3, #8
 8006240:	e00e      	b.n	8006260 <HAL_GPIO_Init+0x240>
 8006242:	2307      	movs	r3, #7
 8006244:	e00c      	b.n	8006260 <HAL_GPIO_Init+0x240>
 8006246:	2306      	movs	r3, #6
 8006248:	e00a      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800624a:	2305      	movs	r3, #5
 800624c:	e008      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800624e:	2304      	movs	r3, #4
 8006250:	e006      	b.n	8006260 <HAL_GPIO_Init+0x240>
 8006252:	2303      	movs	r3, #3
 8006254:	e004      	b.n	8006260 <HAL_GPIO_Init+0x240>
 8006256:	2302      	movs	r3, #2
 8006258:	e002      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800625e:	2300      	movs	r3, #0
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	f002 0203 	and.w	r2, r2, #3
 8006266:	0092      	lsls	r2, r2, #2
 8006268:	4093      	lsls	r3, r2
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4313      	orrs	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006270:	4935      	ldr	r1, [pc, #212]	; (8006348 <HAL_GPIO_Init+0x328>)
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	089b      	lsrs	r3, r3, #2
 8006276:	3302      	adds	r3, #2
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800627e:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <HAL_GPIO_Init+0x354>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	43db      	mvns	r3, r3
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	4013      	ands	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062a2:	4a34      	ldr	r2, [pc, #208]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062a8:	4b32      	ldr	r3, [pc, #200]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	43db      	mvns	r3, r3
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4013      	ands	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062cc:	4a29      	ldr	r2, [pc, #164]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062d2:	4b28      	ldr	r3, [pc, #160]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	43db      	mvns	r3, r3
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	4013      	ands	r3, r2
 80062e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062f6:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062fc:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	43db      	mvns	r3, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4013      	ands	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006320:	4a14      	ldr	r2, [pc, #80]	; (8006374 <HAL_GPIO_Init+0x354>)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	3301      	adds	r3, #1
 800632a:	61fb      	str	r3, [r7, #28]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	f67f ae86 	bls.w	8006040 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	3724      	adds	r7, #36	; 0x24
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800
 8006348:	40013800 	.word	0x40013800
 800634c:	40020000 	.word	0x40020000
 8006350:	40020400 	.word	0x40020400
 8006354:	40020800 	.word	0x40020800
 8006358:	40020c00 	.word	0x40020c00
 800635c:	40021000 	.word	0x40021000
 8006360:	40021400 	.word	0x40021400
 8006364:	40021800 	.word	0x40021800
 8006368:	40021c00 	.word	0x40021c00
 800636c:	40022000 	.word	0x40022000
 8006370:	40022400 	.word	0x40022400
 8006374:	40013c00 	.word	0x40013c00

08006378 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e0d9      	b.n	8006548 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006394:	2201      	movs	r2, #1
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4013      	ands	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	f040 80c9 	bne.w	8006542 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80063b0:	4a6b      	ldr	r2, [pc, #428]	; (8006560 <HAL_GPIO_DeInit+0x1e8>)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	089b      	lsrs	r3, r3, #2
 80063b6:	3302      	adds	r3, #2
 80063b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063bc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f003 0303 	and.w	r3, r3, #3
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	220f      	movs	r2, #15
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	4013      	ands	r3, r2
 80063d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a63      	ldr	r2, [pc, #396]	; (8006564 <HAL_GPIO_DeInit+0x1ec>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d037      	beq.n	800644a <HAL_GPIO_DeInit+0xd2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a62      	ldr	r2, [pc, #392]	; (8006568 <HAL_GPIO_DeInit+0x1f0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d031      	beq.n	8006446 <HAL_GPIO_DeInit+0xce>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a61      	ldr	r2, [pc, #388]	; (800656c <HAL_GPIO_DeInit+0x1f4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d02b      	beq.n	8006442 <HAL_GPIO_DeInit+0xca>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a60      	ldr	r2, [pc, #384]	; (8006570 <HAL_GPIO_DeInit+0x1f8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d025      	beq.n	800643e <HAL_GPIO_DeInit+0xc6>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a5f      	ldr	r2, [pc, #380]	; (8006574 <HAL_GPIO_DeInit+0x1fc>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01f      	beq.n	800643a <HAL_GPIO_DeInit+0xc2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a5e      	ldr	r2, [pc, #376]	; (8006578 <HAL_GPIO_DeInit+0x200>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d019      	beq.n	8006436 <HAL_GPIO_DeInit+0xbe>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a5d      	ldr	r2, [pc, #372]	; (800657c <HAL_GPIO_DeInit+0x204>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <HAL_GPIO_DeInit+0xba>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a5c      	ldr	r2, [pc, #368]	; (8006580 <HAL_GPIO_DeInit+0x208>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00d      	beq.n	800642e <HAL_GPIO_DeInit+0xb6>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a5b      	ldr	r2, [pc, #364]	; (8006584 <HAL_GPIO_DeInit+0x20c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <HAL_GPIO_DeInit+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a5a      	ldr	r2, [pc, #360]	; (8006588 <HAL_GPIO_DeInit+0x210>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d101      	bne.n	8006426 <HAL_GPIO_DeInit+0xae>
 8006422:	2309      	movs	r3, #9
 8006424:	e012      	b.n	800644c <HAL_GPIO_DeInit+0xd4>
 8006426:	230a      	movs	r3, #10
 8006428:	e010      	b.n	800644c <HAL_GPIO_DeInit+0xd4>
 800642a:	2308      	movs	r3, #8
 800642c:	e00e      	b.n	800644c <HAL_GPIO_DeInit+0xd4>
 800642e:	2307      	movs	r3, #7
 8006430:	e00c      	b.n	800644c <HAL_GPIO_DeInit+0xd4>
 8006432:	2306      	movs	r3, #6
 8006434:	e00a      	b.n	800644c <HAL_GPIO_DeInit+0xd4>
 8006436:	2305      	movs	r3, #5
 8006438:	e008      	b.n	800644c <HAL_GPIO_DeInit+0xd4>
 800643a:	2304      	movs	r3, #4
 800643c:	e006      	b.n	800644c <HAL_GPIO_DeInit+0xd4>
 800643e:	2303      	movs	r3, #3
 8006440:	e004      	b.n	800644c <HAL_GPIO_DeInit+0xd4>
 8006442:	2302      	movs	r3, #2
 8006444:	e002      	b.n	800644c <HAL_GPIO_DeInit+0xd4>
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_GPIO_DeInit+0xd4>
 800644a:	2300      	movs	r3, #0
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	f002 0203 	and.w	r2, r2, #3
 8006452:	0092      	lsls	r2, r2, #2
 8006454:	4093      	lsls	r3, r2
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	429a      	cmp	r2, r3
 800645a:	d132      	bne.n	80064c2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800645c:	4b4b      	ldr	r3, [pc, #300]	; (800658c <HAL_GPIO_DeInit+0x214>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	43db      	mvns	r3, r3
 8006464:	4949      	ldr	r1, [pc, #292]	; (800658c <HAL_GPIO_DeInit+0x214>)
 8006466:	4013      	ands	r3, r2
 8006468:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800646a:	4b48      	ldr	r3, [pc, #288]	; (800658c <HAL_GPIO_DeInit+0x214>)
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	43db      	mvns	r3, r3
 8006472:	4946      	ldr	r1, [pc, #280]	; (800658c <HAL_GPIO_DeInit+0x214>)
 8006474:	4013      	ands	r3, r2
 8006476:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006478:	4b44      	ldr	r3, [pc, #272]	; (800658c <HAL_GPIO_DeInit+0x214>)
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	43db      	mvns	r3, r3
 8006480:	4942      	ldr	r1, [pc, #264]	; (800658c <HAL_GPIO_DeInit+0x214>)
 8006482:	4013      	ands	r3, r2
 8006484:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006486:	4b41      	ldr	r3, [pc, #260]	; (800658c <HAL_GPIO_DeInit+0x214>)
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	43db      	mvns	r3, r3
 800648e:	493f      	ldr	r1, [pc, #252]	; (800658c <HAL_GPIO_DeInit+0x214>)
 8006490:	4013      	ands	r3, r2
 8006492:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	220f      	movs	r2, #15
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80064a4:	4a2e      	ldr	r2, [pc, #184]	; (8006560 <HAL_GPIO_DeInit+0x1e8>)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	089b      	lsrs	r3, r3, #2
 80064aa:	3302      	adds	r3, #2
 80064ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	43da      	mvns	r2, r3
 80064b4:	482a      	ldr	r0, [pc, #168]	; (8006560 <HAL_GPIO_DeInit+0x1e8>)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	089b      	lsrs	r3, r3, #2
 80064ba:	400a      	ands	r2, r1
 80064bc:	3302      	adds	r3, #2
 80064be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	2103      	movs	r1, #3
 80064cc:	fa01 f303 	lsl.w	r3, r1, r3
 80064d0:	43db      	mvns	r3, r3
 80064d2:	401a      	ands	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	08da      	lsrs	r2, r3, #3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3208      	adds	r2, #8
 80064e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	220f      	movs	r2, #15
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	08d2      	lsrs	r2, r2, #3
 80064f8:	4019      	ands	r1, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3208      	adds	r2, #8
 80064fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	2103      	movs	r1, #3
 800650c:	fa01 f303 	lsl.w	r3, r1, r3
 8006510:	43db      	mvns	r3, r3
 8006512:	401a      	ands	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	2101      	movs	r1, #1
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	fa01 f303 	lsl.w	r3, r1, r3
 8006524:	43db      	mvns	r3, r3
 8006526:	401a      	ands	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	2103      	movs	r1, #3
 8006536:	fa01 f303 	lsl.w	r3, r1, r3
 800653a:	43db      	mvns	r3, r3
 800653c:	401a      	ands	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	3301      	adds	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b0f      	cmp	r3, #15
 800654c:	f67f af22 	bls.w	8006394 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40013800 	.word	0x40013800
 8006564:	40020000 	.word	0x40020000
 8006568:	40020400 	.word	0x40020400
 800656c:	40020800 	.word	0x40020800
 8006570:	40020c00 	.word	0x40020c00
 8006574:	40021000 	.word	0x40021000
 8006578:	40021400 	.word	0x40021400
 800657c:	40021800 	.word	0x40021800
 8006580:	40021c00 	.word	0x40021c00
 8006584:	40022000 	.word	0x40022000
 8006588:	40022400 	.word	0x40022400
 800658c:	40013c00 	.word	0x40013c00

08006590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	887b      	ldrh	r3, [r7, #2]
 80065a2:	4013      	ands	r3, r2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065a8:	2301      	movs	r3, #1
 80065aa:	73fb      	strb	r3, [r7, #15]
 80065ac:	e001      	b.n	80065b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	807b      	strh	r3, [r7, #2]
 80065cc:	4613      	mov	r3, r2
 80065ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065d0:	787b      	ldrb	r3, [r7, #1]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065d6:	887a      	ldrh	r2, [r7, #2]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80065dc:	e003      	b.n	80065e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80065de:	887b      	ldrh	r3, [r7, #2]
 80065e0:	041a      	lsls	r2, r3, #16
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	619a      	str	r2, [r3, #24]
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
	...

080065f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e07f      	b.n	8006706 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb f876 	bl	800170c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2224      	movs	r2, #36	; 0x24
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0201 	bic.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006644:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006654:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d107      	bne.n	800666e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	e006      	b.n	800667c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800667a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d104      	bne.n	800668e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800668c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <HAL_I2C_Init+0x11c>)
 800669a:	430b      	orrs	r3, r1
 800669c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	69d9      	ldr	r1, [r3, #28]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1a      	ldr	r2, [r3, #32]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	02008000 	.word	0x02008000

08006714 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e021      	b.n	800676a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2224      	movs	r2, #36	; 0x24
 800672a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0201 	bic.w	r2, r2, #1
 800673c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fb f88c 	bl	800185c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	4608      	mov	r0, r1
 800677e:	4611      	mov	r1, r2
 8006780:	461a      	mov	r2, r3
 8006782:	4603      	mov	r3, r0
 8006784:	817b      	strh	r3, [r7, #10]
 8006786:	460b      	mov	r3, r1
 8006788:	813b      	strh	r3, [r7, #8]
 800678a:	4613      	mov	r3, r2
 800678c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b20      	cmp	r3, #32
 8006798:	f040 80f9 	bne.w	800698e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_I2C_Mem_Write+0x34>
 80067a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0ed      	b.n	8006990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_I2C_Mem_Write+0x4e>
 80067be:	2302      	movs	r3, #2
 80067c0:	e0e6      	b.n	8006990 <HAL_I2C_Mem_Write+0x21c>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067ca:	f7fe f8e3 	bl	8004994 <HAL_GetTick>
 80067ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	2319      	movs	r3, #25
 80067d6:	2201      	movs	r2, #1
 80067d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fad1 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e0d1      	b.n	8006990 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2221      	movs	r2, #33	; 0x21
 80067f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2240      	movs	r2, #64	; 0x40
 80067f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a3a      	ldr	r2, [r7, #32]
 8006806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800680c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006814:	88f8      	ldrh	r0, [r7, #6]
 8006816:	893a      	ldrh	r2, [r7, #8]
 8006818:	8979      	ldrh	r1, [r7, #10]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	4603      	mov	r3, r0
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f9e1 	bl	8006bec <I2C_RequestMemoryWrite>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e0a9      	b.n	8006990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006840:	b29b      	uxth	r3, r3
 8006842:	2bff      	cmp	r3, #255	; 0xff
 8006844:	d90e      	bls.n	8006864 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	22ff      	movs	r2, #255	; 0xff
 800684a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006850:	b2da      	uxtb	r2, r3
 8006852:	8979      	ldrh	r1, [r7, #10]
 8006854:	2300      	movs	r3, #0
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fc2d 	bl	80070bc <I2C_TransferConfig>
 8006862:	e00f      	b.n	8006884 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006872:	b2da      	uxtb	r2, r3
 8006874:	8979      	ldrh	r1, [r7, #10]
 8006876:	2300      	movs	r3, #0
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 fc1c 	bl	80070bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 fabb 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e07b      	b.n	8006990 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d034      	beq.n	800693c <HAL_I2C_Mem_Write+0x1c8>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d130      	bne.n	800693c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	2200      	movs	r2, #0
 80068e2:	2180      	movs	r1, #128	; 0x80
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 fa4d 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e04d      	b.n	8006990 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2bff      	cmp	r3, #255	; 0xff
 80068fc:	d90e      	bls.n	800691c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	22ff      	movs	r2, #255	; 0xff
 8006902:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006908:	b2da      	uxtb	r2, r3
 800690a:	8979      	ldrh	r1, [r7, #10]
 800690c:	2300      	movs	r3, #0
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fbd1 	bl	80070bc <I2C_TransferConfig>
 800691a:	e00f      	b.n	800693c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692a:	b2da      	uxtb	r2, r3
 800692c:	8979      	ldrh	r1, [r7, #10]
 800692e:	2300      	movs	r3, #0
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fbc0 	bl	80070bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d19e      	bne.n	8006884 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 fa9a 	bl	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e01a      	b.n	8006990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2220      	movs	r2, #32
 8006960:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6859      	ldr	r1, [r3, #4]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <HAL_I2C_Mem_Write+0x224>)
 800696e:	400b      	ands	r3, r1
 8006970:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	e000      	b.n	8006990 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800698e:	2302      	movs	r3, #2
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	fe00e800 	.word	0xfe00e800

0800699c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	817b      	strh	r3, [r7, #10]
 80069ae:	460b      	mov	r3, r1
 80069b0:	813b      	strh	r3, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b20      	cmp	r3, #32
 80069c0:	f040 80fd 	bne.w	8006bbe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <HAL_I2C_Mem_Read+0x34>
 80069ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0f1      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_I2C_Mem_Read+0x4e>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e0ea      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x224>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069f2:	f7fd ffcf 	bl	8004994 <HAL_GetTick>
 80069f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	2319      	movs	r3, #25
 80069fe:	2201      	movs	r2, #1
 8006a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f9bd 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e0d5      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2222      	movs	r2, #34	; 0x22
 8006a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2240      	movs	r2, #64	; 0x40
 8006a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a3a      	ldr	r2, [r7, #32]
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a3c:	88f8      	ldrh	r0, [r7, #6]
 8006a3e:	893a      	ldrh	r2, [r7, #8]
 8006a40:	8979      	ldrh	r1, [r7, #10]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f921 	bl	8006c94 <I2C_RequestMemoryRead>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e0ad      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2bff      	cmp	r3, #255	; 0xff
 8006a6c:	d90e      	bls.n	8006a8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	22ff      	movs	r2, #255	; 0xff
 8006a72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	8979      	ldrh	r1, [r7, #10]
 8006a7c:	4b52      	ldr	r3, [pc, #328]	; (8006bc8 <HAL_I2C_Mem_Read+0x22c>)
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fb19 	bl	80070bc <I2C_TransferConfig>
 8006a8a:	e00f      	b.n	8006aac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	8979      	ldrh	r1, [r7, #10]
 8006a9e:	4b4a      	ldr	r3, [pc, #296]	; (8006bc8 <HAL_I2C_Mem_Read+0x22c>)
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 fb08 	bl	80070bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2104      	movs	r1, #4
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f964 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e07c      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d034      	beq.n	8006b6c <HAL_I2C_Mem_Read+0x1d0>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d130      	bne.n	8006b6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	2200      	movs	r2, #0
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f935 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e04d      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2bff      	cmp	r3, #255	; 0xff
 8006b2c:	d90e      	bls.n	8006b4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	22ff      	movs	r2, #255	; 0xff
 8006b32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	8979      	ldrh	r1, [r7, #10]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 fab9 	bl	80070bc <I2C_TransferConfig>
 8006b4a:	e00f      	b.n	8006b6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	8979      	ldrh	r1, [r7, #10]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 faa8 	bl	80070bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d19a      	bne.n	8006aac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 f982 	bl	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e01a      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6859      	ldr	r1, [r3, #4]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <HAL_I2C_Mem_Read+0x230>)
 8006b9e:	400b      	ands	r3, r1
 8006ba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e000      	b.n	8006bc0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006bbe:	2302      	movs	r3, #2
  }
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	80002400 	.word	0x80002400
 8006bcc:	fe00e800 	.word	0xfe00e800

08006bd0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bde:	b2db      	uxtb	r3, r3
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	817b      	strh	r3, [r7, #10]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	813b      	strh	r3, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	8979      	ldrh	r1, [r7, #10]
 8006c0c:	4b20      	ldr	r3, [pc, #128]	; (8006c90 <I2C_RequestMemoryWrite+0xa4>)
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fa51 	bl	80070bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	69b9      	ldr	r1, [r7, #24]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f8f0 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e02c      	b.n	8006c88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d105      	bne.n	8006c40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c34:	893b      	ldrh	r3, [r7, #8]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	629a      	str	r2, [r3, #40]	; 0x28
 8006c3e:	e015      	b.n	8006c6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c40:	893b      	ldrh	r3, [r7, #8]
 8006c42:	0a1b      	lsrs	r3, r3, #8
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	69b9      	ldr	r1, [r7, #24]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f8d6 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e012      	b.n	8006c88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c62:	893b      	ldrh	r3, [r7, #8]
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2200      	movs	r2, #0
 8006c74:	2180      	movs	r1, #128	; 0x80
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f884 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	80002000 	.word	0x80002000

08006c94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	817b      	strh	r3, [r7, #10]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	813b      	strh	r3, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	8979      	ldrh	r1, [r7, #10]
 8006cb4:	4b20      	ldr	r3, [pc, #128]	; (8006d38 <I2C_RequestMemoryRead+0xa4>)
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 f9fe 	bl	80070bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	69b9      	ldr	r1, [r7, #24]
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 f89d 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e02c      	b.n	8006d2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cd4:	88fb      	ldrh	r3, [r7, #6]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d105      	bne.n	8006ce6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cda:	893b      	ldrh	r3, [r7, #8]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ce4:	e015      	b.n	8006d12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ce6:	893b      	ldrh	r3, [r7, #8]
 8006ce8:	0a1b      	lsrs	r3, r3, #8
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	69b9      	ldr	r1, [r7, #24]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f883 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e012      	b.n	8006d2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d08:	893b      	ldrh	r3, [r7, #8]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2140      	movs	r1, #64	; 0x40
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f831 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	80002000 	.word	0x80002000

08006d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d103      	bne.n	8006d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2200      	movs	r2, #0
 8006d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d007      	beq.n	8006d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	619a      	str	r2, [r3, #24]
  }
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	4613      	mov	r3, r2
 8006d92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d94:	e022      	b.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d01e      	beq.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9e:	f7fd fdf9 	bl	8004994 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d302      	bcc.n	8006db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d113      	bne.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e00f      	b.n	8006dfc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4013      	ands	r3, r2
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d0cd      	beq.n	8006d96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e10:	e02c      	b.n	8006e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 f870 	bl	8006efc <I2C_IsErrorOccurred>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e02a      	b.n	8006e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2c:	d01e      	beq.n	8006e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2e:	f7fd fdb1 	bl	8004994 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d302      	bcc.n	8006e44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d113      	bne.n	8006e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	f043 0220 	orr.w	r2, r3, #32
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e007      	b.n	8006e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d1cb      	bne.n	8006e12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e90:	e028      	b.n	8006ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f830 	bl	8006efc <I2C_IsErrorOccurred>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e026      	b.n	8006ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fd fd75 	bl	8004994 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d113      	bne.n	8006ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e007      	b.n	8006ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d1cf      	bne.n	8006e92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	; 0x28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d068      	beq.n	8006ffa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2210      	movs	r2, #16
 8006f2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f30:	e049      	b.n	8006fc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d045      	beq.n	8006fc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f3a:	f7fd fd2b 	bl	8004994 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <I2C_IsErrorOccurred+0x54>
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d13a      	bne.n	8006fc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f72:	d121      	bne.n	8006fb8 <I2C_IsErrorOccurred+0xbc>
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f7a:	d01d      	beq.n	8006fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f7c:	7cfb      	ldrb	r3, [r7, #19]
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d01a      	beq.n	8006fb8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f92:	f7fd fcff 	bl	8004994 <HAL_GetTick>
 8006f96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f98:	e00e      	b.n	8006fb8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f9a:	f7fd fcfb 	bl	8004994 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b19      	cmp	r3, #25
 8006fa6:	d907      	bls.n	8006fb8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	f043 0320 	orr.w	r3, r3, #32
 8006fae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006fb6:	e006      	b.n	8006fc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	d1e9      	bne.n	8006f9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	d003      	beq.n	8006fdc <I2C_IsErrorOccurred+0xe0>
 8006fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0aa      	beq.n	8006f32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d103      	bne.n	8006fec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	f043 0304 	orr.w	r3, r3, #4
 8006ff2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800701c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00b      	beq.n	8007046 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	f043 0308 	orr.w	r3, r3, #8
 8007034:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800703e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00b      	beq.n	8007068 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	f043 0302 	orr.w	r3, r3, #2
 8007056:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01c      	beq.n	80070aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff fe63 	bl	8006d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6859      	ldr	r1, [r3, #4]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <I2C_IsErrorOccurred+0x1bc>)
 8007082:	400b      	ands	r3, r1
 8007084:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	431a      	orrs	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80070aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3728      	adds	r7, #40	; 0x28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	fe00e800 	.word	0xfe00e800

080070bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	607b      	str	r3, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	817b      	strh	r3, [r7, #10]
 80070ca:	4613      	mov	r3, r2
 80070cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070ce:	897b      	ldrh	r3, [r7, #10]
 80070d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070d4:	7a7b      	ldrb	r3, [r7, #9]
 80070d6:	041b      	lsls	r3, r3, #16
 80070d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	0d5b      	lsrs	r3, r3, #21
 80070f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80070fa:	4b08      	ldr	r3, [pc, #32]	; (800711c <I2C_TransferConfig+0x60>)
 80070fc:	430b      	orrs	r3, r1
 80070fe:	43db      	mvns	r3, r3
 8007100:	ea02 0103 	and.w	r1, r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	430a      	orrs	r2, r1
 800710c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800710e:	bf00      	nop
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	03ff63ff 	.word	0x03ff63ff

08007120 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b20      	cmp	r3, #32
 8007134:	d138      	bne.n	80071a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007140:	2302      	movs	r3, #2
 8007142:	e032      	b.n	80071aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2224      	movs	r2, #36	; 0x24
 8007150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0201 	bic.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007172:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6819      	ldr	r1, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	e000      	b.n	80071aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071a8:	2302      	movs	r3, #2
  }
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	d139      	bne.n	8007240 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e033      	b.n	8007242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2224      	movs	r2, #36	; 0x24
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007208:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	021b      	lsls	r3, r3, #8
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	e000      	b.n	8007242 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007240:	2302      	movs	r3, #2
  }
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e0bf      	b.n	80073e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7fa fbae 	bl	80019d8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007292:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6999      	ldr	r1, [r3, #24]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6899      	ldr	r1, [r3, #8]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4b4a      	ldr	r3, [pc, #296]	; (80073ec <HAL_LTDC_Init+0x19c>)
 80072c4:	400b      	ands	r3, r1
 80072c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6899      	ldr	r1, [r3, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68d9      	ldr	r1, [r3, #12]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	4b3e      	ldr	r3, [pc, #248]	; (80073ec <HAL_LTDC_Init+0x19c>)
 80072f2:	400b      	ands	r3, r1
 80072f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68d9      	ldr	r1, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1a      	ldr	r2, [r3, #32]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6919      	ldr	r1, [r3, #16]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b33      	ldr	r3, [pc, #204]	; (80073ec <HAL_LTDC_Init+0x19c>)
 8007320:	400b      	ands	r3, r1
 8007322:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	041b      	lsls	r3, r3, #16
 800732a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6919      	ldr	r1, [r3, #16]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6959      	ldr	r1, [r3, #20]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	4b27      	ldr	r3, [pc, #156]	; (80073ec <HAL_LTDC_Init+0x19c>)
 800734e:	400b      	ands	r3, r1
 8007350:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6959      	ldr	r1, [r3, #20]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007380:	041b      	lsls	r3, r3, #16
 8007382:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007392:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0206 	orr.w	r2, r2, #6
 80073be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	f000f800 	.word	0xf000f800

080073f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007406:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f003 0304 	and.w	r3, r3, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	d023      	beq.n	800745a <HAL_LTDC_IRQHandler+0x6a>
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01e      	beq.n	800745a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0204 	bic.w	r2, r2, #4
 800742a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2204      	movs	r2, #4
 8007432:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800743a:	f043 0201 	orr.w	r2, r3, #1
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2204      	movs	r2, #4
 8007448:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f86f 	bl	8007538 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d023      	beq.n	80074ac <HAL_LTDC_IRQHandler+0xbc>
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d01e      	beq.n	80074ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0202 	bic.w	r2, r2, #2
 800747c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2202      	movs	r2, #2
 8007484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800748c:	f043 0202 	orr.w	r2, r3, #2
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2204      	movs	r2, #4
 800749a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f846 	bl	8007538 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d01b      	beq.n	80074ee <HAL_LTDC_IRQHandler+0xfe>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d016      	beq.n	80074ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0201 	bic.w	r2, r2, #1
 80074ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2201      	movs	r2, #1
 80074d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f82f 	bl	800754c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01b      	beq.n	8007530 <HAL_LTDC_IRQHandler+0x140>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d016      	beq.n	8007530 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0208 	bic.w	r2, r2, #8
 8007510:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2208      	movs	r2, #8
 8007518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f818 	bl	8007560 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007574:	b5b0      	push	{r4, r5, r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007586:	2b01      	cmp	r3, #1
 8007588:	d101      	bne.n	800758e <HAL_LTDC_ConfigLayer+0x1a>
 800758a:	2302      	movs	r3, #2
 800758c:	e02c      	b.n	80075e8 <HAL_LTDC_ConfigLayer+0x74>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2202      	movs	r2, #2
 800759a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2134      	movs	r1, #52	; 0x34
 80075a4:	fb01 f303 	mul.w	r3, r1, r3
 80075a8:	4413      	add	r3, r2
 80075aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4614      	mov	r4, r2
 80075b2:	461d      	mov	r5, r3
 80075b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f81f 	bl	800760c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2201      	movs	r2, #1
 80075d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bdb0      	pop	{r4, r5, r7, pc}

080075f0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80075fe:	b2db      	uxtb	r3, r3
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800760c:	b480      	push	{r7}
 800760e:	b089      	sub	sp, #36	; 0x24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	0c1b      	lsrs	r3, r3, #16
 8007624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007628:	4413      	add	r3, r2
 800762a:	041b      	lsls	r3, r3, #16
 800762c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	4413      	add	r3, r2
 800763a:	3384      	adds	r3, #132	; 0x84
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	6812      	ldr	r2, [r2, #0]
 8007642:	4611      	mov	r1, r2
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	01d2      	lsls	r2, r2, #7
 8007648:	440a      	add	r2, r1
 800764a:	3284      	adds	r2, #132	; 0x84
 800764c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007650:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	0c1b      	lsrs	r3, r3, #16
 800765e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007662:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007664:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4619      	mov	r1, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	01db      	lsls	r3, r3, #7
 8007670:	440b      	add	r3, r1
 8007672:	3384      	adds	r3, #132	; 0x84
 8007674:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800767a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800768a:	4413      	add	r3, r2
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	01db      	lsls	r3, r3, #7
 800769a:	4413      	add	r3, r2
 800769c:	3384      	adds	r3, #132	; 0x84
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	6812      	ldr	r2, [r2, #0]
 80076a4:	4611      	mov	r1, r2
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	01d2      	lsls	r2, r2, #7
 80076aa:	440a      	add	r2, r1
 80076ac:	3284      	adds	r2, #132	; 0x84
 80076ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80076b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076c2:	4413      	add	r3, r2
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4619      	mov	r1, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	01db      	lsls	r3, r3, #7
 80076d0:	440b      	add	r3, r1
 80076d2:	3384      	adds	r3, #132	; 0x84
 80076d4:	4619      	mov	r1, r3
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	4313      	orrs	r3, r2
 80076da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	01db      	lsls	r3, r3, #7
 80076e6:	4413      	add	r3, r2
 80076e8:	3384      	adds	r3, #132	; 0x84
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	6812      	ldr	r2, [r2, #0]
 80076f0:	4611      	mov	r1, r2
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	01d2      	lsls	r2, r2, #7
 80076f6:	440a      	add	r2, r1
 80076f8:	3284      	adds	r2, #132	; 0x84
 80076fa:	f023 0307 	bic.w	r3, r3, #7
 80076fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	01db      	lsls	r3, r3, #7
 800770a:	4413      	add	r3, r2
 800770c:	3384      	adds	r3, #132	; 0x84
 800770e:	461a      	mov	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800771c:	021b      	lsls	r3, r3, #8
 800771e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007726:	041b      	lsls	r3, r3, #16
 8007728:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	061b      	lsls	r3, r3, #24
 8007730:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	01db      	lsls	r3, r3, #7
 800773c:	4413      	add	r3, r2
 800773e:	3384      	adds	r3, #132	; 0x84
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	01db      	lsls	r3, r3, #7
 800774c:	4413      	add	r3, r2
 800774e:	3384      	adds	r3, #132	; 0x84
 8007750:	461a      	mov	r2, r3
 8007752:	2300      	movs	r3, #0
 8007754:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800775c:	461a      	mov	r2, r3
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	431a      	orrs	r2, r3
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	431a      	orrs	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4619      	mov	r1, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	01db      	lsls	r3, r3, #7
 8007770:	440b      	add	r3, r1
 8007772:	3384      	adds	r3, #132	; 0x84
 8007774:	4619      	mov	r1, r3
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	4313      	orrs	r3, r2
 800777a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	01db      	lsls	r3, r3, #7
 8007786:	4413      	add	r3, r2
 8007788:	3384      	adds	r3, #132	; 0x84
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	4611      	mov	r1, r2
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	01d2      	lsls	r2, r2, #7
 8007796:	440a      	add	r2, r1
 8007798:	3284      	adds	r2, #132	; 0x84
 800779a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800779e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	01db      	lsls	r3, r3, #7
 80077aa:	4413      	add	r3, r2
 80077ac:	3384      	adds	r3, #132	; 0x84
 80077ae:	461a      	mov	r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	01db      	lsls	r3, r3, #7
 80077c0:	4413      	add	r3, r2
 80077c2:	3384      	adds	r3, #132	; 0x84
 80077c4:	69da      	ldr	r2, [r3, #28]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4619      	mov	r1, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	01db      	lsls	r3, r3, #7
 80077d0:	440b      	add	r3, r1
 80077d2:	3384      	adds	r3, #132	; 0x84
 80077d4:	4619      	mov	r1, r3
 80077d6:	4b58      	ldr	r3, [pc, #352]	; (8007938 <LTDC_SetConfig+0x32c>)
 80077d8:	4013      	ands	r3, r2
 80077da:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	68f9      	ldr	r1, [r7, #12]
 80077e6:	6809      	ldr	r1, [r1, #0]
 80077e8:	4608      	mov	r0, r1
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	01c9      	lsls	r1, r1, #7
 80077ee:	4401      	add	r1, r0
 80077f0:	3184      	adds	r1, #132	; 0x84
 80077f2:	4313      	orrs	r3, r2
 80077f4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	01db      	lsls	r3, r3, #7
 8007800:	4413      	add	r3, r2
 8007802:	3384      	adds	r3, #132	; 0x84
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	01db      	lsls	r3, r3, #7
 8007810:	4413      	add	r3, r2
 8007812:	3384      	adds	r3, #132	; 0x84
 8007814:	461a      	mov	r2, r3
 8007816:	2300      	movs	r3, #0
 8007818:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	01db      	lsls	r3, r3, #7
 8007824:	4413      	add	r3, r2
 8007826:	3384      	adds	r3, #132	; 0x84
 8007828:	461a      	mov	r2, r3
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007838:	2304      	movs	r3, #4
 800783a:	61fb      	str	r3, [r7, #28]
 800783c:	e01b      	b.n	8007876 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d102      	bne.n	800784c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007846:	2303      	movs	r3, #3
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	e014      	b.n	8007876 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b04      	cmp	r3, #4
 8007852:	d00b      	beq.n	800786c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007858:	2b02      	cmp	r3, #2
 800785a:	d007      	beq.n	800786c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007860:	2b03      	cmp	r3, #3
 8007862:	d003      	beq.n	800786c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007868:	2b07      	cmp	r3, #7
 800786a:	d102      	bne.n	8007872 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800786c:	2302      	movs	r3, #2
 800786e:	61fb      	str	r3, [r7, #28]
 8007870:	e001      	b.n	8007876 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007872:	2301      	movs	r3, #1
 8007874:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	01db      	lsls	r3, r3, #7
 8007880:	4413      	add	r3, r2
 8007882:	3384      	adds	r3, #132	; 0x84
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	6812      	ldr	r2, [r2, #0]
 800788a:	4611      	mov	r1, r2
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	01d2      	lsls	r2, r2, #7
 8007890:	440a      	add	r2, r1
 8007892:	3284      	adds	r2, #132	; 0x84
 8007894:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007898:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	fb02 f303 	mul.w	r3, r2, r3
 80078a4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6859      	ldr	r1, [r3, #4]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	1acb      	subs	r3, r1, r3
 80078b0:	69f9      	ldr	r1, [r7, #28]
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80078b8:	68f9      	ldr	r1, [r7, #12]
 80078ba:	6809      	ldr	r1, [r1, #0]
 80078bc:	4608      	mov	r0, r1
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	01c9      	lsls	r1, r1, #7
 80078c2:	4401      	add	r1, r0
 80078c4:	3184      	adds	r1, #132	; 0x84
 80078c6:	4313      	orrs	r3, r2
 80078c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	01db      	lsls	r3, r3, #7
 80078d4:	4413      	add	r3, r2
 80078d6:	3384      	adds	r3, #132	; 0x84
 80078d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4619      	mov	r1, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	01db      	lsls	r3, r3, #7
 80078e4:	440b      	add	r3, r1
 80078e6:	3384      	adds	r3, #132	; 0x84
 80078e8:	4619      	mov	r1, r3
 80078ea:	4b14      	ldr	r3, [pc, #80]	; (800793c <LTDC_SetConfig+0x330>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	01db      	lsls	r3, r3, #7
 80078fa:	4413      	add	r3, r2
 80078fc:	3384      	adds	r3, #132	; 0x84
 80078fe:	461a      	mov	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	01db      	lsls	r3, r3, #7
 8007910:	4413      	add	r3, r2
 8007912:	3384      	adds	r3, #132	; 0x84
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	4611      	mov	r1, r2
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	01d2      	lsls	r2, r2, #7
 8007920:	440a      	add	r2, r1
 8007922:	3284      	adds	r2, #132	; 0x84
 8007924:	f043 0301 	orr.w	r3, r3, #1
 8007928:	6013      	str	r3, [r2, #0]
}
 800792a:	bf00      	nop
 800792c:	3724      	adds	r7, #36	; 0x24
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	fffff8f8 	.word	0xfffff8f8
 800793c:	fffff800 	.word	0xfffff800

08007940 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007944:	4b05      	ldr	r3, [pc, #20]	; (800795c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a04      	ldr	r2, [pc, #16]	; (800795c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800794a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794e:	6013      	str	r3, [r2, #0]
}
 8007950:	bf00      	nop
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40007000 	.word	0x40007000

08007960 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800796a:	4b23      	ldr	r3, [pc, #140]	; (80079f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007974:	6413      	str	r3, [r2, #64]	; 0x40
 8007976:	4b20      	ldr	r3, [pc, #128]	; (80079f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797e:	603b      	str	r3, [r7, #0]
 8007980:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007982:	4b1e      	ldr	r3, [pc, #120]	; (80079fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1d      	ldr	r2, [pc, #116]	; (80079fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8007988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800798c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800798e:	f7fd f801 	bl	8004994 <HAL_GetTick>
 8007992:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007994:	e009      	b.n	80079aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007996:	f7fc fffd 	bl	8004994 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079a4:	d901      	bls.n	80079aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e022      	b.n	80079f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80079aa:	4b14      	ldr	r3, [pc, #80]	; (80079fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b6:	d1ee      	bne.n	8007996 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80079b8:	4b10      	ldr	r3, [pc, #64]	; (80079fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a0f      	ldr	r2, [pc, #60]	; (80079fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80079be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079c4:	f7fc ffe6 	bl	8004994 <HAL_GetTick>
 80079c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079ca:	e009      	b.n	80079e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80079cc:	f7fc ffe2 	bl	8004994 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079da:	d901      	bls.n	80079e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e007      	b.n	80079f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079e0:	4b06      	ldr	r3, [pc, #24]	; (80079fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ec:	d1ee      	bne.n	80079cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40023800 	.word	0x40023800
 80079fc:	40007000 	.word	0x40007000

08007a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e291      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8087 	beq.w	8007b32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a24:	4b96      	ldr	r3, [pc, #600]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f003 030c 	and.w	r3, r3, #12
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d00c      	beq.n	8007a4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a30:	4b93      	ldr	r3, [pc, #588]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 030c 	and.w	r3, r3, #12
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d112      	bne.n	8007a62 <HAL_RCC_OscConfig+0x62>
 8007a3c:	4b90      	ldr	r3, [pc, #576]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a48:	d10b      	bne.n	8007a62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a4a:	4b8d      	ldr	r3, [pc, #564]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d06c      	beq.n	8007b30 <HAL_RCC_OscConfig+0x130>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d168      	bne.n	8007b30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e26b      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a6a:	d106      	bne.n	8007a7a <HAL_RCC_OscConfig+0x7a>
 8007a6c:	4b84      	ldr	r3, [pc, #528]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a83      	ldr	r2, [pc, #524]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e02e      	b.n	8007ad8 <HAL_RCC_OscConfig+0xd8>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10c      	bne.n	8007a9c <HAL_RCC_OscConfig+0x9c>
 8007a82:	4b7f      	ldr	r3, [pc, #508]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a7e      	ldr	r2, [pc, #504]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	4b7c      	ldr	r3, [pc, #496]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a7b      	ldr	r2, [pc, #492]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	e01d      	b.n	8007ad8 <HAL_RCC_OscConfig+0xd8>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCC_OscConfig+0xc0>
 8007aa6:	4b76      	ldr	r3, [pc, #472]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a75      	ldr	r2, [pc, #468]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	4b73      	ldr	r3, [pc, #460]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a72      	ldr	r2, [pc, #456]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e00b      	b.n	8007ad8 <HAL_RCC_OscConfig+0xd8>
 8007ac0:	4b6f      	ldr	r3, [pc, #444]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a6e      	ldr	r2, [pc, #440]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	4b6c      	ldr	r3, [pc, #432]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a6b      	ldr	r2, [pc, #428]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d013      	beq.n	8007b08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae0:	f7fc ff58 	bl	8004994 <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ae8:	f7fc ff54 	bl	8004994 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b64      	cmp	r3, #100	; 0x64
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e21f      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007afa:	4b61      	ldr	r3, [pc, #388]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0f0      	beq.n	8007ae8 <HAL_RCC_OscConfig+0xe8>
 8007b06:	e014      	b.n	8007b32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b08:	f7fc ff44 	bl	8004994 <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b0e:	e008      	b.n	8007b22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b10:	f7fc ff40 	bl	8004994 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b64      	cmp	r3, #100	; 0x64
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e20b      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b22:	4b57      	ldr	r3, [pc, #348]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1f0      	bne.n	8007b10 <HAL_RCC_OscConfig+0x110>
 8007b2e:	e000      	b.n	8007b32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d069      	beq.n	8007c12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b3e:	4b50      	ldr	r3, [pc, #320]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 030c 	and.w	r3, r3, #12
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b4a:	4b4d      	ldr	r3, [pc, #308]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 030c 	and.w	r3, r3, #12
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d11c      	bne.n	8007b90 <HAL_RCC_OscConfig+0x190>
 8007b56:	4b4a      	ldr	r3, [pc, #296]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d116      	bne.n	8007b90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b62:	4b47      	ldr	r3, [pc, #284]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <HAL_RCC_OscConfig+0x17a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d001      	beq.n	8007b7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e1df      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b7a:	4b41      	ldr	r3, [pc, #260]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	493d      	ldr	r1, [pc, #244]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b8e:	e040      	b.n	8007c12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d023      	beq.n	8007be0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b98:	4b39      	ldr	r3, [pc, #228]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a38      	ldr	r2, [pc, #224]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba4:	f7fc fef6 	bl	8004994 <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bac:	f7fc fef2 	bl	8004994 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e1bd      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bbe:	4b30      	ldr	r3, [pc, #192]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0f0      	beq.n	8007bac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bca:	4b2d      	ldr	r3, [pc, #180]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4929      	ldr	r1, [pc, #164]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	600b      	str	r3, [r1, #0]
 8007bde:	e018      	b.n	8007c12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007be0:	4b27      	ldr	r3, [pc, #156]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a26      	ldr	r2, [pc, #152]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bec:	f7fc fed2 	bl	8004994 <HAL_GetTick>
 8007bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bf2:	e008      	b.n	8007c06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bf4:	f7fc fece 	bl	8004994 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e199      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c06:	4b1e      	ldr	r3, [pc, #120]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f0      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0308 	and.w	r3, r3, #8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d038      	beq.n	8007c90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d019      	beq.n	8007c5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c26:	4b16      	ldr	r3, [pc, #88]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2a:	4a15      	ldr	r2, [pc, #84]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007c2c:	f043 0301 	orr.w	r3, r3, #1
 8007c30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c32:	f7fc feaf 	bl	8004994 <HAL_GetTick>
 8007c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c38:	e008      	b.n	8007c4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c3a:	f7fc feab 	bl	8004994 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e176      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c4c:	4b0c      	ldr	r3, [pc, #48]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0f0      	beq.n	8007c3a <HAL_RCC_OscConfig+0x23a>
 8007c58:	e01a      	b.n	8007c90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c5a:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5e:	4a08      	ldr	r2, [pc, #32]	; (8007c80 <HAL_RCC_OscConfig+0x280>)
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c66:	f7fc fe95 	bl	8004994 <HAL_GetTick>
 8007c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c6c:	e00a      	b.n	8007c84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c6e:	f7fc fe91 	bl	8004994 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d903      	bls.n	8007c84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e15c      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
 8007c80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c84:	4b91      	ldr	r3, [pc, #580]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1ee      	bne.n	8007c6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 80a4 	beq.w	8007de6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c9e:	4b8b      	ldr	r3, [pc, #556]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10d      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007caa:	4b88      	ldr	r3, [pc, #544]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	4a87      	ldr	r2, [pc, #540]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8007cb6:	4b85      	ldr	r3, [pc, #532]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cbe:	60bb      	str	r3, [r7, #8]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cc6:	4b82      	ldr	r3, [pc, #520]	; (8007ed0 <HAL_RCC_OscConfig+0x4d0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d118      	bne.n	8007d04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007cd2:	4b7f      	ldr	r3, [pc, #508]	; (8007ed0 <HAL_RCC_OscConfig+0x4d0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a7e      	ldr	r2, [pc, #504]	; (8007ed0 <HAL_RCC_OscConfig+0x4d0>)
 8007cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cde:	f7fc fe59 	bl	8004994 <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ce6:	f7fc fe55 	bl	8004994 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b64      	cmp	r3, #100	; 0x64
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e120      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cf8:	4b75      	ldr	r3, [pc, #468]	; (8007ed0 <HAL_RCC_OscConfig+0x4d0>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0f0      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d106      	bne.n	8007d1a <HAL_RCC_OscConfig+0x31a>
 8007d0c:	4b6f      	ldr	r3, [pc, #444]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d10:	4a6e      	ldr	r2, [pc, #440]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d12:	f043 0301 	orr.w	r3, r3, #1
 8007d16:	6713      	str	r3, [r2, #112]	; 0x70
 8007d18:	e02d      	b.n	8007d76 <HAL_RCC_OscConfig+0x376>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10c      	bne.n	8007d3c <HAL_RCC_OscConfig+0x33c>
 8007d22:	4b6a      	ldr	r3, [pc, #424]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d26:	4a69      	ldr	r2, [pc, #420]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d28:	f023 0301 	bic.w	r3, r3, #1
 8007d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d2e:	4b67      	ldr	r3, [pc, #412]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	4a66      	ldr	r2, [pc, #408]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d34:	f023 0304 	bic.w	r3, r3, #4
 8007d38:	6713      	str	r3, [r2, #112]	; 0x70
 8007d3a:	e01c      	b.n	8007d76 <HAL_RCC_OscConfig+0x376>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b05      	cmp	r3, #5
 8007d42:	d10c      	bne.n	8007d5e <HAL_RCC_OscConfig+0x35e>
 8007d44:	4b61      	ldr	r3, [pc, #388]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d48:	4a60      	ldr	r2, [pc, #384]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d4a:	f043 0304 	orr.w	r3, r3, #4
 8007d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d50:	4b5e      	ldr	r3, [pc, #376]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d54:	4a5d      	ldr	r2, [pc, #372]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d5c:	e00b      	b.n	8007d76 <HAL_RCC_OscConfig+0x376>
 8007d5e:	4b5b      	ldr	r3, [pc, #364]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d62:	4a5a      	ldr	r2, [pc, #360]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d64:	f023 0301 	bic.w	r3, r3, #1
 8007d68:	6713      	str	r3, [r2, #112]	; 0x70
 8007d6a:	4b58      	ldr	r3, [pc, #352]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6e:	4a57      	ldr	r2, [pc, #348]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d70:	f023 0304 	bic.w	r3, r3, #4
 8007d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d015      	beq.n	8007daa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d7e:	f7fc fe09 	bl	8004994 <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d84:	e00a      	b.n	8007d9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d86:	f7fc fe05 	bl	8004994 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d901      	bls.n	8007d9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e0ce      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d9c:	4b4b      	ldr	r3, [pc, #300]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0ee      	beq.n	8007d86 <HAL_RCC_OscConfig+0x386>
 8007da8:	e014      	b.n	8007dd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007daa:	f7fc fdf3 	bl	8004994 <HAL_GetTick>
 8007dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007db0:	e00a      	b.n	8007dc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007db2:	f7fc fdef 	bl	8004994 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e0b8      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dc8:	4b40      	ldr	r3, [pc, #256]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1ee      	bne.n	8007db2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d105      	bne.n	8007de6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dda:	4b3c      	ldr	r3, [pc, #240]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	4a3b      	ldr	r2, [pc, #236]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007de4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 80a4 	beq.w	8007f38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007df0:	4b36      	ldr	r3, [pc, #216]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f003 030c 	and.w	r3, r3, #12
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d06b      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d149      	bne.n	8007e98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e04:	4b31      	ldr	r3, [pc, #196]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a30      	ldr	r2, [pc, #192]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e10:	f7fc fdc0 	bl	8004994 <HAL_GetTick>
 8007e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e18:	f7fc fdbc 	bl	8004994 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e087      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e2a:	4b28      	ldr	r3, [pc, #160]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f0      	bne.n	8007e18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69da      	ldr	r2, [r3, #28]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	019b      	lsls	r3, r3, #6
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4c:	085b      	lsrs	r3, r3, #1
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	041b      	lsls	r3, r3, #16
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	061b      	lsls	r3, r3, #24
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	4a1b      	ldr	r2, [pc, #108]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e64:	4b19      	ldr	r3, [pc, #100]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a18      	ldr	r2, [pc, #96]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e70:	f7fc fd90 	bl	8004994 <HAL_GetTick>
 8007e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e76:	e008      	b.n	8007e8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e78:	f7fc fd8c 	bl	8004994 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e057      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e8a:	4b10      	ldr	r3, [pc, #64]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d0f0      	beq.n	8007e78 <HAL_RCC_OscConfig+0x478>
 8007e96:	e04f      	b.n	8007f38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e98:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a0b      	ldr	r2, [pc, #44]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea4:	f7fc fd76 	bl	8004994 <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eac:	f7fc fd72 	bl	8004994 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e03d      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ebe:	4b03      	ldr	r3, [pc, #12]	; (8007ecc <HAL_RCC_OscConfig+0x4cc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f0      	bne.n	8007eac <HAL_RCC_OscConfig+0x4ac>
 8007eca:	e035      	b.n	8007f38 <HAL_RCC_OscConfig+0x538>
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007ed4:	4b1b      	ldr	r3, [pc, #108]	; (8007f44 <HAL_RCC_OscConfig+0x544>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d028      	beq.n	8007f34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d121      	bne.n	8007f34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d11a      	bne.n	8007f34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f04:	4013      	ands	r3, r2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d111      	bne.n	8007f34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d107      	bne.n	8007f34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	40023800 	.word	0x40023800

08007f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e0d0      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f60:	4b6a      	ldr	r3, [pc, #424]	; (800810c <HAL_RCC_ClockConfig+0x1c4>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 030f 	and.w	r3, r3, #15
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d910      	bls.n	8007f90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f6e:	4b67      	ldr	r3, [pc, #412]	; (800810c <HAL_RCC_ClockConfig+0x1c4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f023 020f 	bic.w	r2, r3, #15
 8007f76:	4965      	ldr	r1, [pc, #404]	; (800810c <HAL_RCC_ClockConfig+0x1c4>)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f7e:	4b63      	ldr	r3, [pc, #396]	; (800810c <HAL_RCC_ClockConfig+0x1c4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 030f 	and.w	r3, r3, #15
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d001      	beq.n	8007f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e0b8      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d020      	beq.n	8007fde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fa8:	4b59      	ldr	r3, [pc, #356]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	4a58      	ldr	r2, [pc, #352]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 8007fae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d005      	beq.n	8007fcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fc0:	4b53      	ldr	r3, [pc, #332]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	4a52      	ldr	r2, [pc, #328]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007fca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fcc:	4b50      	ldr	r3, [pc, #320]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	494d      	ldr	r1, [pc, #308]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d040      	beq.n	800806c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d107      	bne.n	8008002 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ff2:	4b47      	ldr	r3, [pc, #284]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d115      	bne.n	800802a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e07f      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d107      	bne.n	800801a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800800a:	4b41      	ldr	r3, [pc, #260]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d109      	bne.n	800802a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e073      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800801a:	4b3d      	ldr	r3, [pc, #244]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e06b      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800802a:	4b39      	ldr	r3, [pc, #228]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f023 0203 	bic.w	r2, r3, #3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	4936      	ldr	r1, [pc, #216]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 8008038:	4313      	orrs	r3, r2
 800803a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800803c:	f7fc fcaa 	bl	8004994 <HAL_GetTick>
 8008040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008042:	e00a      	b.n	800805a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008044:	f7fc fca6 	bl	8004994 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008052:	4293      	cmp	r3, r2
 8008054:	d901      	bls.n	800805a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e053      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800805a:	4b2d      	ldr	r3, [pc, #180]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 020c 	and.w	r2, r3, #12
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	429a      	cmp	r2, r3
 800806a:	d1eb      	bne.n	8008044 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800806c:	4b27      	ldr	r3, [pc, #156]	; (800810c <HAL_RCC_ClockConfig+0x1c4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 030f 	and.w	r3, r3, #15
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d210      	bcs.n	800809c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800807a:	4b24      	ldr	r3, [pc, #144]	; (800810c <HAL_RCC_ClockConfig+0x1c4>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f023 020f 	bic.w	r2, r3, #15
 8008082:	4922      	ldr	r1, [pc, #136]	; (800810c <HAL_RCC_ClockConfig+0x1c4>)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	4313      	orrs	r3, r2
 8008088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800808a:	4b20      	ldr	r3, [pc, #128]	; (800810c <HAL_RCC_ClockConfig+0x1c4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d001      	beq.n	800809c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e032      	b.n	8008102 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d008      	beq.n	80080ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080a8:	4b19      	ldr	r3, [pc, #100]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	4916      	ldr	r1, [pc, #88]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0308 	and.w	r3, r3, #8
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d009      	beq.n	80080da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80080c6:	4b12      	ldr	r3, [pc, #72]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	00db      	lsls	r3, r3, #3
 80080d4:	490e      	ldr	r1, [pc, #56]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80080da:	f000 f821 	bl	8008120 <HAL_RCC_GetSysClockFreq>
 80080de:	4602      	mov	r2, r0
 80080e0:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <HAL_RCC_ClockConfig+0x1c8>)
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	091b      	lsrs	r3, r3, #4
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	490a      	ldr	r1, [pc, #40]	; (8008114 <HAL_RCC_ClockConfig+0x1cc>)
 80080ec:	5ccb      	ldrb	r3, [r1, r3]
 80080ee:	fa22 f303 	lsr.w	r3, r2, r3
 80080f2:	4a09      	ldr	r2, [pc, #36]	; (8008118 <HAL_RCC_ClockConfig+0x1d0>)
 80080f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80080f6:	4b09      	ldr	r3, [pc, #36]	; (800811c <HAL_RCC_ClockConfig+0x1d4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fb ff26 	bl	8003f4c <HAL_InitTick>

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	40023c00 	.word	0x40023c00
 8008110:	40023800 	.word	0x40023800
 8008114:	0804d140 	.word	0x0804d140
 8008118:	2000003c 	.word	0x2000003c
 800811c:	20000040 	.word	0x20000040

08008120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008124:	b090      	sub	sp, #64	; 0x40
 8008126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	637b      	str	r3, [r7, #52]	; 0x34
 800812c:	2300      	movs	r3, #0
 800812e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008130:	2300      	movs	r3, #0
 8008132:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008138:	4b59      	ldr	r3, [pc, #356]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 030c 	and.w	r3, r3, #12
 8008140:	2b08      	cmp	r3, #8
 8008142:	d00d      	beq.n	8008160 <HAL_RCC_GetSysClockFreq+0x40>
 8008144:	2b08      	cmp	r3, #8
 8008146:	f200 80a1 	bhi.w	800828c <HAL_RCC_GetSysClockFreq+0x16c>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <HAL_RCC_GetSysClockFreq+0x34>
 800814e:	2b04      	cmp	r3, #4
 8008150:	d003      	beq.n	800815a <HAL_RCC_GetSysClockFreq+0x3a>
 8008152:	e09b      	b.n	800828c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008154:	4b53      	ldr	r3, [pc, #332]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008156:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008158:	e09b      	b.n	8008292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800815a:	4b53      	ldr	r3, [pc, #332]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800815c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800815e:	e098      	b.n	8008292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008160:	4b4f      	ldr	r3, [pc, #316]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008168:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800816a:	4b4d      	ldr	r3, [pc, #308]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d028      	beq.n	80081c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008176:	4b4a      	ldr	r3, [pc, #296]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	099b      	lsrs	r3, r3, #6
 800817c:	2200      	movs	r2, #0
 800817e:	623b      	str	r3, [r7, #32]
 8008180:	627a      	str	r2, [r7, #36]	; 0x24
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008188:	2100      	movs	r1, #0
 800818a:	4b47      	ldr	r3, [pc, #284]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800818c:	fb03 f201 	mul.w	r2, r3, r1
 8008190:	2300      	movs	r3, #0
 8008192:	fb00 f303 	mul.w	r3, r0, r3
 8008196:	4413      	add	r3, r2
 8008198:	4a43      	ldr	r2, [pc, #268]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800819a:	fba0 1202 	umull	r1, r2, r0, r2
 800819e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081a0:	460a      	mov	r2, r1
 80081a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80081a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a6:	4413      	add	r3, r2
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	2200      	movs	r2, #0
 80081ae:	61bb      	str	r3, [r7, #24]
 80081b0:	61fa      	str	r2, [r7, #28]
 80081b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80081ba:	f7f8 f881 	bl	80002c0 <__aeabi_uldivmod>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4613      	mov	r3, r2
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c6:	e053      	b.n	8008270 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081c8:	4b35      	ldr	r3, [pc, #212]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	099b      	lsrs	r3, r3, #6
 80081ce:	2200      	movs	r2, #0
 80081d0:	613b      	str	r3, [r7, #16]
 80081d2:	617a      	str	r2, [r7, #20]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80081da:	f04f 0b00 	mov.w	fp, #0
 80081de:	4652      	mov	r2, sl
 80081e0:	465b      	mov	r3, fp
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f04f 0100 	mov.w	r1, #0
 80081ea:	0159      	lsls	r1, r3, #5
 80081ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081f0:	0150      	lsls	r0, r2, #5
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	ebb2 080a 	subs.w	r8, r2, sl
 80081fa:	eb63 090b 	sbc.w	r9, r3, fp
 80081fe:	f04f 0200 	mov.w	r2, #0
 8008202:	f04f 0300 	mov.w	r3, #0
 8008206:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800820a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800820e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008212:	ebb2 0408 	subs.w	r4, r2, r8
 8008216:	eb63 0509 	sbc.w	r5, r3, r9
 800821a:	f04f 0200 	mov.w	r2, #0
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	00eb      	lsls	r3, r5, #3
 8008224:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008228:	00e2      	lsls	r2, r4, #3
 800822a:	4614      	mov	r4, r2
 800822c:	461d      	mov	r5, r3
 800822e:	eb14 030a 	adds.w	r3, r4, sl
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	eb45 030b 	adc.w	r3, r5, fp
 8008238:	607b      	str	r3, [r7, #4]
 800823a:	f04f 0200 	mov.w	r2, #0
 800823e:	f04f 0300 	mov.w	r3, #0
 8008242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008246:	4629      	mov	r1, r5
 8008248:	028b      	lsls	r3, r1, #10
 800824a:	4621      	mov	r1, r4
 800824c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008250:	4621      	mov	r1, r4
 8008252:	028a      	lsls	r2, r1, #10
 8008254:	4610      	mov	r0, r2
 8008256:	4619      	mov	r1, r3
 8008258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800825a:	2200      	movs	r2, #0
 800825c:	60bb      	str	r3, [r7, #8]
 800825e:	60fa      	str	r2, [r7, #12]
 8008260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008264:	f7f8 f82c 	bl	80002c0 <__aeabi_uldivmod>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4613      	mov	r3, r2
 800826e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008270:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	0c1b      	lsrs	r3, r3, #16
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	3301      	adds	r3, #1
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008284:	fbb2 f3f3 	udiv	r3, r2, r3
 8008288:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800828a:	e002      	b.n	8008292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800828e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008294:	4618      	mov	r0, r3
 8008296:	3740      	adds	r7, #64	; 0x40
 8008298:	46bd      	mov	sp, r7
 800829a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800829e:	bf00      	nop
 80082a0:	40023800 	.word	0x40023800
 80082a4:	00f42400 	.word	0x00f42400
 80082a8:	017d7840 	.word	0x017d7840

080082ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082b0:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80082b2:	681b      	ldr	r3, [r3, #0]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	2000003c 	.word	0x2000003c

080082c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082c8:	f7ff fff0 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 80082cc:	4602      	mov	r2, r0
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	0a9b      	lsrs	r3, r3, #10
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	4903      	ldr	r1, [pc, #12]	; (80082e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082da:	5ccb      	ldrb	r3, [r1, r3]
 80082dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40023800 	.word	0x40023800
 80082e8:	0804d150 	.word	0x0804d150

080082ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80082f0:	f7ff ffdc 	bl	80082ac <HAL_RCC_GetHCLKFreq>
 80082f4:	4602      	mov	r2, r0
 80082f6:	4b05      	ldr	r3, [pc, #20]	; (800830c <HAL_RCC_GetPCLK2Freq+0x20>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	0b5b      	lsrs	r3, r3, #13
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	4903      	ldr	r1, [pc, #12]	; (8008310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008302:	5ccb      	ldrb	r3, [r1, r3]
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008308:	4618      	mov	r0, r3
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40023800 	.word	0x40023800
 8008310:	0804d150 	.word	0x0804d150

08008314 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	220f      	movs	r2, #15
 8008322:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008324:	4b12      	ldr	r3, [pc, #72]	; (8008370 <HAL_RCC_GetClockConfig+0x5c>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f003 0203 	and.w	r2, r3, #3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008330:	4b0f      	ldr	r3, [pc, #60]	; (8008370 <HAL_RCC_GetClockConfig+0x5c>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800833c:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <HAL_RCC_GetClockConfig+0x5c>)
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008348:	4b09      	ldr	r3, [pc, #36]	; (8008370 <HAL_RCC_GetClockConfig+0x5c>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	08db      	lsrs	r3, r3, #3
 800834e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008356:	4b07      	ldr	r3, [pc, #28]	; (8008374 <HAL_RCC_GetClockConfig+0x60>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 020f 	and.w	r2, r3, #15
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	601a      	str	r2, [r3, #0]
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	40023800 	.word	0x40023800
 8008374:	40023c00 	.word	0x40023c00

08008378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d012      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083a0:	4b69      	ldr	r3, [pc, #420]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	4a68      	ldr	r2, [pc, #416]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80083aa:	6093      	str	r3, [r2, #8]
 80083ac:	4b66      	ldr	r3, [pc, #408]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b4:	4964      	ldr	r1, [pc, #400]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80083c2:	2301      	movs	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d017      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083d2:	4b5d      	ldr	r3, [pc, #372]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e0:	4959      	ldr	r1, [pc, #356]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f0:	d101      	bne.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80083f2:	2301      	movs	r3, #1
 80083f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80083fe:	2301      	movs	r3, #1
 8008400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d017      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800840e:	4b4e      	ldr	r3, [pc, #312]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008414:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	494a      	ldr	r1, [pc, #296]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800842c:	d101      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800842e:	2301      	movs	r3, #1
 8008430:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800843a:	2301      	movs	r3, #1
 800843c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800844a:	2301      	movs	r3, #1
 800844c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	f000 808b 	beq.w	8008572 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800845c:	4b3a      	ldr	r3, [pc, #232]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800845e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008460:	4a39      	ldr	r2, [pc, #228]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008466:	6413      	str	r3, [r2, #64]	; 0x40
 8008468:	4b37      	ldr	r3, [pc, #220]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008474:	4b35      	ldr	r3, [pc, #212]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a34      	ldr	r2, [pc, #208]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800847a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800847e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008480:	f7fc fa88 	bl	8004994 <HAL_GetTick>
 8008484:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008486:	e008      	b.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008488:	f7fc fa84 	bl	8004994 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b64      	cmp	r3, #100	; 0x64
 8008494:	d901      	bls.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e357      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800849a:	4b2c      	ldr	r3, [pc, #176]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0f0      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084a6:	4b28      	ldr	r3, [pc, #160]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d035      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d02e      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084c4:	4b20      	ldr	r3, [pc, #128]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80084ce:	4b1e      	ldr	r3, [pc, #120]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d2:	4a1d      	ldr	r2, [pc, #116]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084d8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80084da:	4b1b      	ldr	r3, [pc, #108]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084de:	4a1a      	ldr	r2, [pc, #104]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80084e6:	4a18      	ldr	r2, [pc, #96]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80084ec:	4b16      	ldr	r3, [pc, #88]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d114      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f8:	f7fc fa4c 	bl	8004994 <HAL_GetTick>
 80084fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084fe:	e00a      	b.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008500:	f7fc fa48 	bl	8004994 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	f241 3288 	movw	r2, #5000	; 0x1388
 800850e:	4293      	cmp	r3, r2
 8008510:	d901      	bls.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e319      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008516:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0ee      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800852a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800852e:	d111      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008530:	4b05      	ldr	r3, [pc, #20]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800853c:	4b04      	ldr	r3, [pc, #16]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800853e:	400b      	ands	r3, r1
 8008540:	4901      	ldr	r1, [pc, #4]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008542:	4313      	orrs	r3, r2
 8008544:	608b      	str	r3, [r1, #8]
 8008546:	e00b      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008548:	40023800 	.word	0x40023800
 800854c:	40007000 	.word	0x40007000
 8008550:	0ffffcff 	.word	0x0ffffcff
 8008554:	4baa      	ldr	r3, [pc, #680]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	4aa9      	ldr	r2, [pc, #676]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800855e:	6093      	str	r3, [r2, #8]
 8008560:	4ba7      	ldr	r3, [pc, #668]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800856c:	49a4      	ldr	r1, [pc, #656]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800856e:	4313      	orrs	r3, r2
 8008570:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0310 	and.w	r3, r3, #16
 800857a:	2b00      	cmp	r3, #0
 800857c:	d010      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800857e:	4ba0      	ldr	r3, [pc, #640]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008584:	4a9e      	ldr	r2, [pc, #632]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800858a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800858e:	4b9c      	ldr	r3, [pc, #624]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008590:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	4999      	ldr	r1, [pc, #612]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800859a:	4313      	orrs	r3, r2
 800859c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085ac:	4b94      	ldr	r3, [pc, #592]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ba:	4991      	ldr	r1, [pc, #580]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085ce:	4b8c      	ldr	r3, [pc, #560]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085dc:	4988      	ldr	r1, [pc, #544]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00a      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80085f0:	4b83      	ldr	r3, [pc, #524]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085fe:	4980      	ldr	r1, [pc, #512]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008600:	4313      	orrs	r3, r2
 8008602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008612:	4b7b      	ldr	r3, [pc, #492]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008618:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008620:	4977      	ldr	r1, [pc, #476]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008622:	4313      	orrs	r3, r2
 8008624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008634:	4b72      	ldr	r3, [pc, #456]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863a:	f023 0203 	bic.w	r2, r3, #3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	496f      	ldr	r1, [pc, #444]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008644:	4313      	orrs	r3, r2
 8008646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008656:	4b6a      	ldr	r3, [pc, #424]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865c:	f023 020c 	bic.w	r2, r3, #12
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008664:	4966      	ldr	r1, [pc, #408]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008666:	4313      	orrs	r3, r2
 8008668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008678:	4b61      	ldr	r3, [pc, #388]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800867a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008686:	495e      	ldr	r1, [pc, #376]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008688:	4313      	orrs	r3, r2
 800868a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800869a:	4b59      	ldr	r3, [pc, #356]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800869c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a8:	4955      	ldr	r1, [pc, #340]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086aa:	4313      	orrs	r3, r2
 80086ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00a      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086bc:	4b50      	ldr	r3, [pc, #320]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ca:	494d      	ldr	r1, [pc, #308]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80086de:	4b48      	ldr	r3, [pc, #288]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ec:	4944      	ldr	r1, [pc, #272]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00a      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008700:	4b3f      	ldr	r3, [pc, #252]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008706:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870e:	493c      	ldr	r1, [pc, #240]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008710:	4313      	orrs	r3, r2
 8008712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008722:	4b37      	ldr	r3, [pc, #220]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008728:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008730:	4933      	ldr	r1, [pc, #204]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008732:	4313      	orrs	r3, r2
 8008734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00a      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008744:	4b2e      	ldr	r3, [pc, #184]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008752:	492b      	ldr	r1, [pc, #172]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008754:	4313      	orrs	r3, r2
 8008756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d011      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008766:	4b26      	ldr	r3, [pc, #152]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800876c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008774:	4922      	ldr	r1, [pc, #136]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008776:	4313      	orrs	r3, r2
 8008778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008784:	d101      	bne.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008786:	2301      	movs	r3, #1
 8008788:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0308 	and.w	r3, r3, #8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008796:	2301      	movs	r3, #1
 8008798:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087a6:	4b16      	ldr	r3, [pc, #88]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b4:	4912      	ldr	r1, [pc, #72]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087c8:	4b0d      	ldr	r3, [pc, #52]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087d8:	4909      	ldr	r1, [pc, #36]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d006      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 80d9 	beq.w	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087f4:	4b02      	ldr	r3, [pc, #8]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a01      	ldr	r2, [pc, #4]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087fe:	e001      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008800:	40023800 	.word	0x40023800
 8008804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008806:	f7fc f8c5 	bl	8004994 <HAL_GetTick>
 800880a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800880c:	e008      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800880e:	f7fc f8c1 	bl	8004994 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b64      	cmp	r3, #100	; 0x64
 800881a:	d901      	bls.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e194      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008820:	4b6c      	ldr	r3, [pc, #432]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1f0      	bne.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d021      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883c:	2b00      	cmp	r3, #0
 800883e:	d11d      	bne.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008840:	4b64      	ldr	r3, [pc, #400]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008846:	0c1b      	lsrs	r3, r3, #16
 8008848:	f003 0303 	and.w	r3, r3, #3
 800884c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800884e:	4b61      	ldr	r3, [pc, #388]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008854:	0e1b      	lsrs	r3, r3, #24
 8008856:	f003 030f 	and.w	r3, r3, #15
 800885a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	019a      	lsls	r2, r3, #6
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	041b      	lsls	r3, r3, #16
 8008866:	431a      	orrs	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	061b      	lsls	r3, r3, #24
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	071b      	lsls	r3, r3, #28
 8008874:	4957      	ldr	r1, [pc, #348]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008876:	4313      	orrs	r3, r2
 8008878:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d004      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008890:	d00a      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800889a:	2b00      	cmp	r3, #0
 800889c:	d02e      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088a6:	d129      	bne.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088a8:	4b4a      	ldr	r3, [pc, #296]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ae:	0c1b      	lsrs	r3, r3, #16
 80088b0:	f003 0303 	and.w	r3, r3, #3
 80088b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088b6:	4b47      	ldr	r3, [pc, #284]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088bc:	0f1b      	lsrs	r3, r3, #28
 80088be:	f003 0307 	and.w	r3, r3, #7
 80088c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	019a      	lsls	r2, r3, #6
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	041b      	lsls	r3, r3, #16
 80088ce:	431a      	orrs	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	061b      	lsls	r3, r3, #24
 80088d6:	431a      	orrs	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	071b      	lsls	r3, r3, #28
 80088dc:	493d      	ldr	r1, [pc, #244]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80088e4:	4b3b      	ldr	r3, [pc, #236]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ea:	f023 021f 	bic.w	r2, r3, #31
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	3b01      	subs	r3, #1
 80088f4:	4937      	ldr	r1, [pc, #220]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01d      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008908:	4b32      	ldr	r3, [pc, #200]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800890a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800890e:	0e1b      	lsrs	r3, r3, #24
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008916:	4b2f      	ldr	r3, [pc, #188]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800891c:	0f1b      	lsrs	r3, r3, #28
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	019a      	lsls	r2, r3, #6
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	041b      	lsls	r3, r3, #16
 8008930:	431a      	orrs	r2, r3
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	061b      	lsls	r3, r3, #24
 8008936:	431a      	orrs	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	071b      	lsls	r3, r3, #28
 800893c:	4925      	ldr	r1, [pc, #148]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800893e:	4313      	orrs	r3, r2
 8008940:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d011      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	019a      	lsls	r2, r3, #6
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	041b      	lsls	r3, r3, #16
 800895c:	431a      	orrs	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	061b      	lsls	r3, r3, #24
 8008964:	431a      	orrs	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	071b      	lsls	r3, r3, #28
 800896c:	4919      	ldr	r1, [pc, #100]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800896e:	4313      	orrs	r3, r2
 8008970:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008974:	4b17      	ldr	r3, [pc, #92]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a16      	ldr	r2, [pc, #88]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800897a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800897e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008980:	f7fc f808 	bl	8004994 <HAL_GetTick>
 8008984:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008986:	e008      	b.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008988:	f7fc f804 	bl	8004994 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b64      	cmp	r3, #100	; 0x64
 8008994:	d901      	bls.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e0d7      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800899a:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0f0      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	f040 80cd 	bne.w	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089ae:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a08      	ldr	r2, [pc, #32]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ba:	f7fb ffeb 	bl	8004994 <HAL_GetTick>
 80089be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089c0:	e00a      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089c2:	f7fb ffe7 	bl	8004994 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b64      	cmp	r3, #100	; 0x64
 80089ce:	d903      	bls.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e0ba      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80089d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089d8:	4b5e      	ldr	r3, [pc, #376]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089e4:	d0ed      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d009      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d02e      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d12a      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a0e:	4b51      	ldr	r3, [pc, #324]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a14:	0c1b      	lsrs	r3, r3, #16
 8008a16:	f003 0303 	and.w	r3, r3, #3
 8008a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a1c:	4b4d      	ldr	r3, [pc, #308]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a22:	0f1b      	lsrs	r3, r3, #28
 8008a24:	f003 0307 	and.w	r3, r3, #7
 8008a28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	019a      	lsls	r2, r3, #6
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	041b      	lsls	r3, r3, #16
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	061b      	lsls	r3, r3, #24
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	071b      	lsls	r3, r3, #28
 8008a42:	4944      	ldr	r1, [pc, #272]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a4a:	4b42      	ldr	r3, [pc, #264]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	493d      	ldr	r1, [pc, #244]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d022      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a78:	d11d      	bne.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a7a:	4b36      	ldr	r3, [pc, #216]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a80:	0e1b      	lsrs	r3, r3, #24
 8008a82:	f003 030f 	and.w	r3, r3, #15
 8008a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a88:	4b32      	ldr	r3, [pc, #200]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8e:	0f1b      	lsrs	r3, r3, #28
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	019a      	lsls	r2, r3, #6
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	041b      	lsls	r3, r3, #16
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	061b      	lsls	r3, r3, #24
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	071b      	lsls	r3, r3, #28
 8008aae:	4929      	ldr	r1, [pc, #164]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d028      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ac2:	4b24      	ldr	r3, [pc, #144]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac8:	0e1b      	lsrs	r3, r3, #24
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008ad0:	4b20      	ldr	r3, [pc, #128]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad6:	0c1b      	lsrs	r3, r3, #16
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	019a      	lsls	r2, r3, #6
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	041b      	lsls	r3, r3, #16
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	061b      	lsls	r3, r3, #24
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	071b      	lsls	r3, r3, #28
 8008af6:	4917      	ldr	r1, [pc, #92]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008afe:	4b15      	ldr	r3, [pc, #84]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	4911      	ldr	r1, [pc, #68]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b14:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a0e      	ldr	r2, [pc, #56]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b20:	f7fb ff38 	bl	8004994 <HAL_GetTick>
 8008b24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b28:	f7fb ff34 	bl	8004994 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b64      	cmp	r3, #100	; 0x64
 8008b34:	d901      	bls.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e007      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b3a:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b46:	d1ef      	bne.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3720      	adds	r7, #32
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	40023800 	.word	0x40023800

08008b58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e071      	b.n	8008c52 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	7f5b      	ldrb	r3, [r3, #29]
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d105      	bne.n	8008b84 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7f9 fb56 	bl	8002230 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f003 0310 	and.w	r3, r3, #16
 8008b94:	2b10      	cmp	r3, #16
 8008b96:	d053      	beq.n	8008c40 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	22ca      	movs	r2, #202	; 0xca
 8008b9e:	625a      	str	r2, [r3, #36]	; 0x24
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2253      	movs	r2, #83	; 0x53
 8008ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fac9 	bl	8009140 <RTC_EnterInitMode>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d12a      	bne.n	8008c0e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6899      	ldr	r1, [r3, #8]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b26      	ldr	r3, [pc, #152]	; (8008c5c <HAL_RTC_Init+0x104>)
 8008bc4:	400b      	ands	r3, r1
 8008bc6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6899      	ldr	r1, [r3, #8]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	68d2      	ldr	r2, [r2, #12]
 8008bee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6919      	ldr	r1, [r3, #16]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	041a      	lsls	r2, r3, #16
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fad2 	bl	80091ae <RTC_ExitInitMode>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d110      	bne.n	8008c36 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0208 	bic.w	r2, r2, #8
 8008c22:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	22ff      	movs	r2, #255	; 0xff
 8008c3c:	625a      	str	r2, [r3, #36]	; 0x24
 8008c3e:	e001      	b.n	8008c44 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d102      	bne.n	8008c50 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	ff8fffbf 	.word	0xff8fffbf

08008c60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c60:	b590      	push	{r4, r7, lr}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	7f1b      	ldrb	r3, [r3, #28]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_RTC_SetTime+0x1c>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e085      	b.n	8008d88 <HAL_RTC_SetTime+0x128>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2202      	movs	r2, #2
 8008c86:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d126      	bne.n	8008cdc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 faa6 	bl	80091f8 <RTC_ByteToBcd2>
 8008cac:	4603      	mov	r3, r0
 8008cae:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 fa9f 	bl	80091f8 <RTC_ByteToBcd2>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008cbe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	789b      	ldrb	r3, [r3, #2]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 fa97 	bl	80091f8 <RTC_ByteToBcd2>
 8008cca:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ccc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	78db      	ldrb	r3, [r3, #3]
 8008cd4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	e018      	b.n	8008d0e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008cfc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008d02:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	78db      	ldrb	r3, [r3, #3]
 8008d08:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	22ca      	movs	r2, #202	; 0xca
 8008d14:	625a      	str	r2, [r3, #36]	; 0x24
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2253      	movs	r2, #83	; 0x53
 8008d1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 fa0e 	bl	8009140 <RTC_EnterInitMode>
 8008d24:	4603      	mov	r3, r0
 8008d26:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d28:	7cfb      	ldrb	r3, [r7, #19]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d11e      	bne.n	8008d6c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	6979      	ldr	r1, [r7, #20]
 8008d34:	4b16      	ldr	r3, [pc, #88]	; (8008d90 <HAL_RTC_SetTime+0x130>)
 8008d36:	400b      	ands	r3, r1
 8008d38:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689a      	ldr	r2, [r3, #8]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6899      	ldr	r1, [r3, #8]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	430a      	orrs	r2, r1
 8008d60:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f000 fa23 	bl	80091ae <RTC_ExitInitMode>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008d6c:	7cfb      	ldrb	r3, [r7, #19]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d102      	bne.n	8008d78 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	22ff      	movs	r2, #255	; 0xff
 8008d7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	771a      	strb	r2, [r3, #28]

  return status;
 8008d86:	7cfb      	ldrb	r3, [r7, #19]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	371c      	adds	r7, #28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd90      	pop	{r4, r7, pc}
 8008d90:	007f7f7f 	.word	0x007f7f7f

08008d94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d94:	b590      	push	{r4, r7, lr}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	7f1b      	ldrb	r3, [r3, #28]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d101      	bne.n	8008db0 <HAL_RTC_SetDate+0x1c>
 8008dac:	2302      	movs	r3, #2
 8008dae:	e06f      	b.n	8008e90 <HAL_RTC_SetDate+0xfc>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2202      	movs	r2, #2
 8008dba:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10e      	bne.n	8008de0 <HAL_RTC_SetDate+0x4c>
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	f003 0310 	and.w	r3, r3, #16
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d008      	beq.n	8008de0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	785b      	ldrb	r3, [r3, #1]
 8008dd2:	f023 0310 	bic.w	r3, r3, #16
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	330a      	adds	r3, #10
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d11c      	bne.n	8008e20 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	78db      	ldrb	r3, [r3, #3]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fa04 	bl	80091f8 <RTC_ByteToBcd2>
 8008df0:	4603      	mov	r3, r0
 8008df2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f9fd 	bl	80091f8 <RTC_ByteToBcd2>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008e02:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	789b      	ldrb	r3, [r3, #2]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 f9f5 	bl	80091f8 <RTC_ByteToBcd2>
 8008e0e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008e10:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	e00e      	b.n	8008e3e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	78db      	ldrb	r3, [r3, #3]
 8008e24:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	785b      	ldrb	r3, [r3, #1]
 8008e2a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e2c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008e32:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	22ca      	movs	r2, #202	; 0xca
 8008e44:	625a      	str	r2, [r3, #36]	; 0x24
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2253      	movs	r2, #83	; 0x53
 8008e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 f976 	bl	8009140 <RTC_EnterInitMode>
 8008e54:	4603      	mov	r3, r0
 8008e56:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008e58:	7cfb      	ldrb	r3, [r7, #19]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	6979      	ldr	r1, [r7, #20]
 8008e64:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <HAL_RTC_SetDate+0x104>)
 8008e66:	400b      	ands	r3, r1
 8008e68:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 f99f 	bl	80091ae <RTC_ExitInitMode>
 8008e70:	4603      	mov	r3, r0
 8008e72:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008e74:	7cfb      	ldrb	r3, [r7, #19]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	22ff      	movs	r2, #255	; 0xff
 8008e86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	771a      	strb	r2, [r3, #28]

  return status;
 8008e8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	371c      	adds	r7, #28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd90      	pop	{r4, r7, pc}
 8008e98:	00ffff3f 	.word	0x00ffff3f

08008e9c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008e9c:	b590      	push	{r4, r7, lr}
 8008e9e:	b089      	sub	sp, #36	; 0x24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	7f1b      	ldrb	r3, [r3, #28]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d101      	bne.n	8008ec0 <HAL_RTC_SetAlarm+0x24>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e113      	b.n	80090e8 <HAL_RTC_SetAlarm+0x24c>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d137      	bne.n	8008f42 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d102      	bne.n	8008ee6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 f984 	bl	80091f8 <RTC_ByteToBcd2>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 f97d 	bl	80091f8 <RTC_ByteToBcd2>
 8008efe:	4603      	mov	r3, r0
 8008f00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008f02:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	789b      	ldrb	r3, [r3, #2]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 f975 	bl	80091f8 <RTC_ByteToBcd2>
 8008f0e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f10:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	78db      	ldrb	r3, [r3, #3]
 8008f18:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008f1a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 f967 	bl	80091f8 <RTC_ByteToBcd2>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008f2e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008f36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	e023      	b.n	8008f8a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d102      	bne.n	8008f56 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2200      	movs	r2, #0
 8008f54:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	785b      	ldrb	r3, [r3, #1]
 8008f60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008f62:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008f68:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	78db      	ldrb	r3, [r3, #3]
 8008f6e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008f70:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f78:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008f7a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008f80:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008f86:	4313      	orrs	r3, r2
 8008f88:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008f92:	4313      	orrs	r3, r2
 8008f94:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	22ca      	movs	r2, #202	; 0xca
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2253      	movs	r2, #83	; 0x53
 8008fa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fae:	d148      	bne.n	8009042 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689a      	ldr	r2, [r3, #8]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fbe:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689a      	ldr	r2, [r3, #8]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fce:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008fe0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fe2:	f7fb fcd7 	bl	8004994 <HAL_GetTick>
 8008fe6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008fe8:	e013      	b.n	8009012 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008fea:	f7fb fcd3 	bl	8004994 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ff8:	d90b      	bls.n	8009012 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	22ff      	movs	r2, #255	; 0xff
 8009000:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2203      	movs	r2, #3
 8009006:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800900e:	2303      	movs	r3, #3
 8009010:	e06a      	b.n	80090e8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0e4      	beq.n	8008fea <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	69fa      	ldr	r2, [r7, #28]
 8009026:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689a      	ldr	r2, [r3, #8]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800903e:	609a      	str	r2, [r3, #8]
 8009040:	e047      	b.n	80090d2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009050:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009060:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	b2da      	uxtb	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009072:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009074:	f7fb fc8e 	bl	8004994 <HAL_GetTick>
 8009078:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800907a:	e013      	b.n	80090a4 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800907c:	f7fb fc8a 	bl	8004994 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800908a:	d90b      	bls.n	80090a4 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	22ff      	movs	r2, #255	; 0xff
 8009092:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2203      	movs	r2, #3
 8009098:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e021      	b.n	80090e8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0e4      	beq.n	800907c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	69fa      	ldr	r2, [r7, #28]
 80090b8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	22ff      	movs	r2, #255	; 0xff
 80090d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3724      	adds	r7, #36	; 0x24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd90      	pop	{r4, r7, pc}

080090f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090f8:	2300      	movs	r3, #0
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800910a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800910c:	f7fb fc42 	bl	8004994 <HAL_GetTick>
 8009110:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009112:	e009      	b.n	8009128 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009114:	f7fb fc3e 	bl	8004994 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009122:	d901      	bls.n	8009128 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e007      	b.n	8009138 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f003 0320 	and.w	r3, r3, #32
 8009132:	2b00      	cmp	r3, #0
 8009134:	d0ee      	beq.n	8009114 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009148:	2300      	movs	r3, #0
 800914a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d122      	bne.n	80091a4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800916c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800916e:	f7fb fc11 	bl	8004994 <HAL_GetTick>
 8009172:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009174:	e00c      	b.n	8009190 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009176:	f7fb fc0d 	bl	8004994 <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009184:	d904      	bls.n	8009190 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2204      	movs	r2, #4
 800918a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919a:	2b00      	cmp	r3, #0
 800919c:	d102      	bne.n	80091a4 <RTC_EnterInitMode+0x64>
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d1e8      	bne.n	8009176 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68da      	ldr	r2, [r3, #12]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091c8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff ff89 	bl	80090f0 <HAL_RTC_WaitForSynchro>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d004      	beq.n	80091ee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2204      	movs	r2, #4
 80091e8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009206:	e005      	b.n	8009214 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3301      	adds	r3, #1
 800920c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	3b0a      	subs	r3, #10
 8009212:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	2b09      	cmp	r3, #9
 8009218:	d8f6      	bhi.n	8009208 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	b2da      	uxtb	r2, r3
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	4313      	orrs	r3, r2
 8009226:	b2db      	uxtb	r3, r3
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009234:	b480      	push	{r7}
 8009236:	b087      	sub	sp, #28
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	7f1b      	ldrb	r3, [r3, #28]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_RTCEx_SetTimeStamp+0x1c>
 800924c:	2302      	movs	r3, #2
 800924e:	e050      	b.n	80092f2 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2202      	movs	r2, #2
 800925a:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 0206 	bic.w	r2, r2, #6
 800926a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	430a      	orrs	r2, r1
 800927a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	4b1f      	ldr	r3, [pc, #124]	; (8009300 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009284:	4013      	ands	r3, r2
 8009286:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009288:	697a      	ldr	r2, [r7, #20]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	4313      	orrs	r3, r2
 800928e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	22ca      	movs	r2, #202	; 0xca
 8009296:	625a      	str	r2, [r3, #36]	; 0x24
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2253      	movs	r2, #83	; 0x53
 800929e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f462 6208 	orn	r2, r2, #2176	; 0x880
 80092b8:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 80092ca:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092da:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	22ff      	movs	r2, #255	; 0xff
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	fffff7f7 	.word	0xfffff7f7

08009304 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e025      	b.n	8009364 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d106      	bne.n	8009332 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7f7 fc01 	bl	8000b34 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2202      	movs	r2, #2
 8009336:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3304      	adds	r3, #4
 8009342:	4619      	mov	r1, r3
 8009344:	4610      	mov	r0, r2
 8009346:	f001 fb7b 	bl	800aa40 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	461a      	mov	r2, r3
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	f001 fbcf 	bl	800aaf8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800937e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009380:	7dfb      	ldrb	r3, [r7, #23]
 8009382:	2b02      	cmp	r3, #2
 8009384:	d101      	bne.n	800938a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009386:	2302      	movs	r3, #2
 8009388:	e021      	b.n	80093ce <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d002      	beq.n	8009396 <HAL_SDRAM_SendCommand+0x2a>
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	2b05      	cmp	r3, #5
 8009394:	d118      	bne.n	80093c8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2202      	movs	r2, #2
 800939a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 fc10 	bl	800abcc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d104      	bne.n	80093be <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2205      	movs	r2, #5
 80093b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80093bc:	e006      	b.n	80093cc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80093c6:	e001      	b.n	80093cc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e000      	b.n	80093ce <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b082      	sub	sp, #8
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d101      	bne.n	80093f0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80093ec:	2302      	movs	r3, #2
 80093ee:	e016      	b.n	800941e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d10f      	bne.n	800941c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	4618      	mov	r0, r3
 800940c:	f001 fc02 	bl	800ac14 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	e000      	b.n	800941e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b084      	sub	sp, #16
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e09d      	b.n	8009574 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943c:	2b00      	cmp	r3, #0
 800943e:	d108      	bne.n	8009452 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009448:	d009      	beq.n	800945e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	61da      	str	r2, [r3, #28]
 8009450:	e005      	b.n	800945e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	d106      	bne.n	800947e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7f8 ff45 	bl	8002308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2202      	movs	r2, #2
 8009482:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009494:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800949e:	d902      	bls.n	80094a6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80094a0:	2300      	movs	r3, #0
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	e002      	b.n	80094ac <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80094a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80094b4:	d007      	beq.n	80094c6 <HAL_SPI_Init+0xa0>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094be:	d002      	beq.n	80094c6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	431a      	orrs	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	431a      	orrs	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f4:	431a      	orrs	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094fe:	431a      	orrs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009508:	ea42 0103 	orr.w	r1, r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009510:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	0c1b      	lsrs	r3, r3, #16
 8009522:	f003 0204 	and.w	r2, r3, #4
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	431a      	orrs	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009534:	f003 0308 	and.w	r3, r3, #8
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009542:	ea42 0103 	orr.w	r1, r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69da      	ldr	r2, [r3, #28]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009562:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e049      	b.n	8009622 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7fa ff7a 	bl	800449c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f000 fac0 	bl	8009b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b01      	cmp	r3, #1
 800963e:	d001      	beq.n	8009644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e054      	b.n	80096ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68da      	ldr	r2, [r3, #12]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0201 	orr.w	r2, r2, #1
 800965a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a26      	ldr	r2, [pc, #152]	; (80096fc <HAL_TIM_Base_Start_IT+0xd0>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d022      	beq.n	80096ac <HAL_TIM_Base_Start_IT+0x80>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800966e:	d01d      	beq.n	80096ac <HAL_TIM_Base_Start_IT+0x80>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a22      	ldr	r2, [pc, #136]	; (8009700 <HAL_TIM_Base_Start_IT+0xd4>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d018      	beq.n	80096ac <HAL_TIM_Base_Start_IT+0x80>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a21      	ldr	r2, [pc, #132]	; (8009704 <HAL_TIM_Base_Start_IT+0xd8>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d013      	beq.n	80096ac <HAL_TIM_Base_Start_IT+0x80>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a1f      	ldr	r2, [pc, #124]	; (8009708 <HAL_TIM_Base_Start_IT+0xdc>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d00e      	beq.n	80096ac <HAL_TIM_Base_Start_IT+0x80>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a1e      	ldr	r2, [pc, #120]	; (800970c <HAL_TIM_Base_Start_IT+0xe0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d009      	beq.n	80096ac <HAL_TIM_Base_Start_IT+0x80>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a1c      	ldr	r2, [pc, #112]	; (8009710 <HAL_TIM_Base_Start_IT+0xe4>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d004      	beq.n	80096ac <HAL_TIM_Base_Start_IT+0x80>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a1b      	ldr	r2, [pc, #108]	; (8009714 <HAL_TIM_Base_Start_IT+0xe8>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d115      	bne.n	80096d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689a      	ldr	r2, [r3, #8]
 80096b2:	4b19      	ldr	r3, [pc, #100]	; (8009718 <HAL_TIM_Base_Start_IT+0xec>)
 80096b4:	4013      	ands	r3, r2
 80096b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2b06      	cmp	r3, #6
 80096bc:	d015      	beq.n	80096ea <HAL_TIM_Base_Start_IT+0xbe>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096c4:	d011      	beq.n	80096ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0201 	orr.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d6:	e008      	b.n	80096ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	e000      	b.n	80096ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	40010000 	.word	0x40010000
 8009700:	40000400 	.word	0x40000400
 8009704:	40000800 	.word	0x40000800
 8009708:	40000c00 	.word	0x40000c00
 800970c:	40010400 	.word	0x40010400
 8009710:	40014000 	.word	0x40014000
 8009714:	40001800 	.word	0x40001800
 8009718:	00010007 	.word	0x00010007

0800971c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b02      	cmp	r3, #2
 8009730:	d122      	bne.n	8009778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	2b02      	cmp	r3, #2
 800973e:	d11b      	bne.n	8009778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f06f 0202 	mvn.w	r2, #2
 8009748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f9d0 	bl	8009b04 <HAL_TIM_IC_CaptureCallback>
 8009764:	e005      	b.n	8009772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f9c2 	bl	8009af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f9d3 	bl	8009b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	f003 0304 	and.w	r3, r3, #4
 8009782:	2b04      	cmp	r3, #4
 8009784:	d122      	bne.n	80097cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b04      	cmp	r3, #4
 8009792:	d11b      	bne.n	80097cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f06f 0204 	mvn.w	r2, #4
 800979c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2202      	movs	r2, #2
 80097a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f9a6 	bl	8009b04 <HAL_TIM_IC_CaptureCallback>
 80097b8:	e005      	b.n	80097c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f998 	bl	8009af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f9a9 	bl	8009b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	f003 0308 	and.w	r3, r3, #8
 80097d6:	2b08      	cmp	r3, #8
 80097d8:	d122      	bne.n	8009820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f003 0308 	and.w	r3, r3, #8
 80097e4:	2b08      	cmp	r3, #8
 80097e6:	d11b      	bne.n	8009820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f06f 0208 	mvn.w	r2, #8
 80097f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2204      	movs	r2, #4
 80097f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f97c 	bl	8009b04 <HAL_TIM_IC_CaptureCallback>
 800980c:	e005      	b.n	800981a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f96e 	bl	8009af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f97f 	bl	8009b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	f003 0310 	and.w	r3, r3, #16
 800982a:	2b10      	cmp	r3, #16
 800982c:	d122      	bne.n	8009874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b10      	cmp	r3, #16
 800983a:	d11b      	bne.n	8009874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f06f 0210 	mvn.w	r2, #16
 8009844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2208      	movs	r2, #8
 800984a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f952 	bl	8009b04 <HAL_TIM_IC_CaptureCallback>
 8009860:	e005      	b.n	800986e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f944 	bl	8009af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f955 	bl	8009b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b01      	cmp	r3, #1
 8009880:	d10e      	bne.n	80098a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b01      	cmp	r3, #1
 800988e:	d107      	bne.n	80098a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f06f 0201 	mvn.w	r2, #1
 8009898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7f8 fc0c 	bl	80020b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098aa:	2b80      	cmp	r3, #128	; 0x80
 80098ac:	d10e      	bne.n	80098cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b8:	2b80      	cmp	r3, #128	; 0x80
 80098ba:	d107      	bne.n	80098cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fb0c 	bl	8009ee4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098da:	d10e      	bne.n	80098fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e6:	2b80      	cmp	r3, #128	; 0x80
 80098e8:	d107      	bne.n	80098fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80098f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 faff 	bl	8009ef8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009904:	2b40      	cmp	r3, #64	; 0x40
 8009906:	d10e      	bne.n	8009926 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009912:	2b40      	cmp	r3, #64	; 0x40
 8009914:	d107      	bne.n	8009926 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800991e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f903 	bl	8009b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	f003 0320 	and.w	r3, r3, #32
 8009930:	2b20      	cmp	r3, #32
 8009932:	d10e      	bne.n	8009952 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f003 0320 	and.w	r3, r3, #32
 800993e:	2b20      	cmp	r3, #32
 8009940:	d107      	bne.n	8009952 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f06f 0220 	mvn.w	r2, #32
 800994a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fabf 	bl	8009ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009952:	bf00      	nop
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009970:	2b01      	cmp	r3, #1
 8009972:	d101      	bne.n	8009978 <HAL_TIM_ConfigClockSource+0x1c>
 8009974:	2302      	movs	r3, #2
 8009976:	e0b4      	b.n	8009ae2 <HAL_TIM_ConfigClockSource+0x186>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	4b56      	ldr	r3, [pc, #344]	; (8009aec <HAL_TIM_ConfigClockSource+0x190>)
 8009994:	4013      	ands	r3, r2
 8009996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800999e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099b0:	d03e      	beq.n	8009a30 <HAL_TIM_ConfigClockSource+0xd4>
 80099b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099b6:	f200 8087 	bhi.w	8009ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80099ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099be:	f000 8086 	beq.w	8009ace <HAL_TIM_ConfigClockSource+0x172>
 80099c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099c6:	d87f      	bhi.n	8009ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80099c8:	2b70      	cmp	r3, #112	; 0x70
 80099ca:	d01a      	beq.n	8009a02 <HAL_TIM_ConfigClockSource+0xa6>
 80099cc:	2b70      	cmp	r3, #112	; 0x70
 80099ce:	d87b      	bhi.n	8009ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80099d0:	2b60      	cmp	r3, #96	; 0x60
 80099d2:	d050      	beq.n	8009a76 <HAL_TIM_ConfigClockSource+0x11a>
 80099d4:	2b60      	cmp	r3, #96	; 0x60
 80099d6:	d877      	bhi.n	8009ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80099d8:	2b50      	cmp	r3, #80	; 0x50
 80099da:	d03c      	beq.n	8009a56 <HAL_TIM_ConfigClockSource+0xfa>
 80099dc:	2b50      	cmp	r3, #80	; 0x50
 80099de:	d873      	bhi.n	8009ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80099e0:	2b40      	cmp	r3, #64	; 0x40
 80099e2:	d058      	beq.n	8009a96 <HAL_TIM_ConfigClockSource+0x13a>
 80099e4:	2b40      	cmp	r3, #64	; 0x40
 80099e6:	d86f      	bhi.n	8009ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80099e8:	2b30      	cmp	r3, #48	; 0x30
 80099ea:	d064      	beq.n	8009ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80099ec:	2b30      	cmp	r3, #48	; 0x30
 80099ee:	d86b      	bhi.n	8009ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80099f0:	2b20      	cmp	r3, #32
 80099f2:	d060      	beq.n	8009ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	d867      	bhi.n	8009ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d05c      	beq.n	8009ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80099fc:	2b10      	cmp	r3, #16
 80099fe:	d05a      	beq.n	8009ab6 <HAL_TIM_ConfigClockSource+0x15a>
 8009a00:	e062      	b.n	8009ac8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a12:	f000 f9af 	bl	8009d74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	609a      	str	r2, [r3, #8]
      break;
 8009a2e:	e04f      	b.n	8009ad0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a40:	f000 f998 	bl	8009d74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	689a      	ldr	r2, [r3, #8]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a52:	609a      	str	r2, [r3, #8]
      break;
 8009a54:	e03c      	b.n	8009ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a62:	461a      	mov	r2, r3
 8009a64:	f000 f90c 	bl	8009c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2150      	movs	r1, #80	; 0x50
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 f965 	bl	8009d3e <TIM_ITRx_SetConfig>
      break;
 8009a74:	e02c      	b.n	8009ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a82:	461a      	mov	r2, r3
 8009a84:	f000 f92b 	bl	8009cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2160      	movs	r1, #96	; 0x60
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 f955 	bl	8009d3e <TIM_ITRx_SetConfig>
      break;
 8009a94:	e01c      	b.n	8009ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f000 f8ec 	bl	8009c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2140      	movs	r1, #64	; 0x40
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 f945 	bl	8009d3e <TIM_ITRx_SetConfig>
      break;
 8009ab4:	e00c      	b.n	8009ad0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	f000 f93c 	bl	8009d3e <TIM_ITRx_SetConfig>
      break;
 8009ac6:	e003      	b.n	8009ad0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	73fb      	strb	r3, [r7, #15]
      break;
 8009acc:	e000      	b.n	8009ad0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	fffeff88 	.word	0xfffeff88

08009af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a40      	ldr	r2, [pc, #256]	; (8009c54 <TIM_Base_SetConfig+0x114>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d013      	beq.n	8009b80 <TIM_Base_SetConfig+0x40>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b5e:	d00f      	beq.n	8009b80 <TIM_Base_SetConfig+0x40>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a3d      	ldr	r2, [pc, #244]	; (8009c58 <TIM_Base_SetConfig+0x118>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d00b      	beq.n	8009b80 <TIM_Base_SetConfig+0x40>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a3c      	ldr	r2, [pc, #240]	; (8009c5c <TIM_Base_SetConfig+0x11c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d007      	beq.n	8009b80 <TIM_Base_SetConfig+0x40>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a3b      	ldr	r2, [pc, #236]	; (8009c60 <TIM_Base_SetConfig+0x120>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d003      	beq.n	8009b80 <TIM_Base_SetConfig+0x40>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a3a      	ldr	r2, [pc, #232]	; (8009c64 <TIM_Base_SetConfig+0x124>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d108      	bne.n	8009b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a2f      	ldr	r2, [pc, #188]	; (8009c54 <TIM_Base_SetConfig+0x114>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d02b      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ba0:	d027      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a2c      	ldr	r2, [pc, #176]	; (8009c58 <TIM_Base_SetConfig+0x118>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d023      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a2b      	ldr	r2, [pc, #172]	; (8009c5c <TIM_Base_SetConfig+0x11c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d01f      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a2a      	ldr	r2, [pc, #168]	; (8009c60 <TIM_Base_SetConfig+0x120>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d01b      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a29      	ldr	r2, [pc, #164]	; (8009c64 <TIM_Base_SetConfig+0x124>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d017      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a28      	ldr	r2, [pc, #160]	; (8009c68 <TIM_Base_SetConfig+0x128>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d013      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a27      	ldr	r2, [pc, #156]	; (8009c6c <TIM_Base_SetConfig+0x12c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d00f      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a26      	ldr	r2, [pc, #152]	; (8009c70 <TIM_Base_SetConfig+0x130>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d00b      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a25      	ldr	r2, [pc, #148]	; (8009c74 <TIM_Base_SetConfig+0x134>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d007      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a24      	ldr	r2, [pc, #144]	; (8009c78 <TIM_Base_SetConfig+0x138>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d003      	beq.n	8009bf2 <TIM_Base_SetConfig+0xb2>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a23      	ldr	r2, [pc, #140]	; (8009c7c <TIM_Base_SetConfig+0x13c>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d108      	bne.n	8009c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	695b      	ldr	r3, [r3, #20]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	689a      	ldr	r2, [r3, #8]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a0a      	ldr	r2, [pc, #40]	; (8009c54 <TIM_Base_SetConfig+0x114>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d003      	beq.n	8009c38 <TIM_Base_SetConfig+0xf8>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a0c      	ldr	r2, [pc, #48]	; (8009c64 <TIM_Base_SetConfig+0x124>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d103      	bne.n	8009c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	615a      	str	r2, [r3, #20]
}
 8009c46:	bf00      	nop
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	40010000 	.word	0x40010000
 8009c58:	40000400 	.word	0x40000400
 8009c5c:	40000800 	.word	0x40000800
 8009c60:	40000c00 	.word	0x40000c00
 8009c64:	40010400 	.word	0x40010400
 8009c68:	40014000 	.word	0x40014000
 8009c6c:	40014400 	.word	0x40014400
 8009c70:	40014800 	.word	0x40014800
 8009c74:	40001800 	.word	0x40001800
 8009c78:	40001c00 	.word	0x40001c00
 8009c7c:	40002000 	.word	0x40002000

08009c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	f023 0201 	bic.w	r2, r3, #1
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f023 030a 	bic.w	r3, r3, #10
 8009cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	621a      	str	r2, [r3, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b087      	sub	sp, #28
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	60f8      	str	r0, [r7, #12]
 8009ce6:	60b9      	str	r1, [r7, #8]
 8009ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	f023 0210 	bic.w	r2, r3, #16
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	031b      	lsls	r3, r3, #12
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	693a      	ldr	r2, [r7, #16]
 8009d30:	621a      	str	r2, [r3, #32]
}
 8009d32:	bf00      	nop
 8009d34:	371c      	adds	r7, #28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	f043 0307 	orr.w	r3, r3, #7
 8009d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	609a      	str	r2, [r3, #8]
}
 8009d68:	bf00      	nop
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	021a      	lsls	r2, r3, #8
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	431a      	orrs	r2, r3
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	609a      	str	r2, [r3, #8]
}
 8009da8:	bf00      	nop
 8009daa:	371c      	adds	r7, #28
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d101      	bne.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	e06d      	b.n	8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a30      	ldr	r2, [pc, #192]	; (8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d004      	beq.n	8009e00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a2f      	ldr	r2, [pc, #188]	; (8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d108      	bne.n	8009e12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a20      	ldr	r2, [pc, #128]	; (8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d022      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3e:	d01d      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a1d      	ldr	r2, [pc, #116]	; (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d018      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a1c      	ldr	r2, [pc, #112]	; (8009ec0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d013      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a1a      	ldr	r2, [pc, #104]	; (8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d00e      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a15      	ldr	r2, [pc, #84]	; (8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d009      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a16      	ldr	r2, [pc, #88]	; (8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d004      	beq.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a15      	ldr	r2, [pc, #84]	; (8009ecc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d10c      	bne.n	8009e96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	40010000 	.word	0x40010000
 8009eb8:	40010400 	.word	0x40010400
 8009ebc:	40000400 	.word	0x40000400
 8009ec0:	40000800 	.word	0x40000800
 8009ec4:	40000c00 	.word	0x40000c00
 8009ec8:	40014000 	.word	0x40014000
 8009ecc:	40001800 	.word	0x40001800

08009ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e040      	b.n	8009fa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d106      	bne.n	8009f34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7fa fbd6 	bl	80046e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2224      	movs	r2, #36	; 0x24
 8009f38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f022 0201 	bic.w	r2, r2, #1
 8009f48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f974 	bl	800a238 <UART_SetConfig>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e022      	b.n	8009fa0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fbcc 	bl	800a700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f042 0201 	orr.w	r2, r2, #1
 8009f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fc53 	bl	800a844 <UART_CheckIdleState>
 8009f9e:	4603      	mov	r3, r0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af02      	add	r7, sp, #8
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fbc:	2b20      	cmp	r3, #32
 8009fbe:	d171      	bne.n	800a0a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d002      	beq.n	8009fcc <HAL_UART_Transmit+0x24>
 8009fc6:	88fb      	ldrh	r3, [r7, #6]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e06a      	b.n	800a0a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2221      	movs	r2, #33	; 0x21
 8009fdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fde:	f7fa fcd9 	bl	8004994 <HAL_GetTick>
 8009fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	88fa      	ldrh	r2, [r7, #6]
 8009fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	88fa      	ldrh	r2, [r7, #6]
 8009ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ffc:	d108      	bne.n	800a010 <HAL_UART_Transmit+0x68>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d104      	bne.n	800a010 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a006:	2300      	movs	r3, #0
 800a008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	61bb      	str	r3, [r7, #24]
 800a00e:	e003      	b.n	800a018 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a018:	e02c      	b.n	800a074 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2200      	movs	r2, #0
 800a022:	2180      	movs	r1, #128	; 0x80
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 fc44 	bl	800a8b2 <UART_WaitOnFlagUntilTimeout>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e038      	b.n	800a0a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10b      	bne.n	800a052 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a048:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	3302      	adds	r3, #2
 800a04e:	61bb      	str	r3, [r7, #24]
 800a050:	e007      	b.n	800a062 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	781a      	ldrb	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	3301      	adds	r3, #1
 800a060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1cc      	bne.n	800a01a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2200      	movs	r2, #0
 800a088:	2140      	movs	r1, #64	; 0x40
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 fc11 	bl	800a8b2 <UART_WaitOnFlagUntilTimeout>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e005      	b.n	800a0a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2220      	movs	r2, #32
 800a09e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	e000      	b.n	800a0a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a0a4:	2302      	movs	r3, #2
  }
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3720      	adds	r7, #32
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b08a      	sub	sp, #40	; 0x28
 800a0b2:	af02      	add	r7, sp, #8
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	60b9      	str	r1, [r7, #8]
 800a0b8:	603b      	str	r3, [r7, #0]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0c4:	2b20      	cmp	r3, #32
 800a0c6:	f040 80b1 	bne.w	800a22c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <HAL_UART_Receive+0x28>
 800a0d0:	88fb      	ldrh	r3, [r7, #6]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e0a9      	b.n	800a22e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2222      	movs	r2, #34	; 0x22
 800a0e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0f0:	f7fa fc50 	bl	8004994 <HAL_GetTick>
 800a0f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	88fa      	ldrh	r2, [r7, #6]
 800a0fa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	88fa      	ldrh	r2, [r7, #6]
 800a102:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a10e:	d10e      	bne.n	800a12e <HAL_UART_Receive+0x80>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d105      	bne.n	800a124 <HAL_UART_Receive+0x76>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a11e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a122:	e02d      	b.n	800a180 <HAL_UART_Receive+0xd2>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	22ff      	movs	r2, #255	; 0xff
 800a128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a12c:	e028      	b.n	800a180 <HAL_UART_Receive+0xd2>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10d      	bne.n	800a152 <HAL_UART_Receive+0xa4>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d104      	bne.n	800a148 <HAL_UART_Receive+0x9a>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	22ff      	movs	r2, #255	; 0xff
 800a142:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a146:	e01b      	b.n	800a180 <HAL_UART_Receive+0xd2>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	227f      	movs	r2, #127	; 0x7f
 800a14c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a150:	e016      	b.n	800a180 <HAL_UART_Receive+0xd2>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a15a:	d10d      	bne.n	800a178 <HAL_UART_Receive+0xca>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d104      	bne.n	800a16e <HAL_UART_Receive+0xc0>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	227f      	movs	r2, #127	; 0x7f
 800a168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a16c:	e008      	b.n	800a180 <HAL_UART_Receive+0xd2>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	223f      	movs	r2, #63	; 0x3f
 800a172:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a176:	e003      	b.n	800a180 <HAL_UART_Receive+0xd2>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a186:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a190:	d108      	bne.n	800a1a4 <HAL_UART_Receive+0xf6>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d104      	bne.n	800a1a4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	61bb      	str	r3, [r7, #24]
 800a1a2:	e003      	b.n	800a1ac <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a1ac:	e032      	b.n	800a214 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2120      	movs	r1, #32
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 fb7a 	bl	800a8b2 <UART_WaitOnFlagUntilTimeout>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e032      	b.n	800a22e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10c      	bne.n	800a1e8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	8a7b      	ldrh	r3, [r7, #18]
 800a1d8:	4013      	ands	r3, r2
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	3302      	adds	r3, #2
 800a1e4:	61bb      	str	r3, [r7, #24]
 800a1e6:	e00c      	b.n	800a202 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	8a7b      	ldrh	r3, [r7, #18]
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	b2da      	uxtb	r2, r3
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	3301      	adds	r3, #1
 800a200:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a208:	b29b      	uxth	r3, r3
 800a20a:	3b01      	subs	r3, #1
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1c6      	bne.n	800a1ae <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2220      	movs	r2, #32
 800a224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	e000      	b.n	800a22e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800a22c:	2302      	movs	r3, #2
  }
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3720      	adds	r7, #32
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689a      	ldr	r2, [r3, #8]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	431a      	orrs	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	431a      	orrs	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	4313      	orrs	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	4ba6      	ldr	r3, [pc, #664]	; (800a4fc <UART_SetConfig+0x2c4>)
 800a264:	4013      	ands	r3, r2
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	6812      	ldr	r2, [r2, #0]
 800a26a:	6979      	ldr	r1, [r7, #20]
 800a26c:	430b      	orrs	r3, r1
 800a26e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a1b      	ldr	r3, [r3, #32]
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	4313      	orrs	r3, r2
 800a294:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	697a      	ldr	r2, [r7, #20]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a94      	ldr	r2, [pc, #592]	; (800a500 <UART_SetConfig+0x2c8>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d120      	bne.n	800a2f6 <UART_SetConfig+0xbe>
 800a2b4:	4b93      	ldr	r3, [pc, #588]	; (800a504 <UART_SetConfig+0x2cc>)
 800a2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ba:	f003 0303 	and.w	r3, r3, #3
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d816      	bhi.n	800a2f0 <UART_SetConfig+0xb8>
 800a2c2:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <UART_SetConfig+0x90>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a2d9 	.word	0x0800a2d9
 800a2cc:	0800a2e5 	.word	0x0800a2e5
 800a2d0:	0800a2df 	.word	0x0800a2df
 800a2d4:	0800a2eb 	.word	0x0800a2eb
 800a2d8:	2301      	movs	r3, #1
 800a2da:	77fb      	strb	r3, [r7, #31]
 800a2dc:	e150      	b.n	800a580 <UART_SetConfig+0x348>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	77fb      	strb	r3, [r7, #31]
 800a2e2:	e14d      	b.n	800a580 <UART_SetConfig+0x348>
 800a2e4:	2304      	movs	r3, #4
 800a2e6:	77fb      	strb	r3, [r7, #31]
 800a2e8:	e14a      	b.n	800a580 <UART_SetConfig+0x348>
 800a2ea:	2308      	movs	r3, #8
 800a2ec:	77fb      	strb	r3, [r7, #31]
 800a2ee:	e147      	b.n	800a580 <UART_SetConfig+0x348>
 800a2f0:	2310      	movs	r3, #16
 800a2f2:	77fb      	strb	r3, [r7, #31]
 800a2f4:	e144      	b.n	800a580 <UART_SetConfig+0x348>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a83      	ldr	r2, [pc, #524]	; (800a508 <UART_SetConfig+0x2d0>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d132      	bne.n	800a366 <UART_SetConfig+0x12e>
 800a300:	4b80      	ldr	r3, [pc, #512]	; (800a504 <UART_SetConfig+0x2cc>)
 800a302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a306:	f003 030c 	and.w	r3, r3, #12
 800a30a:	2b0c      	cmp	r3, #12
 800a30c:	d828      	bhi.n	800a360 <UART_SetConfig+0x128>
 800a30e:	a201      	add	r2, pc, #4	; (adr r2, 800a314 <UART_SetConfig+0xdc>)
 800a310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a314:	0800a349 	.word	0x0800a349
 800a318:	0800a361 	.word	0x0800a361
 800a31c:	0800a361 	.word	0x0800a361
 800a320:	0800a361 	.word	0x0800a361
 800a324:	0800a355 	.word	0x0800a355
 800a328:	0800a361 	.word	0x0800a361
 800a32c:	0800a361 	.word	0x0800a361
 800a330:	0800a361 	.word	0x0800a361
 800a334:	0800a34f 	.word	0x0800a34f
 800a338:	0800a361 	.word	0x0800a361
 800a33c:	0800a361 	.word	0x0800a361
 800a340:	0800a361 	.word	0x0800a361
 800a344:	0800a35b 	.word	0x0800a35b
 800a348:	2300      	movs	r3, #0
 800a34a:	77fb      	strb	r3, [r7, #31]
 800a34c:	e118      	b.n	800a580 <UART_SetConfig+0x348>
 800a34e:	2302      	movs	r3, #2
 800a350:	77fb      	strb	r3, [r7, #31]
 800a352:	e115      	b.n	800a580 <UART_SetConfig+0x348>
 800a354:	2304      	movs	r3, #4
 800a356:	77fb      	strb	r3, [r7, #31]
 800a358:	e112      	b.n	800a580 <UART_SetConfig+0x348>
 800a35a:	2308      	movs	r3, #8
 800a35c:	77fb      	strb	r3, [r7, #31]
 800a35e:	e10f      	b.n	800a580 <UART_SetConfig+0x348>
 800a360:	2310      	movs	r3, #16
 800a362:	77fb      	strb	r3, [r7, #31]
 800a364:	e10c      	b.n	800a580 <UART_SetConfig+0x348>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a68      	ldr	r2, [pc, #416]	; (800a50c <UART_SetConfig+0x2d4>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d120      	bne.n	800a3b2 <UART_SetConfig+0x17a>
 800a370:	4b64      	ldr	r3, [pc, #400]	; (800a504 <UART_SetConfig+0x2cc>)
 800a372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a376:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a37a:	2b30      	cmp	r3, #48	; 0x30
 800a37c:	d013      	beq.n	800a3a6 <UART_SetConfig+0x16e>
 800a37e:	2b30      	cmp	r3, #48	; 0x30
 800a380:	d814      	bhi.n	800a3ac <UART_SetConfig+0x174>
 800a382:	2b20      	cmp	r3, #32
 800a384:	d009      	beq.n	800a39a <UART_SetConfig+0x162>
 800a386:	2b20      	cmp	r3, #32
 800a388:	d810      	bhi.n	800a3ac <UART_SetConfig+0x174>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <UART_SetConfig+0x15c>
 800a38e:	2b10      	cmp	r3, #16
 800a390:	d006      	beq.n	800a3a0 <UART_SetConfig+0x168>
 800a392:	e00b      	b.n	800a3ac <UART_SetConfig+0x174>
 800a394:	2300      	movs	r3, #0
 800a396:	77fb      	strb	r3, [r7, #31]
 800a398:	e0f2      	b.n	800a580 <UART_SetConfig+0x348>
 800a39a:	2302      	movs	r3, #2
 800a39c:	77fb      	strb	r3, [r7, #31]
 800a39e:	e0ef      	b.n	800a580 <UART_SetConfig+0x348>
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	77fb      	strb	r3, [r7, #31]
 800a3a4:	e0ec      	b.n	800a580 <UART_SetConfig+0x348>
 800a3a6:	2308      	movs	r3, #8
 800a3a8:	77fb      	strb	r3, [r7, #31]
 800a3aa:	e0e9      	b.n	800a580 <UART_SetConfig+0x348>
 800a3ac:	2310      	movs	r3, #16
 800a3ae:	77fb      	strb	r3, [r7, #31]
 800a3b0:	e0e6      	b.n	800a580 <UART_SetConfig+0x348>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a56      	ldr	r2, [pc, #344]	; (800a510 <UART_SetConfig+0x2d8>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d120      	bne.n	800a3fe <UART_SetConfig+0x1c6>
 800a3bc:	4b51      	ldr	r3, [pc, #324]	; (800a504 <UART_SetConfig+0x2cc>)
 800a3be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3c6:	2bc0      	cmp	r3, #192	; 0xc0
 800a3c8:	d013      	beq.n	800a3f2 <UART_SetConfig+0x1ba>
 800a3ca:	2bc0      	cmp	r3, #192	; 0xc0
 800a3cc:	d814      	bhi.n	800a3f8 <UART_SetConfig+0x1c0>
 800a3ce:	2b80      	cmp	r3, #128	; 0x80
 800a3d0:	d009      	beq.n	800a3e6 <UART_SetConfig+0x1ae>
 800a3d2:	2b80      	cmp	r3, #128	; 0x80
 800a3d4:	d810      	bhi.n	800a3f8 <UART_SetConfig+0x1c0>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <UART_SetConfig+0x1a8>
 800a3da:	2b40      	cmp	r3, #64	; 0x40
 800a3dc:	d006      	beq.n	800a3ec <UART_SetConfig+0x1b4>
 800a3de:	e00b      	b.n	800a3f8 <UART_SetConfig+0x1c0>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	77fb      	strb	r3, [r7, #31]
 800a3e4:	e0cc      	b.n	800a580 <UART_SetConfig+0x348>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	77fb      	strb	r3, [r7, #31]
 800a3ea:	e0c9      	b.n	800a580 <UART_SetConfig+0x348>
 800a3ec:	2304      	movs	r3, #4
 800a3ee:	77fb      	strb	r3, [r7, #31]
 800a3f0:	e0c6      	b.n	800a580 <UART_SetConfig+0x348>
 800a3f2:	2308      	movs	r3, #8
 800a3f4:	77fb      	strb	r3, [r7, #31]
 800a3f6:	e0c3      	b.n	800a580 <UART_SetConfig+0x348>
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	77fb      	strb	r3, [r7, #31]
 800a3fc:	e0c0      	b.n	800a580 <UART_SetConfig+0x348>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a44      	ldr	r2, [pc, #272]	; (800a514 <UART_SetConfig+0x2dc>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d125      	bne.n	800a454 <UART_SetConfig+0x21c>
 800a408:	4b3e      	ldr	r3, [pc, #248]	; (800a504 <UART_SetConfig+0x2cc>)
 800a40a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a40e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a416:	d017      	beq.n	800a448 <UART_SetConfig+0x210>
 800a418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a41c:	d817      	bhi.n	800a44e <UART_SetConfig+0x216>
 800a41e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a422:	d00b      	beq.n	800a43c <UART_SetConfig+0x204>
 800a424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a428:	d811      	bhi.n	800a44e <UART_SetConfig+0x216>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <UART_SetConfig+0x1fe>
 800a42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a432:	d006      	beq.n	800a442 <UART_SetConfig+0x20a>
 800a434:	e00b      	b.n	800a44e <UART_SetConfig+0x216>
 800a436:	2300      	movs	r3, #0
 800a438:	77fb      	strb	r3, [r7, #31]
 800a43a:	e0a1      	b.n	800a580 <UART_SetConfig+0x348>
 800a43c:	2302      	movs	r3, #2
 800a43e:	77fb      	strb	r3, [r7, #31]
 800a440:	e09e      	b.n	800a580 <UART_SetConfig+0x348>
 800a442:	2304      	movs	r3, #4
 800a444:	77fb      	strb	r3, [r7, #31]
 800a446:	e09b      	b.n	800a580 <UART_SetConfig+0x348>
 800a448:	2308      	movs	r3, #8
 800a44a:	77fb      	strb	r3, [r7, #31]
 800a44c:	e098      	b.n	800a580 <UART_SetConfig+0x348>
 800a44e:	2310      	movs	r3, #16
 800a450:	77fb      	strb	r3, [r7, #31]
 800a452:	e095      	b.n	800a580 <UART_SetConfig+0x348>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a2f      	ldr	r2, [pc, #188]	; (800a518 <UART_SetConfig+0x2e0>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d125      	bne.n	800a4aa <UART_SetConfig+0x272>
 800a45e:	4b29      	ldr	r3, [pc, #164]	; (800a504 <UART_SetConfig+0x2cc>)
 800a460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a46c:	d017      	beq.n	800a49e <UART_SetConfig+0x266>
 800a46e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a472:	d817      	bhi.n	800a4a4 <UART_SetConfig+0x26c>
 800a474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a478:	d00b      	beq.n	800a492 <UART_SetConfig+0x25a>
 800a47a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a47e:	d811      	bhi.n	800a4a4 <UART_SetConfig+0x26c>
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <UART_SetConfig+0x254>
 800a484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a488:	d006      	beq.n	800a498 <UART_SetConfig+0x260>
 800a48a:	e00b      	b.n	800a4a4 <UART_SetConfig+0x26c>
 800a48c:	2301      	movs	r3, #1
 800a48e:	77fb      	strb	r3, [r7, #31]
 800a490:	e076      	b.n	800a580 <UART_SetConfig+0x348>
 800a492:	2302      	movs	r3, #2
 800a494:	77fb      	strb	r3, [r7, #31]
 800a496:	e073      	b.n	800a580 <UART_SetConfig+0x348>
 800a498:	2304      	movs	r3, #4
 800a49a:	77fb      	strb	r3, [r7, #31]
 800a49c:	e070      	b.n	800a580 <UART_SetConfig+0x348>
 800a49e:	2308      	movs	r3, #8
 800a4a0:	77fb      	strb	r3, [r7, #31]
 800a4a2:	e06d      	b.n	800a580 <UART_SetConfig+0x348>
 800a4a4:	2310      	movs	r3, #16
 800a4a6:	77fb      	strb	r3, [r7, #31]
 800a4a8:	e06a      	b.n	800a580 <UART_SetConfig+0x348>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a1b      	ldr	r2, [pc, #108]	; (800a51c <UART_SetConfig+0x2e4>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d138      	bne.n	800a526 <UART_SetConfig+0x2ee>
 800a4b4:	4b13      	ldr	r3, [pc, #76]	; (800a504 <UART_SetConfig+0x2cc>)
 800a4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a4be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4c2:	d017      	beq.n	800a4f4 <UART_SetConfig+0x2bc>
 800a4c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4c8:	d82a      	bhi.n	800a520 <UART_SetConfig+0x2e8>
 800a4ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4ce:	d00b      	beq.n	800a4e8 <UART_SetConfig+0x2b0>
 800a4d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4d4:	d824      	bhi.n	800a520 <UART_SetConfig+0x2e8>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <UART_SetConfig+0x2aa>
 800a4da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4de:	d006      	beq.n	800a4ee <UART_SetConfig+0x2b6>
 800a4e0:	e01e      	b.n	800a520 <UART_SetConfig+0x2e8>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	77fb      	strb	r3, [r7, #31]
 800a4e6:	e04b      	b.n	800a580 <UART_SetConfig+0x348>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	77fb      	strb	r3, [r7, #31]
 800a4ec:	e048      	b.n	800a580 <UART_SetConfig+0x348>
 800a4ee:	2304      	movs	r3, #4
 800a4f0:	77fb      	strb	r3, [r7, #31]
 800a4f2:	e045      	b.n	800a580 <UART_SetConfig+0x348>
 800a4f4:	2308      	movs	r3, #8
 800a4f6:	77fb      	strb	r3, [r7, #31]
 800a4f8:	e042      	b.n	800a580 <UART_SetConfig+0x348>
 800a4fa:	bf00      	nop
 800a4fc:	efff69f3 	.word	0xefff69f3
 800a500:	40011000 	.word	0x40011000
 800a504:	40023800 	.word	0x40023800
 800a508:	40004400 	.word	0x40004400
 800a50c:	40004800 	.word	0x40004800
 800a510:	40004c00 	.word	0x40004c00
 800a514:	40005000 	.word	0x40005000
 800a518:	40011400 	.word	0x40011400
 800a51c:	40007800 	.word	0x40007800
 800a520:	2310      	movs	r3, #16
 800a522:	77fb      	strb	r3, [r7, #31]
 800a524:	e02c      	b.n	800a580 <UART_SetConfig+0x348>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a72      	ldr	r2, [pc, #456]	; (800a6f4 <UART_SetConfig+0x4bc>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d125      	bne.n	800a57c <UART_SetConfig+0x344>
 800a530:	4b71      	ldr	r3, [pc, #452]	; (800a6f8 <UART_SetConfig+0x4c0>)
 800a532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a536:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a53a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a53e:	d017      	beq.n	800a570 <UART_SetConfig+0x338>
 800a540:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a544:	d817      	bhi.n	800a576 <UART_SetConfig+0x33e>
 800a546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a54a:	d00b      	beq.n	800a564 <UART_SetConfig+0x32c>
 800a54c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a550:	d811      	bhi.n	800a576 <UART_SetConfig+0x33e>
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <UART_SetConfig+0x326>
 800a556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a55a:	d006      	beq.n	800a56a <UART_SetConfig+0x332>
 800a55c:	e00b      	b.n	800a576 <UART_SetConfig+0x33e>
 800a55e:	2300      	movs	r3, #0
 800a560:	77fb      	strb	r3, [r7, #31]
 800a562:	e00d      	b.n	800a580 <UART_SetConfig+0x348>
 800a564:	2302      	movs	r3, #2
 800a566:	77fb      	strb	r3, [r7, #31]
 800a568:	e00a      	b.n	800a580 <UART_SetConfig+0x348>
 800a56a:	2304      	movs	r3, #4
 800a56c:	77fb      	strb	r3, [r7, #31]
 800a56e:	e007      	b.n	800a580 <UART_SetConfig+0x348>
 800a570:	2308      	movs	r3, #8
 800a572:	77fb      	strb	r3, [r7, #31]
 800a574:	e004      	b.n	800a580 <UART_SetConfig+0x348>
 800a576:	2310      	movs	r3, #16
 800a578:	77fb      	strb	r3, [r7, #31]
 800a57a:	e001      	b.n	800a580 <UART_SetConfig+0x348>
 800a57c:	2310      	movs	r3, #16
 800a57e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	69db      	ldr	r3, [r3, #28]
 800a584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a588:	d15b      	bne.n	800a642 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a58a:	7ffb      	ldrb	r3, [r7, #31]
 800a58c:	2b08      	cmp	r3, #8
 800a58e:	d828      	bhi.n	800a5e2 <UART_SetConfig+0x3aa>
 800a590:	a201      	add	r2, pc, #4	; (adr r2, 800a598 <UART_SetConfig+0x360>)
 800a592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a596:	bf00      	nop
 800a598:	0800a5bd 	.word	0x0800a5bd
 800a59c:	0800a5c5 	.word	0x0800a5c5
 800a5a0:	0800a5cd 	.word	0x0800a5cd
 800a5a4:	0800a5e3 	.word	0x0800a5e3
 800a5a8:	0800a5d3 	.word	0x0800a5d3
 800a5ac:	0800a5e3 	.word	0x0800a5e3
 800a5b0:	0800a5e3 	.word	0x0800a5e3
 800a5b4:	0800a5e3 	.word	0x0800a5e3
 800a5b8:	0800a5db 	.word	0x0800a5db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5bc:	f7fd fe82 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 800a5c0:	61b8      	str	r0, [r7, #24]
        break;
 800a5c2:	e013      	b.n	800a5ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5c4:	f7fd fe92 	bl	80082ec <HAL_RCC_GetPCLK2Freq>
 800a5c8:	61b8      	str	r0, [r7, #24]
        break;
 800a5ca:	e00f      	b.n	800a5ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5cc:	4b4b      	ldr	r3, [pc, #300]	; (800a6fc <UART_SetConfig+0x4c4>)
 800a5ce:	61bb      	str	r3, [r7, #24]
        break;
 800a5d0:	e00c      	b.n	800a5ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5d2:	f7fd fda5 	bl	8008120 <HAL_RCC_GetSysClockFreq>
 800a5d6:	61b8      	str	r0, [r7, #24]
        break;
 800a5d8:	e008      	b.n	800a5ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5de:	61bb      	str	r3, [r7, #24]
        break;
 800a5e0:	e004      	b.n	800a5ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	77bb      	strb	r3, [r7, #30]
        break;
 800a5ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d074      	beq.n	800a6dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	005a      	lsls	r2, r3, #1
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	085b      	lsrs	r3, r3, #1
 800a5fc:	441a      	add	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	fbb2 f3f3 	udiv	r3, r2, r3
 800a606:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	2b0f      	cmp	r3, #15
 800a60c:	d916      	bls.n	800a63c <UART_SetConfig+0x404>
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a614:	d212      	bcs.n	800a63c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	f023 030f 	bic.w	r3, r3, #15
 800a61e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	085b      	lsrs	r3, r3, #1
 800a624:	b29b      	uxth	r3, r3
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	89fb      	ldrh	r3, [r7, #14]
 800a62e:	4313      	orrs	r3, r2
 800a630:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	89fa      	ldrh	r2, [r7, #14]
 800a638:	60da      	str	r2, [r3, #12]
 800a63a:	e04f      	b.n	800a6dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	77bb      	strb	r3, [r7, #30]
 800a640:	e04c      	b.n	800a6dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a642:	7ffb      	ldrb	r3, [r7, #31]
 800a644:	2b08      	cmp	r3, #8
 800a646:	d828      	bhi.n	800a69a <UART_SetConfig+0x462>
 800a648:	a201      	add	r2, pc, #4	; (adr r2, 800a650 <UART_SetConfig+0x418>)
 800a64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64e:	bf00      	nop
 800a650:	0800a675 	.word	0x0800a675
 800a654:	0800a67d 	.word	0x0800a67d
 800a658:	0800a685 	.word	0x0800a685
 800a65c:	0800a69b 	.word	0x0800a69b
 800a660:	0800a68b 	.word	0x0800a68b
 800a664:	0800a69b 	.word	0x0800a69b
 800a668:	0800a69b 	.word	0x0800a69b
 800a66c:	0800a69b 	.word	0x0800a69b
 800a670:	0800a693 	.word	0x0800a693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a674:	f7fd fe26 	bl	80082c4 <HAL_RCC_GetPCLK1Freq>
 800a678:	61b8      	str	r0, [r7, #24]
        break;
 800a67a:	e013      	b.n	800a6a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a67c:	f7fd fe36 	bl	80082ec <HAL_RCC_GetPCLK2Freq>
 800a680:	61b8      	str	r0, [r7, #24]
        break;
 800a682:	e00f      	b.n	800a6a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a684:	4b1d      	ldr	r3, [pc, #116]	; (800a6fc <UART_SetConfig+0x4c4>)
 800a686:	61bb      	str	r3, [r7, #24]
        break;
 800a688:	e00c      	b.n	800a6a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a68a:	f7fd fd49 	bl	8008120 <HAL_RCC_GetSysClockFreq>
 800a68e:	61b8      	str	r0, [r7, #24]
        break;
 800a690:	e008      	b.n	800a6a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a696:	61bb      	str	r3, [r7, #24]
        break;
 800a698:	e004      	b.n	800a6a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a69a:	2300      	movs	r3, #0
 800a69c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	77bb      	strb	r3, [r7, #30]
        break;
 800a6a2:	bf00      	nop
    }

    if (pclk != 0U)
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d018      	beq.n	800a6dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	085a      	lsrs	r2, r3, #1
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	441a      	add	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	2b0f      	cmp	r3, #15
 800a6c2:	d909      	bls.n	800a6d8 <UART_SetConfig+0x4a0>
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6ca:	d205      	bcs.n	800a6d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	60da      	str	r2, [r3, #12]
 800a6d6:	e001      	b.n	800a6dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a6e8:	7fbb      	ldrb	r3, [r7, #30]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3720      	adds	r7, #32
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	40007c00 	.word	0x40007c00
 800a6f8:	40023800 	.word	0x40023800
 800a6fc:	00f42400 	.word	0x00f42400

0800a700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00a      	beq.n	800a72a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	430a      	orrs	r2, r1
 800a728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	f003 0302 	and.w	r3, r3, #2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a772:	f003 0308 	and.w	r3, r3, #8
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	430a      	orrs	r2, r1
 800a78e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b6:	f003 0320 	and.w	r3, r3, #32
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00a      	beq.n	800a7d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01a      	beq.n	800a816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7fe:	d10a      	bne.n	800a816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	430a      	orrs	r2, r1
 800a814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00a      	beq.n	800a838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	430a      	orrs	r2, r1
 800a836:	605a      	str	r2, [r3, #4]
  }
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af02      	add	r7, sp, #8
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a854:	f7fa f89e 	bl	8004994 <HAL_GetTick>
 800a858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0308 	and.w	r3, r3, #8
 800a864:	2b08      	cmp	r3, #8
 800a866:	d10e      	bne.n	800a886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f81b 	bl	800a8b2 <UART_WaitOnFlagUntilTimeout>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e011      	b.n	800a8aa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2220      	movs	r2, #32
 800a88a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2220      	movs	r2, #32
 800a890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b09c      	sub	sp, #112	; 0x70
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	603b      	str	r3, [r7, #0]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8c2:	e0a7      	b.n	800aa14 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ca:	f000 80a3 	beq.w	800aa14 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ce:	f7fa f861 	bl	8004994 <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d302      	bcc.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a8de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d13f      	bne.n	800a964 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8f8:	667b      	str	r3, [r7, #100]	; 0x64
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a902:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a904:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a908:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e6      	bne.n	800a8e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	f023 0301 	bic.w	r3, r3, #1
 800a92c:	663b      	str	r3, [r7, #96]	; 0x60
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3308      	adds	r3, #8
 800a934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a936:	64ba      	str	r2, [r7, #72]	; 0x48
 800a938:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a93c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e5      	bne.n	800a916 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2220      	movs	r2, #32
 800a94e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2220      	movs	r2, #32
 800a954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a960:	2303      	movs	r3, #3
 800a962:	e068      	b.n	800aa36 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0304 	and.w	r3, r3, #4
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d050      	beq.n	800aa14 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a97c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a980:	d148      	bne.n	800aa14 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a98a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9aa:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e6      	bne.n	800a98c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	f023 0301 	bic.w	r3, r3, #1
 800a9d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3308      	adds	r3, #8
 800a9dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9de:	623a      	str	r2, [r7, #32]
 800a9e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	69f9      	ldr	r1, [r7, #28]
 800a9e4:	6a3a      	ldr	r2, [r7, #32]
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e5      	bne.n	800a9be <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2220      	movs	r2, #32
 800aa04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800aa10:	2303      	movs	r3, #3
 800aa12:	e010      	b.n	800aa36 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	69da      	ldr	r2, [r3, #28]
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	bf0c      	ite	eq
 800aa24:	2301      	moveq	r3, #1
 800aa26:	2300      	movne	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	f43f af48 	beq.w	800a8c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3770      	adds	r7, #112	; 0x70
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d121      	bne.n	800aa96 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	4b27      	ldr	r3, [pc, #156]	; (800aaf4 <FMC_SDRAM_Init+0xb4>)
 800aa58:	4013      	ands	r3, r2
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	6851      	ldr	r1, [r2, #4]
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	6892      	ldr	r2, [r2, #8]
 800aa62:	4311      	orrs	r1, r2
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	68d2      	ldr	r2, [r2, #12]
 800aa68:	4311      	orrs	r1, r2
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	6912      	ldr	r2, [r2, #16]
 800aa6e:	4311      	orrs	r1, r2
 800aa70:	683a      	ldr	r2, [r7, #0]
 800aa72:	6952      	ldr	r2, [r2, #20]
 800aa74:	4311      	orrs	r1, r2
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	6992      	ldr	r2, [r2, #24]
 800aa7a:	4311      	orrs	r1, r2
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	69d2      	ldr	r2, [r2, #28]
 800aa80:	4311      	orrs	r1, r2
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	6a12      	ldr	r2, [r2, #32]
 800aa86:	4311      	orrs	r1, r2
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	e026      	b.n	800aae4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	69d9      	ldr	r1, [r3, #28]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	4319      	orrs	r1, r3
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaac:	430b      	orrs	r3, r1
 800aaae:	431a      	orrs	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	4b0e      	ldr	r3, [pc, #56]	; (800aaf4 <FMC_SDRAM_Init+0xb4>)
 800aaba:	4013      	ands	r3, r2
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	6851      	ldr	r1, [r2, #4]
 800aac0:	683a      	ldr	r2, [r7, #0]
 800aac2:	6892      	ldr	r2, [r2, #8]
 800aac4:	4311      	orrs	r1, r2
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	68d2      	ldr	r2, [r2, #12]
 800aaca:	4311      	orrs	r1, r2
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	6912      	ldr	r2, [r2, #16]
 800aad0:	4311      	orrs	r1, r2
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	6952      	ldr	r2, [r2, #20]
 800aad6:	4311      	orrs	r1, r2
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	6992      	ldr	r2, [r2, #24]
 800aadc:	430a      	orrs	r2, r1
 800aade:	431a      	orrs	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	ffff8000 	.word	0xffff8000

0800aaf8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d128      	bne.n	800ab5c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	1e59      	subs	r1, r3, #1
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	011b      	lsls	r3, r3, #4
 800ab20:	4319      	orrs	r1, r3
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	3b01      	subs	r3, #1
 800ab28:	021b      	lsls	r3, r3, #8
 800ab2a:	4319      	orrs	r1, r3
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	031b      	lsls	r3, r3, #12
 800ab34:	4319      	orrs	r1, r3
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	041b      	lsls	r3, r3, #16
 800ab3e:	4319      	orrs	r1, r3
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	695b      	ldr	r3, [r3, #20]
 800ab44:	3b01      	subs	r3, #1
 800ab46:	051b      	lsls	r3, r3, #20
 800ab48:	4319      	orrs	r1, r3
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	061b      	lsls	r3, r3, #24
 800ab52:	430b      	orrs	r3, r1
 800ab54:	431a      	orrs	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	609a      	str	r2, [r3, #8]
 800ab5a:	e02d      	b.n	800abb8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	689a      	ldr	r2, [r3, #8]
 800ab60:	4b19      	ldr	r3, [pc, #100]	; (800abc8 <FMC_SDRAM_Timing_Init+0xd0>)
 800ab62:	4013      	ands	r3, r2
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	68d2      	ldr	r2, [r2, #12]
 800ab68:	3a01      	subs	r2, #1
 800ab6a:	0311      	lsls	r1, r2, #12
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	6952      	ldr	r2, [r2, #20]
 800ab70:	3a01      	subs	r2, #1
 800ab72:	0512      	lsls	r2, r2, #20
 800ab74:	430a      	orrs	r2, r1
 800ab76:	431a      	orrs	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	1e59      	subs	r1, r3, #1
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	011b      	lsls	r3, r3, #4
 800ab92:	4319      	orrs	r1, r3
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	021b      	lsls	r3, r3, #8
 800ab9c:	4319      	orrs	r1, r3
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	3b01      	subs	r3, #1
 800aba4:	041b      	lsls	r3, r3, #16
 800aba6:	4319      	orrs	r1, r3
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	3b01      	subs	r3, #1
 800abae:	061b      	lsls	r3, r3, #24
 800abb0:	430b      	orrs	r3, r1
 800abb2:	431a      	orrs	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	ff0f0fff 	.word	0xff0f0fff

0800abcc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	691a      	ldr	r2, [r3, #16]
 800abdc:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <FMC_SDRAM_SendCommand+0x44>)
 800abde:	4013      	ands	r3, r2
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	6811      	ldr	r1, [r2, #0]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	6852      	ldr	r2, [r2, #4]
 800abe8:	4311      	orrs	r1, r2
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	6892      	ldr	r2, [r2, #8]
 800abee:	3a01      	subs	r2, #1
 800abf0:	0152      	lsls	r2, r2, #5
 800abf2:	4311      	orrs	r1, r2
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	68d2      	ldr	r2, [r2, #12]
 800abf8:	0252      	lsls	r2, r2, #9
 800abfa:	430a      	orrs	r2, r1
 800abfc:	431a      	orrs	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	ffc00000 	.word	0xffc00000

0800ac14 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	695a      	ldr	r2, [r3, #20]
 800ac22:	4b07      	ldr	r3, [pc, #28]	; (800ac40 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	0052      	lsls	r2, r2, #1
 800ac2a:	431a      	orrs	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	ffffc001 	.word	0xffffc001

0800ac44 <siprintf>:
 800ac44:	b40e      	push	{r1, r2, r3}
 800ac46:	b500      	push	{lr}
 800ac48:	b09c      	sub	sp, #112	; 0x70
 800ac4a:	ab1d      	add	r3, sp, #116	; 0x74
 800ac4c:	9002      	str	r0, [sp, #8]
 800ac4e:	9006      	str	r0, [sp, #24]
 800ac50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac54:	4809      	ldr	r0, [pc, #36]	; (800ac7c <siprintf+0x38>)
 800ac56:	9107      	str	r1, [sp, #28]
 800ac58:	9104      	str	r1, [sp, #16]
 800ac5a:	4909      	ldr	r1, [pc, #36]	; (800ac80 <siprintf+0x3c>)
 800ac5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac60:	9105      	str	r1, [sp, #20]
 800ac62:	6800      	ldr	r0, [r0, #0]
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	a902      	add	r1, sp, #8
 800ac68:	f000 f992 	bl	800af90 <_svfiprintf_r>
 800ac6c:	9b02      	ldr	r3, [sp, #8]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	701a      	strb	r2, [r3, #0]
 800ac72:	b01c      	add	sp, #112	; 0x70
 800ac74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac78:	b003      	add	sp, #12
 800ac7a:	4770      	bx	lr
 800ac7c:	20000094 	.word	0x20000094
 800ac80:	ffff0208 	.word	0xffff0208

0800ac84 <memset>:
 800ac84:	4402      	add	r2, r0
 800ac86:	4603      	mov	r3, r0
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d100      	bne.n	800ac8e <memset+0xa>
 800ac8c:	4770      	bx	lr
 800ac8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac92:	e7f9      	b.n	800ac88 <memset+0x4>

0800ac94 <__errno>:
 800ac94:	4b01      	ldr	r3, [pc, #4]	; (800ac9c <__errno+0x8>)
 800ac96:	6818      	ldr	r0, [r3, #0]
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	20000094 	.word	0x20000094

0800aca0 <__libc_init_array>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	4d0d      	ldr	r5, [pc, #52]	; (800acd8 <__libc_init_array+0x38>)
 800aca4:	4c0d      	ldr	r4, [pc, #52]	; (800acdc <__libc_init_array+0x3c>)
 800aca6:	1b64      	subs	r4, r4, r5
 800aca8:	10a4      	asrs	r4, r4, #2
 800acaa:	2600      	movs	r6, #0
 800acac:	42a6      	cmp	r6, r4
 800acae:	d109      	bne.n	800acc4 <__libc_init_array+0x24>
 800acb0:	4d0b      	ldr	r5, [pc, #44]	; (800ace0 <__libc_init_array+0x40>)
 800acb2:	4c0c      	ldr	r4, [pc, #48]	; (800ace4 <__libc_init_array+0x44>)
 800acb4:	f000 fc6a 	bl	800b58c <_init>
 800acb8:	1b64      	subs	r4, r4, r5
 800acba:	10a4      	asrs	r4, r4, #2
 800acbc:	2600      	movs	r6, #0
 800acbe:	42a6      	cmp	r6, r4
 800acc0:	d105      	bne.n	800acce <__libc_init_array+0x2e>
 800acc2:	bd70      	pop	{r4, r5, r6, pc}
 800acc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc8:	4798      	blx	r3
 800acca:	3601      	adds	r6, #1
 800accc:	e7ee      	b.n	800acac <__libc_init_array+0xc>
 800acce:	f855 3b04 	ldr.w	r3, [r5], #4
 800acd2:	4798      	blx	r3
 800acd4:	3601      	adds	r6, #1
 800acd6:	e7f2      	b.n	800acbe <__libc_init_array+0x1e>
 800acd8:	0804d19c 	.word	0x0804d19c
 800acdc:	0804d19c 	.word	0x0804d19c
 800ace0:	0804d19c 	.word	0x0804d19c
 800ace4:	0804d1a0 	.word	0x0804d1a0

0800ace8 <__retarget_lock_acquire_recursive>:
 800ace8:	4770      	bx	lr

0800acea <__retarget_lock_release_recursive>:
 800acea:	4770      	bx	lr

0800acec <_free_r>:
 800acec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acee:	2900      	cmp	r1, #0
 800acf0:	d044      	beq.n	800ad7c <_free_r+0x90>
 800acf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acf6:	9001      	str	r0, [sp, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f1a1 0404 	sub.w	r4, r1, #4
 800acfe:	bfb8      	it	lt
 800ad00:	18e4      	addlt	r4, r4, r3
 800ad02:	f000 f8df 	bl	800aec4 <__malloc_lock>
 800ad06:	4a1e      	ldr	r2, [pc, #120]	; (800ad80 <_free_r+0x94>)
 800ad08:	9801      	ldr	r0, [sp, #4]
 800ad0a:	6813      	ldr	r3, [r2, #0]
 800ad0c:	b933      	cbnz	r3, 800ad1c <_free_r+0x30>
 800ad0e:	6063      	str	r3, [r4, #4]
 800ad10:	6014      	str	r4, [r2, #0]
 800ad12:	b003      	add	sp, #12
 800ad14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad18:	f000 b8da 	b.w	800aed0 <__malloc_unlock>
 800ad1c:	42a3      	cmp	r3, r4
 800ad1e:	d908      	bls.n	800ad32 <_free_r+0x46>
 800ad20:	6825      	ldr	r5, [r4, #0]
 800ad22:	1961      	adds	r1, r4, r5
 800ad24:	428b      	cmp	r3, r1
 800ad26:	bf01      	itttt	eq
 800ad28:	6819      	ldreq	r1, [r3, #0]
 800ad2a:	685b      	ldreq	r3, [r3, #4]
 800ad2c:	1949      	addeq	r1, r1, r5
 800ad2e:	6021      	streq	r1, [r4, #0]
 800ad30:	e7ed      	b.n	800ad0e <_free_r+0x22>
 800ad32:	461a      	mov	r2, r3
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	b10b      	cbz	r3, 800ad3c <_free_r+0x50>
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	d9fa      	bls.n	800ad32 <_free_r+0x46>
 800ad3c:	6811      	ldr	r1, [r2, #0]
 800ad3e:	1855      	adds	r5, r2, r1
 800ad40:	42a5      	cmp	r5, r4
 800ad42:	d10b      	bne.n	800ad5c <_free_r+0x70>
 800ad44:	6824      	ldr	r4, [r4, #0]
 800ad46:	4421      	add	r1, r4
 800ad48:	1854      	adds	r4, r2, r1
 800ad4a:	42a3      	cmp	r3, r4
 800ad4c:	6011      	str	r1, [r2, #0]
 800ad4e:	d1e0      	bne.n	800ad12 <_free_r+0x26>
 800ad50:	681c      	ldr	r4, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	6053      	str	r3, [r2, #4]
 800ad56:	440c      	add	r4, r1
 800ad58:	6014      	str	r4, [r2, #0]
 800ad5a:	e7da      	b.n	800ad12 <_free_r+0x26>
 800ad5c:	d902      	bls.n	800ad64 <_free_r+0x78>
 800ad5e:	230c      	movs	r3, #12
 800ad60:	6003      	str	r3, [r0, #0]
 800ad62:	e7d6      	b.n	800ad12 <_free_r+0x26>
 800ad64:	6825      	ldr	r5, [r4, #0]
 800ad66:	1961      	adds	r1, r4, r5
 800ad68:	428b      	cmp	r3, r1
 800ad6a:	bf04      	itt	eq
 800ad6c:	6819      	ldreq	r1, [r3, #0]
 800ad6e:	685b      	ldreq	r3, [r3, #4]
 800ad70:	6063      	str	r3, [r4, #4]
 800ad72:	bf04      	itt	eq
 800ad74:	1949      	addeq	r1, r1, r5
 800ad76:	6021      	streq	r1, [r4, #0]
 800ad78:	6054      	str	r4, [r2, #4]
 800ad7a:	e7ca      	b.n	800ad12 <_free_r+0x26>
 800ad7c:	b003      	add	sp, #12
 800ad7e:	bd30      	pop	{r4, r5, pc}
 800ad80:	20000b58 	.word	0x20000b58

0800ad84 <sbrk_aligned>:
 800ad84:	b570      	push	{r4, r5, r6, lr}
 800ad86:	4e0e      	ldr	r6, [pc, #56]	; (800adc0 <sbrk_aligned+0x3c>)
 800ad88:	460c      	mov	r4, r1
 800ad8a:	6831      	ldr	r1, [r6, #0]
 800ad8c:	4605      	mov	r5, r0
 800ad8e:	b911      	cbnz	r1, 800ad96 <sbrk_aligned+0x12>
 800ad90:	f000 fba6 	bl	800b4e0 <_sbrk_r>
 800ad94:	6030      	str	r0, [r6, #0]
 800ad96:	4621      	mov	r1, r4
 800ad98:	4628      	mov	r0, r5
 800ad9a:	f000 fba1 	bl	800b4e0 <_sbrk_r>
 800ad9e:	1c43      	adds	r3, r0, #1
 800ada0:	d00a      	beq.n	800adb8 <sbrk_aligned+0x34>
 800ada2:	1cc4      	adds	r4, r0, #3
 800ada4:	f024 0403 	bic.w	r4, r4, #3
 800ada8:	42a0      	cmp	r0, r4
 800adaa:	d007      	beq.n	800adbc <sbrk_aligned+0x38>
 800adac:	1a21      	subs	r1, r4, r0
 800adae:	4628      	mov	r0, r5
 800adb0:	f000 fb96 	bl	800b4e0 <_sbrk_r>
 800adb4:	3001      	adds	r0, #1
 800adb6:	d101      	bne.n	800adbc <sbrk_aligned+0x38>
 800adb8:	f04f 34ff 	mov.w	r4, #4294967295
 800adbc:	4620      	mov	r0, r4
 800adbe:	bd70      	pop	{r4, r5, r6, pc}
 800adc0:	20000b5c 	.word	0x20000b5c

0800adc4 <_malloc_r>:
 800adc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc8:	1ccd      	adds	r5, r1, #3
 800adca:	f025 0503 	bic.w	r5, r5, #3
 800adce:	3508      	adds	r5, #8
 800add0:	2d0c      	cmp	r5, #12
 800add2:	bf38      	it	cc
 800add4:	250c      	movcc	r5, #12
 800add6:	2d00      	cmp	r5, #0
 800add8:	4607      	mov	r7, r0
 800adda:	db01      	blt.n	800ade0 <_malloc_r+0x1c>
 800addc:	42a9      	cmp	r1, r5
 800adde:	d905      	bls.n	800adec <_malloc_r+0x28>
 800ade0:	230c      	movs	r3, #12
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	2600      	movs	r6, #0
 800ade6:	4630      	mov	r0, r6
 800ade8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aec0 <_malloc_r+0xfc>
 800adf0:	f000 f868 	bl	800aec4 <__malloc_lock>
 800adf4:	f8d8 3000 	ldr.w	r3, [r8]
 800adf8:	461c      	mov	r4, r3
 800adfa:	bb5c      	cbnz	r4, 800ae54 <_malloc_r+0x90>
 800adfc:	4629      	mov	r1, r5
 800adfe:	4638      	mov	r0, r7
 800ae00:	f7ff ffc0 	bl	800ad84 <sbrk_aligned>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	4604      	mov	r4, r0
 800ae08:	d155      	bne.n	800aeb6 <_malloc_r+0xf2>
 800ae0a:	f8d8 4000 	ldr.w	r4, [r8]
 800ae0e:	4626      	mov	r6, r4
 800ae10:	2e00      	cmp	r6, #0
 800ae12:	d145      	bne.n	800aea0 <_malloc_r+0xdc>
 800ae14:	2c00      	cmp	r4, #0
 800ae16:	d048      	beq.n	800aeaa <_malloc_r+0xe6>
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	eb04 0903 	add.w	r9, r4, r3
 800ae22:	f000 fb5d 	bl	800b4e0 <_sbrk_r>
 800ae26:	4581      	cmp	r9, r0
 800ae28:	d13f      	bne.n	800aeaa <_malloc_r+0xe6>
 800ae2a:	6821      	ldr	r1, [r4, #0]
 800ae2c:	1a6d      	subs	r5, r5, r1
 800ae2e:	4629      	mov	r1, r5
 800ae30:	4638      	mov	r0, r7
 800ae32:	f7ff ffa7 	bl	800ad84 <sbrk_aligned>
 800ae36:	3001      	adds	r0, #1
 800ae38:	d037      	beq.n	800aeaa <_malloc_r+0xe6>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	442b      	add	r3, r5
 800ae3e:	6023      	str	r3, [r4, #0]
 800ae40:	f8d8 3000 	ldr.w	r3, [r8]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d038      	beq.n	800aeba <_malloc_r+0xf6>
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	42a2      	cmp	r2, r4
 800ae4c:	d12b      	bne.n	800aea6 <_malloc_r+0xe2>
 800ae4e:	2200      	movs	r2, #0
 800ae50:	605a      	str	r2, [r3, #4]
 800ae52:	e00f      	b.n	800ae74 <_malloc_r+0xb0>
 800ae54:	6822      	ldr	r2, [r4, #0]
 800ae56:	1b52      	subs	r2, r2, r5
 800ae58:	d41f      	bmi.n	800ae9a <_malloc_r+0xd6>
 800ae5a:	2a0b      	cmp	r2, #11
 800ae5c:	d917      	bls.n	800ae8e <_malloc_r+0xca>
 800ae5e:	1961      	adds	r1, r4, r5
 800ae60:	42a3      	cmp	r3, r4
 800ae62:	6025      	str	r5, [r4, #0]
 800ae64:	bf18      	it	ne
 800ae66:	6059      	strne	r1, [r3, #4]
 800ae68:	6863      	ldr	r3, [r4, #4]
 800ae6a:	bf08      	it	eq
 800ae6c:	f8c8 1000 	streq.w	r1, [r8]
 800ae70:	5162      	str	r2, [r4, r5]
 800ae72:	604b      	str	r3, [r1, #4]
 800ae74:	4638      	mov	r0, r7
 800ae76:	f104 060b 	add.w	r6, r4, #11
 800ae7a:	f000 f829 	bl	800aed0 <__malloc_unlock>
 800ae7e:	f026 0607 	bic.w	r6, r6, #7
 800ae82:	1d23      	adds	r3, r4, #4
 800ae84:	1af2      	subs	r2, r6, r3
 800ae86:	d0ae      	beq.n	800ade6 <_malloc_r+0x22>
 800ae88:	1b9b      	subs	r3, r3, r6
 800ae8a:	50a3      	str	r3, [r4, r2]
 800ae8c:	e7ab      	b.n	800ade6 <_malloc_r+0x22>
 800ae8e:	42a3      	cmp	r3, r4
 800ae90:	6862      	ldr	r2, [r4, #4]
 800ae92:	d1dd      	bne.n	800ae50 <_malloc_r+0x8c>
 800ae94:	f8c8 2000 	str.w	r2, [r8]
 800ae98:	e7ec      	b.n	800ae74 <_malloc_r+0xb0>
 800ae9a:	4623      	mov	r3, r4
 800ae9c:	6864      	ldr	r4, [r4, #4]
 800ae9e:	e7ac      	b.n	800adfa <_malloc_r+0x36>
 800aea0:	4634      	mov	r4, r6
 800aea2:	6876      	ldr	r6, [r6, #4]
 800aea4:	e7b4      	b.n	800ae10 <_malloc_r+0x4c>
 800aea6:	4613      	mov	r3, r2
 800aea8:	e7cc      	b.n	800ae44 <_malloc_r+0x80>
 800aeaa:	230c      	movs	r3, #12
 800aeac:	603b      	str	r3, [r7, #0]
 800aeae:	4638      	mov	r0, r7
 800aeb0:	f000 f80e 	bl	800aed0 <__malloc_unlock>
 800aeb4:	e797      	b.n	800ade6 <_malloc_r+0x22>
 800aeb6:	6025      	str	r5, [r4, #0]
 800aeb8:	e7dc      	b.n	800ae74 <_malloc_r+0xb0>
 800aeba:	605b      	str	r3, [r3, #4]
 800aebc:	deff      	udf	#255	; 0xff
 800aebe:	bf00      	nop
 800aec0:	20000b58 	.word	0x20000b58

0800aec4 <__malloc_lock>:
 800aec4:	4801      	ldr	r0, [pc, #4]	; (800aecc <__malloc_lock+0x8>)
 800aec6:	f7ff bf0f 	b.w	800ace8 <__retarget_lock_acquire_recursive>
 800aeca:	bf00      	nop
 800aecc:	20000b54 	.word	0x20000b54

0800aed0 <__malloc_unlock>:
 800aed0:	4801      	ldr	r0, [pc, #4]	; (800aed8 <__malloc_unlock+0x8>)
 800aed2:	f7ff bf0a 	b.w	800acea <__retarget_lock_release_recursive>
 800aed6:	bf00      	nop
 800aed8:	20000b54 	.word	0x20000b54

0800aedc <__ssputs_r>:
 800aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee0:	688e      	ldr	r6, [r1, #8]
 800aee2:	461f      	mov	r7, r3
 800aee4:	42be      	cmp	r6, r7
 800aee6:	680b      	ldr	r3, [r1, #0]
 800aee8:	4682      	mov	sl, r0
 800aeea:	460c      	mov	r4, r1
 800aeec:	4690      	mov	r8, r2
 800aeee:	d82c      	bhi.n	800af4a <__ssputs_r+0x6e>
 800aef0:	898a      	ldrh	r2, [r1, #12]
 800aef2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aef6:	d026      	beq.n	800af46 <__ssputs_r+0x6a>
 800aef8:	6965      	ldr	r5, [r4, #20]
 800aefa:	6909      	ldr	r1, [r1, #16]
 800aefc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af00:	eba3 0901 	sub.w	r9, r3, r1
 800af04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af08:	1c7b      	adds	r3, r7, #1
 800af0a:	444b      	add	r3, r9
 800af0c:	106d      	asrs	r5, r5, #1
 800af0e:	429d      	cmp	r5, r3
 800af10:	bf38      	it	cc
 800af12:	461d      	movcc	r5, r3
 800af14:	0553      	lsls	r3, r2, #21
 800af16:	d527      	bpl.n	800af68 <__ssputs_r+0x8c>
 800af18:	4629      	mov	r1, r5
 800af1a:	f7ff ff53 	bl	800adc4 <_malloc_r>
 800af1e:	4606      	mov	r6, r0
 800af20:	b360      	cbz	r0, 800af7c <__ssputs_r+0xa0>
 800af22:	6921      	ldr	r1, [r4, #16]
 800af24:	464a      	mov	r2, r9
 800af26:	f000 faeb 	bl	800b500 <memcpy>
 800af2a:	89a3      	ldrh	r3, [r4, #12]
 800af2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	6126      	str	r6, [r4, #16]
 800af38:	6165      	str	r5, [r4, #20]
 800af3a:	444e      	add	r6, r9
 800af3c:	eba5 0509 	sub.w	r5, r5, r9
 800af40:	6026      	str	r6, [r4, #0]
 800af42:	60a5      	str	r5, [r4, #8]
 800af44:	463e      	mov	r6, r7
 800af46:	42be      	cmp	r6, r7
 800af48:	d900      	bls.n	800af4c <__ssputs_r+0x70>
 800af4a:	463e      	mov	r6, r7
 800af4c:	6820      	ldr	r0, [r4, #0]
 800af4e:	4632      	mov	r2, r6
 800af50:	4641      	mov	r1, r8
 800af52:	f000 faab 	bl	800b4ac <memmove>
 800af56:	68a3      	ldr	r3, [r4, #8]
 800af58:	1b9b      	subs	r3, r3, r6
 800af5a:	60a3      	str	r3, [r4, #8]
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	4433      	add	r3, r6
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	2000      	movs	r0, #0
 800af64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af68:	462a      	mov	r2, r5
 800af6a:	f000 fad7 	bl	800b51c <_realloc_r>
 800af6e:	4606      	mov	r6, r0
 800af70:	2800      	cmp	r0, #0
 800af72:	d1e0      	bne.n	800af36 <__ssputs_r+0x5a>
 800af74:	6921      	ldr	r1, [r4, #16]
 800af76:	4650      	mov	r0, sl
 800af78:	f7ff feb8 	bl	800acec <_free_r>
 800af7c:	230c      	movs	r3, #12
 800af7e:	f8ca 3000 	str.w	r3, [sl]
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	f04f 30ff 	mov.w	r0, #4294967295
 800af8e:	e7e9      	b.n	800af64 <__ssputs_r+0x88>

0800af90 <_svfiprintf_r>:
 800af90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	4698      	mov	r8, r3
 800af96:	898b      	ldrh	r3, [r1, #12]
 800af98:	061b      	lsls	r3, r3, #24
 800af9a:	b09d      	sub	sp, #116	; 0x74
 800af9c:	4607      	mov	r7, r0
 800af9e:	460d      	mov	r5, r1
 800afa0:	4614      	mov	r4, r2
 800afa2:	d50e      	bpl.n	800afc2 <_svfiprintf_r+0x32>
 800afa4:	690b      	ldr	r3, [r1, #16]
 800afa6:	b963      	cbnz	r3, 800afc2 <_svfiprintf_r+0x32>
 800afa8:	2140      	movs	r1, #64	; 0x40
 800afaa:	f7ff ff0b 	bl	800adc4 <_malloc_r>
 800afae:	6028      	str	r0, [r5, #0]
 800afb0:	6128      	str	r0, [r5, #16]
 800afb2:	b920      	cbnz	r0, 800afbe <_svfiprintf_r+0x2e>
 800afb4:	230c      	movs	r3, #12
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295
 800afbc:	e0d0      	b.n	800b160 <_svfiprintf_r+0x1d0>
 800afbe:	2340      	movs	r3, #64	; 0x40
 800afc0:	616b      	str	r3, [r5, #20]
 800afc2:	2300      	movs	r3, #0
 800afc4:	9309      	str	r3, [sp, #36]	; 0x24
 800afc6:	2320      	movs	r3, #32
 800afc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800afd0:	2330      	movs	r3, #48	; 0x30
 800afd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b178 <_svfiprintf_r+0x1e8>
 800afd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afda:	f04f 0901 	mov.w	r9, #1
 800afde:	4623      	mov	r3, r4
 800afe0:	469a      	mov	sl, r3
 800afe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afe6:	b10a      	cbz	r2, 800afec <_svfiprintf_r+0x5c>
 800afe8:	2a25      	cmp	r2, #37	; 0x25
 800afea:	d1f9      	bne.n	800afe0 <_svfiprintf_r+0x50>
 800afec:	ebba 0b04 	subs.w	fp, sl, r4
 800aff0:	d00b      	beq.n	800b00a <_svfiprintf_r+0x7a>
 800aff2:	465b      	mov	r3, fp
 800aff4:	4622      	mov	r2, r4
 800aff6:	4629      	mov	r1, r5
 800aff8:	4638      	mov	r0, r7
 800affa:	f7ff ff6f 	bl	800aedc <__ssputs_r>
 800affe:	3001      	adds	r0, #1
 800b000:	f000 80a9 	beq.w	800b156 <_svfiprintf_r+0x1c6>
 800b004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b006:	445a      	add	r2, fp
 800b008:	9209      	str	r2, [sp, #36]	; 0x24
 800b00a:	f89a 3000 	ldrb.w	r3, [sl]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 80a1 	beq.w	800b156 <_svfiprintf_r+0x1c6>
 800b014:	2300      	movs	r3, #0
 800b016:	f04f 32ff 	mov.w	r2, #4294967295
 800b01a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b01e:	f10a 0a01 	add.w	sl, sl, #1
 800b022:	9304      	str	r3, [sp, #16]
 800b024:	9307      	str	r3, [sp, #28]
 800b026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b02a:	931a      	str	r3, [sp, #104]	; 0x68
 800b02c:	4654      	mov	r4, sl
 800b02e:	2205      	movs	r2, #5
 800b030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b034:	4850      	ldr	r0, [pc, #320]	; (800b178 <_svfiprintf_r+0x1e8>)
 800b036:	f7f5 f8f3 	bl	8000220 <memchr>
 800b03a:	9a04      	ldr	r2, [sp, #16]
 800b03c:	b9d8      	cbnz	r0, 800b076 <_svfiprintf_r+0xe6>
 800b03e:	06d0      	lsls	r0, r2, #27
 800b040:	bf44      	itt	mi
 800b042:	2320      	movmi	r3, #32
 800b044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b048:	0711      	lsls	r1, r2, #28
 800b04a:	bf44      	itt	mi
 800b04c:	232b      	movmi	r3, #43	; 0x2b
 800b04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b052:	f89a 3000 	ldrb.w	r3, [sl]
 800b056:	2b2a      	cmp	r3, #42	; 0x2a
 800b058:	d015      	beq.n	800b086 <_svfiprintf_r+0xf6>
 800b05a:	9a07      	ldr	r2, [sp, #28]
 800b05c:	4654      	mov	r4, sl
 800b05e:	2000      	movs	r0, #0
 800b060:	f04f 0c0a 	mov.w	ip, #10
 800b064:	4621      	mov	r1, r4
 800b066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b06a:	3b30      	subs	r3, #48	; 0x30
 800b06c:	2b09      	cmp	r3, #9
 800b06e:	d94d      	bls.n	800b10c <_svfiprintf_r+0x17c>
 800b070:	b1b0      	cbz	r0, 800b0a0 <_svfiprintf_r+0x110>
 800b072:	9207      	str	r2, [sp, #28]
 800b074:	e014      	b.n	800b0a0 <_svfiprintf_r+0x110>
 800b076:	eba0 0308 	sub.w	r3, r0, r8
 800b07a:	fa09 f303 	lsl.w	r3, r9, r3
 800b07e:	4313      	orrs	r3, r2
 800b080:	9304      	str	r3, [sp, #16]
 800b082:	46a2      	mov	sl, r4
 800b084:	e7d2      	b.n	800b02c <_svfiprintf_r+0x9c>
 800b086:	9b03      	ldr	r3, [sp, #12]
 800b088:	1d19      	adds	r1, r3, #4
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	9103      	str	r1, [sp, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	bfbb      	ittet	lt
 800b092:	425b      	neglt	r3, r3
 800b094:	f042 0202 	orrlt.w	r2, r2, #2
 800b098:	9307      	strge	r3, [sp, #28]
 800b09a:	9307      	strlt	r3, [sp, #28]
 800b09c:	bfb8      	it	lt
 800b09e:	9204      	strlt	r2, [sp, #16]
 800b0a0:	7823      	ldrb	r3, [r4, #0]
 800b0a2:	2b2e      	cmp	r3, #46	; 0x2e
 800b0a4:	d10c      	bne.n	800b0c0 <_svfiprintf_r+0x130>
 800b0a6:	7863      	ldrb	r3, [r4, #1]
 800b0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b0aa:	d134      	bne.n	800b116 <_svfiprintf_r+0x186>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	1d1a      	adds	r2, r3, #4
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	9203      	str	r2, [sp, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bfb8      	it	lt
 800b0b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0bc:	3402      	adds	r4, #2
 800b0be:	9305      	str	r3, [sp, #20]
 800b0c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b188 <_svfiprintf_r+0x1f8>
 800b0c4:	7821      	ldrb	r1, [r4, #0]
 800b0c6:	2203      	movs	r2, #3
 800b0c8:	4650      	mov	r0, sl
 800b0ca:	f7f5 f8a9 	bl	8000220 <memchr>
 800b0ce:	b138      	cbz	r0, 800b0e0 <_svfiprintf_r+0x150>
 800b0d0:	9b04      	ldr	r3, [sp, #16]
 800b0d2:	eba0 000a 	sub.w	r0, r0, sl
 800b0d6:	2240      	movs	r2, #64	; 0x40
 800b0d8:	4082      	lsls	r2, r0
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	3401      	adds	r4, #1
 800b0de:	9304      	str	r3, [sp, #16]
 800b0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e4:	4825      	ldr	r0, [pc, #148]	; (800b17c <_svfiprintf_r+0x1ec>)
 800b0e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0ea:	2206      	movs	r2, #6
 800b0ec:	f7f5 f898 	bl	8000220 <memchr>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d038      	beq.n	800b166 <_svfiprintf_r+0x1d6>
 800b0f4:	4b22      	ldr	r3, [pc, #136]	; (800b180 <_svfiprintf_r+0x1f0>)
 800b0f6:	bb1b      	cbnz	r3, 800b140 <_svfiprintf_r+0x1b0>
 800b0f8:	9b03      	ldr	r3, [sp, #12]
 800b0fa:	3307      	adds	r3, #7
 800b0fc:	f023 0307 	bic.w	r3, r3, #7
 800b100:	3308      	adds	r3, #8
 800b102:	9303      	str	r3, [sp, #12]
 800b104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b106:	4433      	add	r3, r6
 800b108:	9309      	str	r3, [sp, #36]	; 0x24
 800b10a:	e768      	b.n	800afde <_svfiprintf_r+0x4e>
 800b10c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b110:	460c      	mov	r4, r1
 800b112:	2001      	movs	r0, #1
 800b114:	e7a6      	b.n	800b064 <_svfiprintf_r+0xd4>
 800b116:	2300      	movs	r3, #0
 800b118:	3401      	adds	r4, #1
 800b11a:	9305      	str	r3, [sp, #20]
 800b11c:	4619      	mov	r1, r3
 800b11e:	f04f 0c0a 	mov.w	ip, #10
 800b122:	4620      	mov	r0, r4
 800b124:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b128:	3a30      	subs	r2, #48	; 0x30
 800b12a:	2a09      	cmp	r2, #9
 800b12c:	d903      	bls.n	800b136 <_svfiprintf_r+0x1a6>
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0c6      	beq.n	800b0c0 <_svfiprintf_r+0x130>
 800b132:	9105      	str	r1, [sp, #20]
 800b134:	e7c4      	b.n	800b0c0 <_svfiprintf_r+0x130>
 800b136:	fb0c 2101 	mla	r1, ip, r1, r2
 800b13a:	4604      	mov	r4, r0
 800b13c:	2301      	movs	r3, #1
 800b13e:	e7f0      	b.n	800b122 <_svfiprintf_r+0x192>
 800b140:	ab03      	add	r3, sp, #12
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	462a      	mov	r2, r5
 800b146:	4b0f      	ldr	r3, [pc, #60]	; (800b184 <_svfiprintf_r+0x1f4>)
 800b148:	a904      	add	r1, sp, #16
 800b14a:	4638      	mov	r0, r7
 800b14c:	f3af 8000 	nop.w
 800b150:	1c42      	adds	r2, r0, #1
 800b152:	4606      	mov	r6, r0
 800b154:	d1d6      	bne.n	800b104 <_svfiprintf_r+0x174>
 800b156:	89ab      	ldrh	r3, [r5, #12]
 800b158:	065b      	lsls	r3, r3, #25
 800b15a:	f53f af2d 	bmi.w	800afb8 <_svfiprintf_r+0x28>
 800b15e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b160:	b01d      	add	sp, #116	; 0x74
 800b162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b166:	ab03      	add	r3, sp, #12
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	462a      	mov	r2, r5
 800b16c:	4b05      	ldr	r3, [pc, #20]	; (800b184 <_svfiprintf_r+0x1f4>)
 800b16e:	a904      	add	r1, sp, #16
 800b170:	4638      	mov	r0, r7
 800b172:	f000 f879 	bl	800b268 <_printf_i>
 800b176:	e7eb      	b.n	800b150 <_svfiprintf_r+0x1c0>
 800b178:	0804d160 	.word	0x0804d160
 800b17c:	0804d16a 	.word	0x0804d16a
 800b180:	00000000 	.word	0x00000000
 800b184:	0800aedd 	.word	0x0800aedd
 800b188:	0804d166 	.word	0x0804d166

0800b18c <_printf_common>:
 800b18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b190:	4616      	mov	r6, r2
 800b192:	4699      	mov	r9, r3
 800b194:	688a      	ldr	r2, [r1, #8]
 800b196:	690b      	ldr	r3, [r1, #16]
 800b198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b19c:	4293      	cmp	r3, r2
 800b19e:	bfb8      	it	lt
 800b1a0:	4613      	movlt	r3, r2
 800b1a2:	6033      	str	r3, [r6, #0]
 800b1a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1a8:	4607      	mov	r7, r0
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	b10a      	cbz	r2, 800b1b2 <_printf_common+0x26>
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	6033      	str	r3, [r6, #0]
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	0699      	lsls	r1, r3, #26
 800b1b6:	bf42      	ittt	mi
 800b1b8:	6833      	ldrmi	r3, [r6, #0]
 800b1ba:	3302      	addmi	r3, #2
 800b1bc:	6033      	strmi	r3, [r6, #0]
 800b1be:	6825      	ldr	r5, [r4, #0]
 800b1c0:	f015 0506 	ands.w	r5, r5, #6
 800b1c4:	d106      	bne.n	800b1d4 <_printf_common+0x48>
 800b1c6:	f104 0a19 	add.w	sl, r4, #25
 800b1ca:	68e3      	ldr	r3, [r4, #12]
 800b1cc:	6832      	ldr	r2, [r6, #0]
 800b1ce:	1a9b      	subs	r3, r3, r2
 800b1d0:	42ab      	cmp	r3, r5
 800b1d2:	dc26      	bgt.n	800b222 <_printf_common+0x96>
 800b1d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1d8:	1e13      	subs	r3, r2, #0
 800b1da:	6822      	ldr	r2, [r4, #0]
 800b1dc:	bf18      	it	ne
 800b1de:	2301      	movne	r3, #1
 800b1e0:	0692      	lsls	r2, r2, #26
 800b1e2:	d42b      	bmi.n	800b23c <_printf_common+0xb0>
 800b1e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1e8:	4649      	mov	r1, r9
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	47c0      	blx	r8
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	d01e      	beq.n	800b230 <_printf_common+0xa4>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	6922      	ldr	r2, [r4, #16]
 800b1f6:	f003 0306 	and.w	r3, r3, #6
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	bf02      	ittt	eq
 800b1fe:	68e5      	ldreq	r5, [r4, #12]
 800b200:	6833      	ldreq	r3, [r6, #0]
 800b202:	1aed      	subeq	r5, r5, r3
 800b204:	68a3      	ldr	r3, [r4, #8]
 800b206:	bf0c      	ite	eq
 800b208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b20c:	2500      	movne	r5, #0
 800b20e:	4293      	cmp	r3, r2
 800b210:	bfc4      	itt	gt
 800b212:	1a9b      	subgt	r3, r3, r2
 800b214:	18ed      	addgt	r5, r5, r3
 800b216:	2600      	movs	r6, #0
 800b218:	341a      	adds	r4, #26
 800b21a:	42b5      	cmp	r5, r6
 800b21c:	d11a      	bne.n	800b254 <_printf_common+0xc8>
 800b21e:	2000      	movs	r0, #0
 800b220:	e008      	b.n	800b234 <_printf_common+0xa8>
 800b222:	2301      	movs	r3, #1
 800b224:	4652      	mov	r2, sl
 800b226:	4649      	mov	r1, r9
 800b228:	4638      	mov	r0, r7
 800b22a:	47c0      	blx	r8
 800b22c:	3001      	adds	r0, #1
 800b22e:	d103      	bne.n	800b238 <_printf_common+0xac>
 800b230:	f04f 30ff 	mov.w	r0, #4294967295
 800b234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b238:	3501      	adds	r5, #1
 800b23a:	e7c6      	b.n	800b1ca <_printf_common+0x3e>
 800b23c:	18e1      	adds	r1, r4, r3
 800b23e:	1c5a      	adds	r2, r3, #1
 800b240:	2030      	movs	r0, #48	; 0x30
 800b242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b246:	4422      	add	r2, r4
 800b248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b24c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b250:	3302      	adds	r3, #2
 800b252:	e7c7      	b.n	800b1e4 <_printf_common+0x58>
 800b254:	2301      	movs	r3, #1
 800b256:	4622      	mov	r2, r4
 800b258:	4649      	mov	r1, r9
 800b25a:	4638      	mov	r0, r7
 800b25c:	47c0      	blx	r8
 800b25e:	3001      	adds	r0, #1
 800b260:	d0e6      	beq.n	800b230 <_printf_common+0xa4>
 800b262:	3601      	adds	r6, #1
 800b264:	e7d9      	b.n	800b21a <_printf_common+0x8e>
	...

0800b268 <_printf_i>:
 800b268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b26c:	7e0f      	ldrb	r7, [r1, #24]
 800b26e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b270:	2f78      	cmp	r7, #120	; 0x78
 800b272:	4691      	mov	r9, r2
 800b274:	4680      	mov	r8, r0
 800b276:	460c      	mov	r4, r1
 800b278:	469a      	mov	sl, r3
 800b27a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b27e:	d807      	bhi.n	800b290 <_printf_i+0x28>
 800b280:	2f62      	cmp	r7, #98	; 0x62
 800b282:	d80a      	bhi.n	800b29a <_printf_i+0x32>
 800b284:	2f00      	cmp	r7, #0
 800b286:	f000 80d4 	beq.w	800b432 <_printf_i+0x1ca>
 800b28a:	2f58      	cmp	r7, #88	; 0x58
 800b28c:	f000 80c0 	beq.w	800b410 <_printf_i+0x1a8>
 800b290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b298:	e03a      	b.n	800b310 <_printf_i+0xa8>
 800b29a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b29e:	2b15      	cmp	r3, #21
 800b2a0:	d8f6      	bhi.n	800b290 <_printf_i+0x28>
 800b2a2:	a101      	add	r1, pc, #4	; (adr r1, 800b2a8 <_printf_i+0x40>)
 800b2a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2a8:	0800b301 	.word	0x0800b301
 800b2ac:	0800b315 	.word	0x0800b315
 800b2b0:	0800b291 	.word	0x0800b291
 800b2b4:	0800b291 	.word	0x0800b291
 800b2b8:	0800b291 	.word	0x0800b291
 800b2bc:	0800b291 	.word	0x0800b291
 800b2c0:	0800b315 	.word	0x0800b315
 800b2c4:	0800b291 	.word	0x0800b291
 800b2c8:	0800b291 	.word	0x0800b291
 800b2cc:	0800b291 	.word	0x0800b291
 800b2d0:	0800b291 	.word	0x0800b291
 800b2d4:	0800b419 	.word	0x0800b419
 800b2d8:	0800b341 	.word	0x0800b341
 800b2dc:	0800b3d3 	.word	0x0800b3d3
 800b2e0:	0800b291 	.word	0x0800b291
 800b2e4:	0800b291 	.word	0x0800b291
 800b2e8:	0800b43b 	.word	0x0800b43b
 800b2ec:	0800b291 	.word	0x0800b291
 800b2f0:	0800b341 	.word	0x0800b341
 800b2f4:	0800b291 	.word	0x0800b291
 800b2f8:	0800b291 	.word	0x0800b291
 800b2fc:	0800b3db 	.word	0x0800b3db
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	1d1a      	adds	r2, r3, #4
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	602a      	str	r2, [r5, #0]
 800b308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b30c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b310:	2301      	movs	r3, #1
 800b312:	e09f      	b.n	800b454 <_printf_i+0x1ec>
 800b314:	6820      	ldr	r0, [r4, #0]
 800b316:	682b      	ldr	r3, [r5, #0]
 800b318:	0607      	lsls	r7, r0, #24
 800b31a:	f103 0104 	add.w	r1, r3, #4
 800b31e:	6029      	str	r1, [r5, #0]
 800b320:	d501      	bpl.n	800b326 <_printf_i+0xbe>
 800b322:	681e      	ldr	r6, [r3, #0]
 800b324:	e003      	b.n	800b32e <_printf_i+0xc6>
 800b326:	0646      	lsls	r6, r0, #25
 800b328:	d5fb      	bpl.n	800b322 <_printf_i+0xba>
 800b32a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b32e:	2e00      	cmp	r6, #0
 800b330:	da03      	bge.n	800b33a <_printf_i+0xd2>
 800b332:	232d      	movs	r3, #45	; 0x2d
 800b334:	4276      	negs	r6, r6
 800b336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b33a:	485a      	ldr	r0, [pc, #360]	; (800b4a4 <_printf_i+0x23c>)
 800b33c:	230a      	movs	r3, #10
 800b33e:	e012      	b.n	800b366 <_printf_i+0xfe>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	6820      	ldr	r0, [r4, #0]
 800b344:	1d19      	adds	r1, r3, #4
 800b346:	6029      	str	r1, [r5, #0]
 800b348:	0605      	lsls	r5, r0, #24
 800b34a:	d501      	bpl.n	800b350 <_printf_i+0xe8>
 800b34c:	681e      	ldr	r6, [r3, #0]
 800b34e:	e002      	b.n	800b356 <_printf_i+0xee>
 800b350:	0641      	lsls	r1, r0, #25
 800b352:	d5fb      	bpl.n	800b34c <_printf_i+0xe4>
 800b354:	881e      	ldrh	r6, [r3, #0]
 800b356:	4853      	ldr	r0, [pc, #332]	; (800b4a4 <_printf_i+0x23c>)
 800b358:	2f6f      	cmp	r7, #111	; 0x6f
 800b35a:	bf0c      	ite	eq
 800b35c:	2308      	moveq	r3, #8
 800b35e:	230a      	movne	r3, #10
 800b360:	2100      	movs	r1, #0
 800b362:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b366:	6865      	ldr	r5, [r4, #4]
 800b368:	60a5      	str	r5, [r4, #8]
 800b36a:	2d00      	cmp	r5, #0
 800b36c:	bfa2      	ittt	ge
 800b36e:	6821      	ldrge	r1, [r4, #0]
 800b370:	f021 0104 	bicge.w	r1, r1, #4
 800b374:	6021      	strge	r1, [r4, #0]
 800b376:	b90e      	cbnz	r6, 800b37c <_printf_i+0x114>
 800b378:	2d00      	cmp	r5, #0
 800b37a:	d04b      	beq.n	800b414 <_printf_i+0x1ac>
 800b37c:	4615      	mov	r5, r2
 800b37e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b382:	fb03 6711 	mls	r7, r3, r1, r6
 800b386:	5dc7      	ldrb	r7, [r0, r7]
 800b388:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b38c:	4637      	mov	r7, r6
 800b38e:	42bb      	cmp	r3, r7
 800b390:	460e      	mov	r6, r1
 800b392:	d9f4      	bls.n	800b37e <_printf_i+0x116>
 800b394:	2b08      	cmp	r3, #8
 800b396:	d10b      	bne.n	800b3b0 <_printf_i+0x148>
 800b398:	6823      	ldr	r3, [r4, #0]
 800b39a:	07de      	lsls	r6, r3, #31
 800b39c:	d508      	bpl.n	800b3b0 <_printf_i+0x148>
 800b39e:	6923      	ldr	r3, [r4, #16]
 800b3a0:	6861      	ldr	r1, [r4, #4]
 800b3a2:	4299      	cmp	r1, r3
 800b3a4:	bfde      	ittt	le
 800b3a6:	2330      	movle	r3, #48	; 0x30
 800b3a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3b0:	1b52      	subs	r2, r2, r5
 800b3b2:	6122      	str	r2, [r4, #16]
 800b3b4:	f8cd a000 	str.w	sl, [sp]
 800b3b8:	464b      	mov	r3, r9
 800b3ba:	aa03      	add	r2, sp, #12
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4640      	mov	r0, r8
 800b3c0:	f7ff fee4 	bl	800b18c <_printf_common>
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d14a      	bne.n	800b45e <_printf_i+0x1f6>
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	b004      	add	sp, #16
 800b3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d2:	6823      	ldr	r3, [r4, #0]
 800b3d4:	f043 0320 	orr.w	r3, r3, #32
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	4833      	ldr	r0, [pc, #204]	; (800b4a8 <_printf_i+0x240>)
 800b3dc:	2778      	movs	r7, #120	; 0x78
 800b3de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	6829      	ldr	r1, [r5, #0]
 800b3e6:	061f      	lsls	r7, r3, #24
 800b3e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3ec:	d402      	bmi.n	800b3f4 <_printf_i+0x18c>
 800b3ee:	065f      	lsls	r7, r3, #25
 800b3f0:	bf48      	it	mi
 800b3f2:	b2b6      	uxthmi	r6, r6
 800b3f4:	07df      	lsls	r7, r3, #31
 800b3f6:	bf48      	it	mi
 800b3f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b3fc:	6029      	str	r1, [r5, #0]
 800b3fe:	bf48      	it	mi
 800b400:	6023      	strmi	r3, [r4, #0]
 800b402:	b91e      	cbnz	r6, 800b40c <_printf_i+0x1a4>
 800b404:	6823      	ldr	r3, [r4, #0]
 800b406:	f023 0320 	bic.w	r3, r3, #32
 800b40a:	6023      	str	r3, [r4, #0]
 800b40c:	2310      	movs	r3, #16
 800b40e:	e7a7      	b.n	800b360 <_printf_i+0xf8>
 800b410:	4824      	ldr	r0, [pc, #144]	; (800b4a4 <_printf_i+0x23c>)
 800b412:	e7e4      	b.n	800b3de <_printf_i+0x176>
 800b414:	4615      	mov	r5, r2
 800b416:	e7bd      	b.n	800b394 <_printf_i+0x12c>
 800b418:	682b      	ldr	r3, [r5, #0]
 800b41a:	6826      	ldr	r6, [r4, #0]
 800b41c:	6961      	ldr	r1, [r4, #20]
 800b41e:	1d18      	adds	r0, r3, #4
 800b420:	6028      	str	r0, [r5, #0]
 800b422:	0635      	lsls	r5, r6, #24
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	d501      	bpl.n	800b42c <_printf_i+0x1c4>
 800b428:	6019      	str	r1, [r3, #0]
 800b42a:	e002      	b.n	800b432 <_printf_i+0x1ca>
 800b42c:	0670      	lsls	r0, r6, #25
 800b42e:	d5fb      	bpl.n	800b428 <_printf_i+0x1c0>
 800b430:	8019      	strh	r1, [r3, #0]
 800b432:	2300      	movs	r3, #0
 800b434:	6123      	str	r3, [r4, #16]
 800b436:	4615      	mov	r5, r2
 800b438:	e7bc      	b.n	800b3b4 <_printf_i+0x14c>
 800b43a:	682b      	ldr	r3, [r5, #0]
 800b43c:	1d1a      	adds	r2, r3, #4
 800b43e:	602a      	str	r2, [r5, #0]
 800b440:	681d      	ldr	r5, [r3, #0]
 800b442:	6862      	ldr	r2, [r4, #4]
 800b444:	2100      	movs	r1, #0
 800b446:	4628      	mov	r0, r5
 800b448:	f7f4 feea 	bl	8000220 <memchr>
 800b44c:	b108      	cbz	r0, 800b452 <_printf_i+0x1ea>
 800b44e:	1b40      	subs	r0, r0, r5
 800b450:	6060      	str	r0, [r4, #4]
 800b452:	6863      	ldr	r3, [r4, #4]
 800b454:	6123      	str	r3, [r4, #16]
 800b456:	2300      	movs	r3, #0
 800b458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b45c:	e7aa      	b.n	800b3b4 <_printf_i+0x14c>
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	462a      	mov	r2, r5
 800b462:	4649      	mov	r1, r9
 800b464:	4640      	mov	r0, r8
 800b466:	47d0      	blx	sl
 800b468:	3001      	adds	r0, #1
 800b46a:	d0ad      	beq.n	800b3c8 <_printf_i+0x160>
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	079b      	lsls	r3, r3, #30
 800b470:	d413      	bmi.n	800b49a <_printf_i+0x232>
 800b472:	68e0      	ldr	r0, [r4, #12]
 800b474:	9b03      	ldr	r3, [sp, #12]
 800b476:	4298      	cmp	r0, r3
 800b478:	bfb8      	it	lt
 800b47a:	4618      	movlt	r0, r3
 800b47c:	e7a6      	b.n	800b3cc <_printf_i+0x164>
 800b47e:	2301      	movs	r3, #1
 800b480:	4632      	mov	r2, r6
 800b482:	4649      	mov	r1, r9
 800b484:	4640      	mov	r0, r8
 800b486:	47d0      	blx	sl
 800b488:	3001      	adds	r0, #1
 800b48a:	d09d      	beq.n	800b3c8 <_printf_i+0x160>
 800b48c:	3501      	adds	r5, #1
 800b48e:	68e3      	ldr	r3, [r4, #12]
 800b490:	9903      	ldr	r1, [sp, #12]
 800b492:	1a5b      	subs	r3, r3, r1
 800b494:	42ab      	cmp	r3, r5
 800b496:	dcf2      	bgt.n	800b47e <_printf_i+0x216>
 800b498:	e7eb      	b.n	800b472 <_printf_i+0x20a>
 800b49a:	2500      	movs	r5, #0
 800b49c:	f104 0619 	add.w	r6, r4, #25
 800b4a0:	e7f5      	b.n	800b48e <_printf_i+0x226>
 800b4a2:	bf00      	nop
 800b4a4:	0804d171 	.word	0x0804d171
 800b4a8:	0804d182 	.word	0x0804d182

0800b4ac <memmove>:
 800b4ac:	4288      	cmp	r0, r1
 800b4ae:	b510      	push	{r4, lr}
 800b4b0:	eb01 0402 	add.w	r4, r1, r2
 800b4b4:	d902      	bls.n	800b4bc <memmove+0x10>
 800b4b6:	4284      	cmp	r4, r0
 800b4b8:	4623      	mov	r3, r4
 800b4ba:	d807      	bhi.n	800b4cc <memmove+0x20>
 800b4bc:	1e43      	subs	r3, r0, #1
 800b4be:	42a1      	cmp	r1, r4
 800b4c0:	d008      	beq.n	800b4d4 <memmove+0x28>
 800b4c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4ca:	e7f8      	b.n	800b4be <memmove+0x12>
 800b4cc:	4402      	add	r2, r0
 800b4ce:	4601      	mov	r1, r0
 800b4d0:	428a      	cmp	r2, r1
 800b4d2:	d100      	bne.n	800b4d6 <memmove+0x2a>
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4de:	e7f7      	b.n	800b4d0 <memmove+0x24>

0800b4e0 <_sbrk_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4d06      	ldr	r5, [pc, #24]	; (800b4fc <_sbrk_r+0x1c>)
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	4608      	mov	r0, r1
 800b4ea:	602b      	str	r3, [r5, #0]
 800b4ec:	f7f8 fdfc 	bl	80040e8 <_sbrk>
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	d102      	bne.n	800b4fa <_sbrk_r+0x1a>
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	b103      	cbz	r3, 800b4fa <_sbrk_r+0x1a>
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	20000b50 	.word	0x20000b50

0800b500 <memcpy>:
 800b500:	440a      	add	r2, r1
 800b502:	4291      	cmp	r1, r2
 800b504:	f100 33ff 	add.w	r3, r0, #4294967295
 800b508:	d100      	bne.n	800b50c <memcpy+0xc>
 800b50a:	4770      	bx	lr
 800b50c:	b510      	push	{r4, lr}
 800b50e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b512:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b516:	4291      	cmp	r1, r2
 800b518:	d1f9      	bne.n	800b50e <memcpy+0xe>
 800b51a:	bd10      	pop	{r4, pc}

0800b51c <_realloc_r>:
 800b51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b520:	4680      	mov	r8, r0
 800b522:	4614      	mov	r4, r2
 800b524:	460e      	mov	r6, r1
 800b526:	b921      	cbnz	r1, 800b532 <_realloc_r+0x16>
 800b528:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b52c:	4611      	mov	r1, r2
 800b52e:	f7ff bc49 	b.w	800adc4 <_malloc_r>
 800b532:	b92a      	cbnz	r2, 800b540 <_realloc_r+0x24>
 800b534:	f7ff fbda 	bl	800acec <_free_r>
 800b538:	4625      	mov	r5, r4
 800b53a:	4628      	mov	r0, r5
 800b53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b540:	f000 f81b 	bl	800b57a <_malloc_usable_size_r>
 800b544:	4284      	cmp	r4, r0
 800b546:	4607      	mov	r7, r0
 800b548:	d802      	bhi.n	800b550 <_realloc_r+0x34>
 800b54a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b54e:	d812      	bhi.n	800b576 <_realloc_r+0x5a>
 800b550:	4621      	mov	r1, r4
 800b552:	4640      	mov	r0, r8
 800b554:	f7ff fc36 	bl	800adc4 <_malloc_r>
 800b558:	4605      	mov	r5, r0
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d0ed      	beq.n	800b53a <_realloc_r+0x1e>
 800b55e:	42bc      	cmp	r4, r7
 800b560:	4622      	mov	r2, r4
 800b562:	4631      	mov	r1, r6
 800b564:	bf28      	it	cs
 800b566:	463a      	movcs	r2, r7
 800b568:	f7ff ffca 	bl	800b500 <memcpy>
 800b56c:	4631      	mov	r1, r6
 800b56e:	4640      	mov	r0, r8
 800b570:	f7ff fbbc 	bl	800acec <_free_r>
 800b574:	e7e1      	b.n	800b53a <_realloc_r+0x1e>
 800b576:	4635      	mov	r5, r6
 800b578:	e7df      	b.n	800b53a <_realloc_r+0x1e>

0800b57a <_malloc_usable_size_r>:
 800b57a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b57e:	1f18      	subs	r0, r3, #4
 800b580:	2b00      	cmp	r3, #0
 800b582:	bfbc      	itt	lt
 800b584:	580b      	ldrlt	r3, [r1, r0]
 800b586:	18c0      	addlt	r0, r0, r3
 800b588:	4770      	bx	lr
	...

0800b58c <_init>:
 800b58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58e:	bf00      	nop
 800b590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b592:	bc08      	pop	{r3}
 800b594:	469e      	mov	lr, r3
 800b596:	4770      	bx	lr

0800b598 <_fini>:
 800b598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59a:	bf00      	nop
 800b59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b59e:	bc08      	pop	{r3}
 800b5a0:	469e      	mov	lr, r3
 800b5a2:	4770      	bx	lr
